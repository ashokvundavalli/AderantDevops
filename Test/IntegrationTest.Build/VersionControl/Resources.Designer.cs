//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTest.Build.VersionControl {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("IntegrationTest.Build.VersionControl.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-StrictMode -Version &apos;Latest&apos;
        ///[int]$i = 1
        ///
        ///# PowerShell has many quirks with square brackets in paths
        ///[string]$cwd = Get-Location
        ///$master = [Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\master.txt&apos;)
        ///$saturn = [Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\saturn.txt&apos;)
        ///
        ///&amp; git init
        ///Add-Content -LiteralPath $master -Value &apos;Some text&apos; -Force
        ///&amp; git add &apos;master.txt&apos;
        ///&amp; git commit -m &quot;$($i++;$i) Added master.txt&quot;
        ///
        ///Add-Content -LiteralPath $master -Value &apos;Some more&apos;
        ///&amp; git  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommitGraphWalking {
            get {
                return ResourceManager.GetString("CommitGraphWalking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-StrictMode -Version &apos;Latest&apos;
        ///
        ///# PowerShell has many quirks with square brackets in paths
        ///[string]$cwd = Get-Location
        ///$master = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\master.txt&apos;))
        ///$saturn = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\saturn.txt&apos;))
        ///
        ///&amp; git init .
        ///Add-Content -LiteralPath $master -Value &apos;Some text&apos; -Force
        ///
        ///&amp; git add &apos;master.txt&apos;
        ///&amp; git commit -m &apos;Added master.txt&apos;
        ///
        ///# Create saturn branch
        ///&amp; git checkout -b &apos;saturn&apos; -q
        ///Add-Content -Literal [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateRepo {
            get {
                return ResourceManager.GetString("CreateRepo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-StrictMode -Version &apos;Latest&apos;
        ///
        ///# PowerShell has many quirks with square brackets in paths
        ///[string]$cwd = Get-Location
        ///[string]$subfolder = &apos;Master&apos;
        ///
        ///#Create root folder for a &quot;cone&quot;
        ///New-Item -Path $cwd -Name $subfolder -ItemType &quot;directory&quot;
        ///&amp; git init .
        ///cd ($subfolder)
        ///$cwd = Get-Location
        ///
        ///#Create sub-directories under the cone
        ///[string]$subSubfolder1 = &apos;Subfolder1&apos;
        ///[string]$subSubfolder2 = &apos;Subfolder2&apos;
        ///New-Item -Path $cwd -Name $subSubFolder1 -ItemType &quot;directory&quot;
        ///New-Item -Path $cwd -Nam [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateSubfoldersRepo {
            get {
                return ResourceManager.GetString("CreateSubfoldersRepo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-StrictMode -Version &apos;Latest&apos;
        ///
        ///[string]$cwd = Get-Location
        ///$file = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\file&apos;))
        ///
        ///&amp; git checkout -b &apos;conundrum&apos; -q
        ///
        ///for ([int]$i = 0; $i -lt 3; $i++) {
        ///    Add-Content -LiteralPath &quot;$file$i.txt&quot; -Value &apos;Some text&apos; -Force
        ///    &amp; git add &quot;file$i.txt&quot;
        ///    &amp; git commit -m $i
        ///}.
        /// </summary>
        internal static string GenerateCommits {
            get {
                return ResourceManager.GetString("GenerateCommits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set-StrictMode -Version &apos;Latest&apos;
        ///
        ///# PowerShell has many quirks with square brackets in paths
        ///[string]$cwd = Get-Location
        ///$branch1 = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\branch1.txt&apos;))
        ///$branch1a = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\branch1a.txt&apos;))
        ///$branch2 = ([Management.Automation.WildcardPattern]::Unescape($cwd + &apos;.\branch2.txt&apos;))
        ///
        ///&amp; git init .
        ///Add-Content -LiteralPath $branch1 -Value &apos;foo&apos; -Force
        ///
        ///&amp; git add .
        ///&amp; git commit -m &apos;foo&apos;
        ///
        ///&amp; git chec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Merge {
            get {
                return ResourceManager.GetString("Merge", resourceCulture);
            }
        }
    }
}
