//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTest.Build {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UnitTest.Build.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;!--
        ///This is the integration tests app config file that has the config burnt in for integration tests to run.  This file
        ///must contain settings that match the integration test environment.  The integration environment file location is listed
        ///in the rsp at ../Modules/Build.Infrastructure/Src/Projects/PackageAndDeployRemote/TFSBuild.rsp.
        ///
        ///To run the integration tests locally you need to edit the following attributes
        /// - aderant/instanceMetadataConfigurationSection@environ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AppConfig {
            get {
                return ResourceManager.GetString("AppConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;bindings&gt;
        ///    &lt;customBinding&gt;
        ///        &lt;binding name=&quot;expertCustomHttpBinding&quot;
        ///                 sendTimeout=&quot;00:10:00&quot;&gt;
        ///            &lt;gzipMessageEncoding innerMessageEncoding=&quot;textMessageEncoding&quot;/&gt;
        ///            &lt;httpTransport authenticationScheme=&quot;Negotiate&quot;
        ///                           maxReceivedMessageSize=&quot;2147483647&quot;
        ///                           proxyAuthenticationScheme=&quot;Negotiate&quot;&gt;
        ///                &lt;extendedProtectionPolicy policyEnforcement=&quot;Never&quot; /&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bindings {
            get {
                return ResourceManager.GetString("bindings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;client&gt;
        ///  &lt;endpoint name=&quot;Budgeting&quot; address=&quot;http://WSAKL001092.ap.aderant.com/Expert_Local/ApplicationServices/Budgeting/BudgetingService.svc/Basic&quot; binding=&quot;basicHttpBinding&quot; behaviorConfiguration=&quot;LargeQuotaBehavior&quot; bindingConfiguration=&quot;expertBasicHttpBinding&quot; contract=&quot;Aderant.Budgeting.Interfaces.Service.IBudgetingContractAsync&quot;&gt;
        ///    &lt;identity&gt;
        ///      &lt;servicePrincipalName value=&quot;HTTP/WSAKL001092.ap.aderant.com&quot; /&gt;
        ///    &lt;/identity&gt;
        ///  &lt;/endpoint&gt;
        ///  &lt;endpoi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string clients {
            get {
                return ResourceManager.GetString("clients", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;12.0&quot; DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;Import Project=&quot;$(MSBuildToolsPath)\Microsoft.CSharp.targets&quot; /&gt;
        ///  &lt;Choose&gt;
        ///    &lt;When Condition=&quot;$(TargetFrameworkIdentifier) == &apos;.NETFramework&apos; And ($(TargetFrameworkVersion) == &apos;v4.5&apos; Or $(TargetFrameworkVersion) == &apos;v4.5.1&apos; Or $(TargetFrameworkVersion) == &apos;v4.5.2&apos; Or $(TargetFrameworkVersion) == &apos;v4.5.3&apos; Or $(TargetFrameworkVersion) == &apos;v4.6&apos; Or $( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CSharpProject {
            get {
                return ResourceManager.GetString("CSharpProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;environment name=&quot;Local&quot; networkSharePath=&quot;C:\ExpertShare&quot; sourcePath=&quot;C:\tfs\expertsuite\releases\803x\Binaries\ExpertSource&quot; networkDeploymentType=&quot;NetworkCustom&quot; createClickOnceDeployments=&quot;true&quot; owner=&quot;cmsdbo&quot; expertServiceUser=&quot;ADERANT_AP\service.expert.ap&quot; expertServicePassword=&quot;bBh4t9wdtZN+hR2LMh6wVw==&quot; networkLoadBalancer=&quot;&quot; removeOnError=&quot;true&quot; skipPackageImport=&quot;false&quot; isDevEnvironment=&quot;true&quot; failOnSDKDependencyFailure=&quot;false&quot; reportServerUser=&quot;cmsdbo&quot; repo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string environment {
            get {
                return ResourceManager.GetString("environment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;ProductManifest Name=&quot;Expert&quot; ExpertVersion=&quot;802&quot;&gt;
        ///  &lt;Modules&gt;
        ///    &lt;Module Name=&quot;Applications.Administration&quot; AssemblyVersion=&quot;1.8.0.0&quot; /&gt;
        ///    &lt;Module Name=&quot;Applications.CCLogViewer&quot; AssemblyVersion=&quot;1.8.0.0&quot; GetAction=&quot;branch&quot; Path=&quot;Main&quot; /&gt;
        ///    &lt;Module Name=&quot;Applications.Customization&quot; AssemblyVersion=&quot;1.8.0.0&quot; /&gt;
        ///    &lt;Module Name=&quot;Applications.Deployment&quot; AssemblyVersion=&quot;1.8.0.0&quot; /&gt;
        ///    &lt;Module Name=&quot;Applications.DesignStudio&quot; AssemblyVersion=&quot;1.8.0.0&quot; /&gt;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ExpertManifest {
            get {
                return ResourceManager.GetString("ExpertManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;instanceMetadataConfigurationSection environment=&quot;Local&quot;&gt;
        ///  &lt;repository name=&quot;_803x&quot; server=&quot;WSAKL001092&quot; userid=&quot;cmsdbo&quot; password=&quot;eozBzG3osa/FNS5EzgQb3Q==&quot; /&gt;
        ///  &lt;expertShare uri=&quot;C:\ExpertShare&quot; /&gt;
        ///  &lt;queryService uri=&quot;http://WSAKL001092.ap.aderant.com/Expert_Local/FrameworkServices/Query/QueryService.svc&quot; /&gt;
        ///  &lt;notificationService uri=&quot;http://WSAKL001092.ap.aderant.com/Expert_Local/FrameworkServices/Notification/Notifications&quot; /&gt;
        ///&lt;/instanceMetadataConfigurati [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string instance {
            get {
                return ResourceManager.GetString("instance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project DefaultTargets=&quot;ModuleBuild&quot;
        ///         xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;
        ///         ToolsVersion=&quot;12.0&quot;&gt;
        ///
        ///  &lt;Import Project=&quot;$(MSBuildExtensionsPath)\Microsoft\VisualStudio\TeamBuild\Microsoft.TeamFoundation.Build.targets&quot; /&gt;
        ///  &lt;Import Project=&quot;$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets&quot;/&gt;
        ///  &lt;!--Server build for all modules--&gt;
        ///  &lt;Import Condition=&quot;(&apos;$(BuildAll)&apos;==&apos;true&apos;) And (&apos;$(IsDesktopBuild) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProjectFileText1 {
            get {
                return ResourceManager.GetString("ProjectFileText1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SRCSRV: ini ------------------------------------------------
        ///VERSION=3
        ///INDEXVERSION=2
        ///VERCTRL=Team Foundation Server
        ///DATETIME=Wed Apr 22 01:16:10 2015
        ///INDEXER=MSCT
        ///SRCSRV: variables ------------------------------------------
        ///TFS_EXTRACT_CMD=tf.exe view /version:%var4% /noprompt &quot;$%var3%&quot; /server:%fnvar%(%var2%) /console &gt;%srcsrvtrg%
        ///TFS_EXTRACT_TARGET=C:\Temp\%var2%%fnbksl%(%var3%)\%var4%\%fnfile%(%var5%)
        ///SRCSRVVERCTRL=tfs
        ///SRCSRVERRDESC=access
        ///SRCSRVERRVAR=var2
        ///VSTFSSERVER=http://tfs:8080/tfs/ad [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SrcSrvStream1 {
            get {
                return ResourceManager.GetString("SrcSrvStream1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type file
        ///id Aderant.Deployment.Core
        ///authors Aderant
        ///description
        ///    Provides libraries and services for deploying an Expert environment.
        ///files    
        ///    Bin/Module/*.config ==&gt; lib 
        ///    Bin/Module/Aderant.* ==&gt; lib 
        ///    Bin/Module/PrerequisitesPowerShell/* ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/PrerequisitesPowerShell ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/Monitoring ==&gt; lib/Monitoring
        ///    Bin/Module/InstallerManifests ==&gt; lib/InstallerManifests
        ///    !Bin/Module/*.exe.config
        ///
        ///dep [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_paket_template_with_dependencies {
            get {
                return ResourceManager.GetString("test_paket_template_with_dependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type file
        ///id Aderant.Framework.Core
        ///authors Aderant
        ///description
        ///    Core Framework libraries.
        ///files
        ///	Bin/Module/Aderant.Framework.* ==&gt; lib
        ///	Bin/Module/Aderant.Expressions.* ==&gt; lib
        ///	Bin/Module/Aderant.Deployment.Client.* ==&gt; lib
        ///	Bin/Module/Aderant.Framework.Communication.Client.* ==&gt; lib
        ///	Bin/Module/Aderant.Framework.Communication.Server.* ==&gt; lib
        ///	Bin/Module/Aderant.Framework.Configuration.* ==&gt; lib
        ///	Bin/Module/Aderant.Framework.Configuration.Service.* ==&gt; lib
        ///	Bin/Module/Aderant.Framework.I [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string test_paket_template_with_mixed_whitespace {
            get {
                return ResourceManager.GetString("test_paket_template_with_mixed_whitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type file
        ///id Aderant.Deployment.Core
        ///authors Aderant
        ///description
        ///    Provides libraries and services for deploying an Expert environment.
        ///files    
        ///    Bin/Module/*.config ==&gt; lib 
        ///    Bin/Module/Aderant.* ==&gt; lib 
        ///    Bin/Module/PrerequisitesPowerShell/* ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/PrerequisitesPowerShell ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/Monitoring ==&gt; lib/Monitoring
        ///    Bin/Module/InstallerManifests ==&gt; lib/InstallerManifests
        ///    !Bin/Module/*.exe.config.
        /// </summary>
        internal static string test_paket_template_without_dependencies {
            get {
                return ResourceManager.GetString("test_paket_template_without_dependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type file
        ///id Aderant.Deployment.Core
        ///authors Aderant
        ///description
        ///    Provides libraries and services for deploying an Expert environment.
        ///files    
        ///    Bin/Module/*.config ==&gt; lib 
        ///    Bin/Module/Aderant.* ==&gt; lib 
        ///    Bin/Module/PrerequisitesPowerShell/* ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/PrerequisitesPowerShell ==&gt; lib/PrerequisitesPowerShell
        ///    Bin/Module/Monitoring ==&gt; lib/Monitoring
        ///    Bin/Module/InstallerManifests ==&gt; lib/InstallerManifests
        ///    !Bin/Module/*.exe.config.
        /// </summary>
        internal static string test_paket_template_without_dependencies_UNIX {
            get {
                return ResourceManager.GetString("test_paket_template_without_dependencies_UNIX", resourceCulture);
            }
        }
    }
}
