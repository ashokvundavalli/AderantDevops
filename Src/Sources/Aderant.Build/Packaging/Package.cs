using System.Management.Automation;
using Aderant.Build.Logging;

namespace Aderant.Build.Packaging {
    /// <summary>
    /// The Cmdlet for PowerShell "New-ExpertPackage"
    /// To pack the project executives into a .nupkg package.
    /// </summary>
    [Cmdlet(VerbsCommon.New, "ExpertPackage")]
    [OutputType(typeof(PackResult))]
    public class Package : PSCmdlet {
        /// <summary>
        /// Root directory of the project and where the .paket.template file resides.
        /// </summary>
        [Parameter(Mandatory = true, Position = 0)]
        public string Repository { get; set; }

        /// <summary>
        /// Nupkg version. e.g. 0.1.0
        /// </summary>
        [Parameter(Mandatory = true, Position = 1)]
        public string Version { get; set; }

        [Parameter(Mandatory = false, Position = 2)]
        public bool Replicate { get; set; } = false;

        /// <summary>
        /// To execute this cmdlet by Windows PowerShell.
        /// Create a Packager object and execute the Pack method to generate a .nupkg package referencing the .paket.template file and other resources generated by the compiler.
        /// </summary>
        protected override void ProcessRecord() {
            base.ProcessRecord();

            // Create Packager object and pass the root directory of the project and a logger reference to the PowerShell output
            var packager = new Packager(new PhysicalFileSystem(Repository), new PowerShellLogger(this.Host));
            // Writes to the output pipeline, false means to reserve the returned object for later PowerShell scripts to use.
            WriteObject(packager.Pack(Version, Replicate), false);
        }
    }
}