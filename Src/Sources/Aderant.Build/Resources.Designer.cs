//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aderant.Build {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Aderant.Build.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string DoubleSpace {
            get {
                return ResourceManager.GetString("DoubleSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found the following test assemblies:.
        /// </summary>
        internal static string FoundAssemblies {
            get {
                return ResourceManager.GetString("FoundAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///cls
        ///echo You are running %~nx0 from %~dp0. Current dir is %cd%
        ///PowerShell -NoProfile -ExecutionPolicy Bypass -Command &quot;%~dp0\persist-build.ps1&quot;
        ///pause.
        /// </summary>
        internal static string PersistBuildBatch {
            get {
                return ResourceManager.GetString("PersistBuildBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use the provided batch scripts to persist this build.
        ///
        ///PERSIST-BUILD.BAT - create labels/tags and retain the builds indefinitely
        ///1. Provide a name (without spaces) that will be used for creating a TFS label and Git tags
        ///2. Provide a comment for the label/tags
        ///3. The script will attempt to do a dry run of all actions. If anything goes south here (e.g. due to missing rights or corrupt input file etc.), nothing will be actually happen
        ///4. After a succesful dry run the script will run again, but th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PersistBuildReadme {
            get {
                return ResourceManager.GetString("PersistBuildReadme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to param([switch]$undo) # this switch can be used to reset the build retain flags and quality as well as remove the label and tags from the repositories
        ///
        ///
        ///#setup logging
        ///$ErrorActionPreference = &quot;SilentlyContinue&quot;
        ///Stop-Transcript | out-null
        ///$ErrorActionPreference = &apos;Stop&apos;
        ///
        ///# create C:\temp folder if it does not exist
        ///$tempFolderPath = &quot;C:\temp&quot;
        ///if (!(Test-Path $tempFolderPath)) {
        ///    New-Item -ItemType Directory -Path $tempFolderPath
        ///}
        ///
        ///$logFilePath = Join-Path $tempFolderPath persist-build_log.t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PersistBuildScript {
            get {
                return ResourceManager.GetString("PersistBuildScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&gt;
        ///  &lt;metadata&gt;
        ///    &lt;id&gt;$id$&lt;/id&gt;
        ///    &lt;description&gt;Default package for $id$&lt;/description&gt;
        ///    &lt;version&gt;$version$&lt;/version&gt;
        ///    &lt;authors&gt;Aderant&lt;/authors&gt;
        ///    &lt;owners&gt;Aderant&lt;/owners&gt;    
        ///    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
        ///  &lt;/metadata&gt;
        ///  &lt;files&gt;
        ///    &lt;file src=&quot;bin\**&quot; exclude=&quot;**\*paket*&quot; target=&quot;lib&quot; /&gt;
        ///  &lt;/files&gt;
        ///&lt;/package&gt;.
        /// </summary>
        internal static string TemplateNuspec {
            get {
                return ResourceManager.GetString("TemplateNuspec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///cls
        ///echo You are running %~nx0 from %~dp0. Current dir is %cd%
        ///PowerShell -NoProfile -ExecutionPolicy Bypass -Command &quot;%~dp0\persist-build.ps1&quot; -undo
        ///pause.
        /// </summary>
        internal static string UndoBatch {
            get {
                return ResourceManager.GetString("UndoBatch", resourceCulture);
            }
        }
    }
}
