<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="Build"
         ToolsVersion="14.0">

  <Import Project="Aderant.Build.Common.targets" />
  <Import Project="Aderant.Build.CopyToDropV2.targets" />
  <Import Project="Aderant.Build.Testing.targets" />
  <Import Project="Aderant.Build.IntegrationTesting.targets" />
  <Import Project="Aderant.Build.Publish.targets" />
  <Import Project="Aderant.CodeSigning.targets" />
  <Import Project="Mobile.targets" />

  <PropertyGroup>
    <CopyToDropV2 Condition="'$(CopyToDropV2)' == '' And '$(IsDesktopBuild)' == 'true'">false</CopyToDropV2>

    <!-- TODO: Enable...currently off for perf reasons-->
    <CodeCoverage>false</CodeCoverage>
  </PropertyGroup>

  <UsingTask TaskName="Aderant.Build.Tasks.GetAssemblyPlatform"
    AssemblyFile="$(BuildAssembly)"
    Condition="'$(IsCustomBuild)' != 'true'" />

  <!--
    ==========================================================================================
        Test Configuration
    ==========================================================================================
  -->
  <PropertyGroup>
    <RunTestsDependsOn>
      $(RunTestsDependsOn);
      CollectTestAssemblies;
    </RunTestsDependsOn>

    <AfterBuildDependsOn>
      ValidateRequiredProperties;
      <!--RunTests;
      RunIntegrationTests;
      --><!--RunAutomationTests;--><!--
      PublishModule;
      IndexSourcesAndPublishSymbols;
      MobileBuild;
      PostBuild;
      SignInstallers;-->
      PackageArtifactsCore;
      CopyToDropV2;
      RunCopyToDropV2;
    </AfterBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <PackageArtifactsDependsOn>
      $(PackageArtifactsDependsOn);
      PackageArtifacts
    </PackageArtifactsDependsOn>
  </PropertyGroup>

  <!--Stub.-->
  <Target Name="PackageArtifacts" />

  <Target Name="PackageArtifactsCore" DependsOnTargets="$(PackageArtifactsDependsOn)">

    <PublishArtifacts
      ContextFileName="$(ContextFileName)"
      SolutionRoot="$(SolutionRoot)"
      RootingPaths="$(BinModuleDirectory);$(BinTestDirectory)"
      Artifacts="@(PackageArtifact)" />

  </Target>

  <Target Name="CollectTestAssemblies">

    <ItemGroup>
      <TestAssemblies
        Include="$(BinTestDirectory)*UnitTest*.dll;
                 $(BinTestDirectory)*.Tests.ps1;"
        Exclude="$(BinTestDirectory)*Helpers*.dll;
                 $(BinTestDirectory)Microsoft.*" />
      <IntegrationTestAssemblies Include="$(BinTestDirectory)*IntegrationTest*.dll" />
    </ItemGroup>

    <ItemGroup>
      <AssembliesToAnalyze Include="@(ModuleBuildOutput)" Condition="'%(ModuleBuildOutput.OutputType)' == 'Module'" />
      <AssembliesToAnalyze Include="@(BuildOutput)" />
    </ItemGroup>

    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(AssembliesToAnalyze)">
      <Output ItemName="AssemblyList" TaskParameter="Assemblies" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssemblyList.FileName) [Platform: %(AssemblyList.Platform)]" Condition="'@(AssemblyList)' != ''" />

    <!-- 
      This section creates a .dll.config for each unit test assembly. The dll.config contains a probing path override 
      which includes two additional folders "ModuleBin" and "Dependencies". This is so unit tests can find dependencies
      without relying on copy local having deployed assemblies to the test directory.
    -->
    <PropertyGroup>
      <UnitTestAppConfigText>$([System.IO.File]::ReadAllText('$(BuildScriptsDirectory)UnitTestAppConfig.txt'))</UnitTestAppConfigText>
    </PropertyGroup>

    <ItemGroup>
      <TestAssemblyConfigFiles Include="@(TestAssemblies->'$(BinTestDirectory)%(RecursiveDir)%(Filename)%(Extension).config')" />
    </ItemGroup>

    <Touch Condition="!Exists(%(TestAssemblyConfigFiles.FullPath))"
      Files="%(TestAssemblyConfigFiles.FullPath)"
      AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="TouchedFiles" />
    </Touch>

    <ItemGroup>
      <XmlLinesToWrite Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
      <XmlLinesToWrite Include="&lt;configuration /&gt;" />
    </ItemGroup>

    <WriteLinesToFile Condition="'@(TouchedFiles)' != ''"
      File="%(TouchedFiles.FullPath)"
      Lines="@(XmlLinesToWrite)"
      Encoding="UTF-8" />

    <Error Condition="'$(UnitTestAppConfigText)' == ''" Text="No unit test app.config text defined!" />

    <XDocumentPoke Condition="Exists(%(TestAssemblyConfigFiles.FullPath))"
      File="%(TestAssemblyConfigFiles.FullPath)"
      Query="configuration/runtime"
      Value="$(UnitTestAppConfigText)" />

    <MakeSymlink Condition="'@(TestAssemblies)' != '' And Exists('$(DependenciesDirectory)')"
      Link="$(BinTestDirectory)Dependencies"
      Target="$(DependenciesDirectory)" />

    <MakeSymlink Condition="'@(TestAssemblies)' != '' And '$(IsWebModule)' != 'true'"
      Link="$(BinTestDirectory)ModuleBin"
      Target="$(BinModuleDirectory)" />
  </Target>

  <!-- Stub for customizers to override -->
  <Target Name="PostBuild" />

  <!-- Pull the entry targets into our context. This lets us call into PostBuild for people who want to customize the workflow -->
  <Import Project="$(SolutionDirectoryPath)Build\TFSBuild.proj" Condition="Exists('$(SolutionDirectoryPath)Build\TFSBuild.proj')" />


  <Target Name="Build" DependsOnTargets="AfterBuild">
  </Target>

  <Target Name="AfterBuild" DependsOnTargets="$(AfterBuildDependsOn)">
  </Target>

  <Target Name="ValidateRequiredProperties">
    <Error Condition="'$(SolutionDirectoryPath)' == ''" Text="SolutionDirectoryPath is undefined" />
    
  </Target>


  <Target Name="OnTestFailure">
    <CallTarget Targets="AfterRunTests;CopyTrxFile;MarkBuildStepAsFailed"/>
  </Target>

  <Target Name="AfterRunTests"
    AfterTargets="RunTests">

    <RemoveDir Directories="$(BinTestDirectory)Dependencies"
      ContinueOnError="true"  />
    <RemoveDir Directories="$(BinTestDirectory)ModuleBin"
      ContinueOnError="true" />
    <RemoveDir Directories="$(BinTestDirectory)TestResults\packages"
      ContinueOnError="true" />

    <Delete Condition="'@(TestAssemblyConfigFiles)' != ''"
      Files="@(TestAssemblyConfigFiles)"
      TreatErrorsAsWarnings="true" />
  </Target>


  <Target Name="CopyTrxFile" AfterTargets="RunTests">
    <!--<ItemGroup>
      <TestResults Include="$(SolutionDirectoryPath)**\*.trx" />
    </ItemGroup>

    <Copy Condition="@(TestResults) != ''"
          SourceFiles="@(TestResults)"
          DestinationFiles="$(BinTestDirectory)TestResults.trx" />-->
  </Target>


  <Target Name="RunCopyToDropV2" Condition="Exists('$(SolutionDirectoryPath)CopyToDrop.ps1')">

    <Message Text="Running: $(SolutionDirectoryPath)CopyToDrop.ps1"></Message>

    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command='"Powershell" -noprofile -ExecutionPolicy RemoteSigned "$(SolutionDirectoryPath)CopyToDrop.ps1"' />

  </Target>


  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->
  <Target Name="MarkBuildStepAsFailed"
    Condition="'$(IsDesktopBuild)' != 'true' And '$(IsCustomBuild)' != 'true'">
    <Message Text="Marking build as failed" />

  </Target>

</Project>
