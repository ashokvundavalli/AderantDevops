<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="14.0"
         DefaultTargets="BuildAndPackage"
         InitialTargets="SetPropertiesFromContext;"
         TreatAsLocalProperty="SolutionRoot;BuildFlavor">

  <!-- Server build property setup -->
  <PropertyGroup Condition="'$(BUILD_BUILDURI)' != ''">
    <SolutionRoot Condition="'$(BUILD_SOURCESDIRECTORY)' != ''">$(BUILD_SOURCESDIRECTORY)</SolutionRoot>
  </PropertyGroup>

  <!-- Desktop build property setup -->
  <PropertyGroup Condition="'$(BUILD_BUILDURI)' == ''">
    <SolutionRoot Condition="'$(SolutionRoot)' == ''">$(MSBuildStartupDirectory)</SolutionRoot>
  </PropertyGroup>

  <PropertyGroup>
    <!--Ensure root path is consistent-->
    <SolutionRoot Condition="'$(SolutionRoot)' != '' and !HasTrailingSlash('$(SolutionRoot)')">$(SolutionRoot)\</SolutionRoot>

    <BuildInParallel Condition="'$(BuildInParallel)' != 'false' And '$(MSBuildNodeCount)' &gt; '1'">true</BuildInParallel>

    <!--Test configuration-->
    <RunTests>$([MSBuild]::ValueOrDefault('$(RunTests)', 'true'))</RunTests>
    <RunIntegrationTests>$([MSBuild]::ValueOrDefault('$(RunIntegrationTests)', 'false'))</RunIntegrationTests>

    <!-- TODO: Move to each project -->
    <RunCodeAnalysis>$(RunCodeAnalysisSetting)</RunCodeAnalysis>
    <RunCodeAnalysis Condition="'$(IsCustomBuild)' == 'true'">false</RunCodeAnalysis>

    <!-- Location to drop artifacts (packaged outputputs) -->
    <ArtifactStagingDirectory Condition="'$(ArtifactStagingDirectory)' == ''">$(SolutionRoot)_as\</ArtifactStagingDirectory>

    <!-- Location to drop outputs to share within the build -->
    <UseSharedDependencyDirectory Condition="'$(UseSharedDependencyDirectory)' == ''">true</UseSharedDependencyDirectory>
    <SharedDependencyDirectory Condition="'$(SharedDependencyDirectory)' == ''">$(ArtifactStagingDirectory)out\</SharedDependencyDirectory>

    <BuildInfrastructureDirectory>$([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))))))</BuildInfrastructureDirectory>
    <PackageScriptsDirectory>$(BuildInfrastructureDirectory)\Src\Package\</PackageScriptsDirectory>
    <BuildScriptsDirectory>$(BuildInfrastructureDirectory)\Src\Build\</BuildScriptsDirectory>
    <BuildToolsDirectory>$(BuildInfrastructureDirectory)\Src\Build.Tools\</BuildToolsDirectory>

    <!-- Defines the dynamic project file which contains all projects within this build -->
    <BuildPlan Condition="'$(BuildPlan)' == ''">$(SolutionRoot)BuildPlan.proj</BuildPlan>

    <CopyToDropEnabled Condition="'$(IsDesktopBuild)' != 'true'">true</CopyToDropEnabled>
    <PackageProduct Condition="'$(CopyToDropEnabled)' == 'true'">true</PackageProduct>
  </PropertyGroup>

  <Import Project="Aderant.Build.Common.targets" />
  <Import Project="Aderant.Build.Testing.targets" />
  <Import Project="Aderant.Build.IntegrationTesting.targets" />

  <PropertyGroup>
    <BuildAndPackageDependsOn>
      PrepareBuildEnvironment;
      CleanStagingDirectory;
      GetTfvc;
      GrovelForExtensibilityFiles;
      CreatePlan;
      GetAllDependencies;
      ExecutePlan;
      RunTests;
      RunIntegrationTests;
      WriteStateFiles;
      PackageProduct;
      CopyToDrop;
    </BuildAndPackageDependsOn>
  </PropertyGroup>


  <Target Name="CleanStagingDirectory" Condition="'$(IsDesktopBuild)' == 'false'">
    <RemoveDir Directories="$(ArtifactStagingDirectory)" />
  </Target>


  <Target Name="GrovelForExtensibilityFiles">

    <ItemGroup>
      <ExtensibilityFiles Include="$(SolutionRoot)**\dir.props" />
    </ItemGroup>

  </Target>


  <Target Name="CreatePlan">

    <ItemGroup>
      <ExcludePaths Condition="'$(BuildSystemInTestMode)' != 'true'" Include="$(BuildSystemDirectory)" />
      <ExcludePaths Include=".git" />
      <ExcludePaths Include="$" />
      <ExcludePaths Include="\_" />
      <ExcludePaths Include="Applications.MatterCenterIntegration\" />
      <ExcludePaths Include="Applications.DocuDraftAddIn\" />

      <!--Need to teach the system that this provides the t4 engine-->
      <ExcludePaths Include="Build.T4Task\" />
      <ExcludePaths Include="Libraries.SoftwareFactory\" />

      <ExcludePaths Include="TempTransform\" />
      <ExcludePaths Include="Tests.Load\" />
      <ExcludePaths Include="Tests.Query\" />
      <!--bm -Include C:\tfs\ExpertSuite\Dev\vnext\Modules\ -Exclude Web.Workflow,Build.T4Task,Libraries.SoftwareFactory,Applications.Rates,Tests.Query -RemainingArgs /p:UseSharedDependencyDirectory=true-->
      <ExcludePaths Include="MomentumFileOpening\" />
      <ExcludePaths Include="Performance.ExpertSuite\" />
      <ExcludePaths Include="Aderant.ExpertIntegration.iManage\" /> <!-- Has stuff we can't build - missing third party libs-->
      <ExcludePaths Include="Workflow.Integration.Samples\" /> <!--Has "packages" checked in-->
    </ItemGroup>

    <!--
    ==========================================================================================
        Build Configurations
    ==========================================================================================
    -->
    <ItemGroup>
      <ConfigurationToBuild Condition="'$(BuildFlavor)' == 'Release'"
        Include="Release|Any CPU">
        <FlavorToBuild>Release</FlavorToBuild>
        <PlatformToBuild>Any CPU</PlatformToBuild>
      </ConfigurationToBuild>
      <ConfigurationToBuild Condition="'$(BuildFlavor)' == 'Debug'"
        Include="Debug|Any CPU">
        <FlavorToBuild>Debug</FlavorToBuild>
        <PlatformToBuild>Any CPU</PlatformToBuild>
      </ConfigurationToBuild>
    </ItemGroup>

    <!-- Builds the dynamic project file to control the build sequence -->
    <GenerateBuildPlan
      ContextEndpoint="$(ContextEndpoint)"
      ModulesDirectory="$(SolutionRoot)"
      BuildPlan="$(BuildPlan)"
      ExtensibilityFiles="@(ExtensibilityFiles)"
      GroupExecutionFile="$(MSBuildThisFileDirectory)ComboBuild.Core.targets"
      BeforeProjectFile="$(MSBuildThisFileDirectory)ComboBuild.Pre.targets"
      AfterProjectFile="$(MSBuildThisFileDirectory)ComboBuild.Post.targets"
      CommonProjectFile="$(MSBuildThisFileDirectory)ComboBuild.Common.proj"
      ExcludePaths="@(ExcludePaths)"
      ConfigurationToBuild="@(ConfigurationToBuild)">
      <Output TaskParameter="DirectoriesInBuild" ItemName="DirectoriesInBuild"/>
    </GenerateBuildPlan>

    <Message Text="ModulesInBuild: %(DirectoriesInBuild.Identity)" />

    <Error Condition="!Exists('$(BuildPlan)')" Text="$(BuildPlan) does not exist." />

    <Message Condition="'$(IsDesktopBuild)' == 'false'" Text="##vso[task.uploadfile]$(BuildPlan)" />
  </Target>


  <Target Name="WriteStateFiles" Condition="'$(IsDesktopBuild)' != 'true'">
    <WriteBuildStateFile>
      <Output TaskParameter="WrittenStateFiles" ItemName="StateFiles" />
    </WriteBuildStateFile>
  </Target>


  <PropertyGroup>
    <InitialTargetsDependsOn>ValidateRequiredProperties</InitialTargetsDependsOn>
  </PropertyGroup>


  <Target Name="ValidateRequiredProperties">
    <Error Condition="'$(XamlBuildDropLocation)' == ''" Text="XamlBuildDropLocation is undefined" />
    <Error Condition="'$(ProductManifestPath)' == ''" Text="ProductManifestPath is undefined" />
  </Target>


  <Target Name="SetPropertiesFromContext" DependsOnTargets="$(InitialTargetsDependsOn)">

    <WaitForDebugger Wait="$(WaitForDebugger)" />

    <GetPropertiesFromContext
      ContextEndpoint="$(ContextEndpoint)"
      ArtifactStagingDirectory="$(ArtifactStagingDirectory)">
      <Output TaskParameter="IsDesktopBuild" PropertyName="IsDesktopBuild" />
      <Output TaskParameter="BuildSystemDirectory" PropertyName="BuildSystemDirectory" />
      <Output TaskParameter="BuildFlavor" PropertyName="BuildFlavor" />
    </GetPropertiesFromContext>

  </Target>


  <Target Name="BuildAndPackage" DependsOnTargets="$(BuildAndPackageDependsOn)">
  </Target>


  <Target Name="GetAllDependencies"
          Condition="'$(UseSharedDependencyDirectory)' == 'true' And '$(RetrievePrebuilts)' != 'false'">

    <Message Text="Getting dependencies for build." />

    <GetDependencies
      ProductManifest="$(ProductManifestPath)"
      ModulesRootPath="$(SolutionRoot)"
      DependenciesDirectory="$(SharedDependencyDirectory)"
      DropPath="$(XamlBuildDropLocation)"
      ModulesInBuild="@(DirectoriesInBuild)" />

    <MakeSymlink
      Link="%(DirectoriesInBuild.FullPath)\Dependencies"
      Target="$(SharedDependencyDirectory)"
      Type="D" />

    <MakeSymlink
      Link="%(DirectoriesInBuild.FullPath)\packages"
      Target="$(SharedDependencyDirectory)\packages"
      Type="D" />

  </Target>


  <!--
    ==========================================================================================
    This target will build the projects in the plan
    ==========================================================================================
  -->
  <Target Name="ExecutePlan">
    <PropertyGroup>
      <CommonBuildProperties>
        BuildInParallel=true;
        BuildNumber=$(BuildNumber);
        BuildScriptsDirectory=$(BuildScriptsDirectory);
        ProductManifestPath=$(ProductManifestPath);
        BuildToolsDirectory=$(BuildToolsDirectory);
        UseSharedDependencyDirectory=$(UseSharedDependencyDirectory);
        SharedDependencyDirectory=$(SharedDependencyDirectory);
        BuildFlavor=$(BuildFlavor);
        ArtifactStagingDirectory=$(ArtifactStagingDirectory);
        CustomAfterMicrosoftCSharpTargets=$(CustomAfterMicrosoftCSharpTargets);
        CustomAfterMicrosoftCommonTargets=$(CustomAfterMicrosoftCommonTargets);
        CompileBuildSystem=false;
      </CommonBuildProperties>
    </PropertyGroup>

    <Message Text="$(CommonBuildProperties)" />

    <Error Condition="!Exists('$(BuildPlan)')" Text="Did not find $(BuildPlan) "/>

    <MSBuild Projects="$(BuildPlan)"
             Properties="$(CommonBuildProperties);BuildEnabled=true"
             StopOnFirstFailure="true"
             BuildInParallel="$(BuildInParallel)" />

  </Target>

  <Target Name="GetFilesForPackage">
    <PropertyGroup>
      <LocalExpertBinariesDirectory>$(ArtifactStagingDirectory)product\</LocalExpertBinariesDirectory>
      <ExpertSourceDirectory>$(LocalExpertBinariesDirectory)ExpertSource\</ExpertSourceDirectory>
      <ProductArchiveFile>$(ArtifactStagingDirectory)package\Binaries.zip</ProductArchiveFile>
    </PropertyGroup>

    <MakeDir Directories="$(LocalExpertBinariesDirectory)"
             Condition="!Exists('$(LocalExpertBinariesDirectory)')" />

    <GetArtifactPaths
      IncludeGeneratedArtifacts="true">
      <Output TaskParameter="ArtifactPaths" ItemName="LocalPackagePaths" />
    </GetArtifactPaths>

    <Message Text="Artifact deployment paths:" />
    <Message Text="%(LocalPackagePaths.FullPath) -> %(DestinationSubDirectory)" />

    <!--
      Item lists cannot be concatenated with other strings so we need to fall back to CreateItem
      to force msbuild to expand all the wildcard characters so to get real file paths
    -->
    <CreateItem Include="@(LocalPackagePaths->'%(FullPath)\**\**')" PreserveExistingMetadata="true">
      <Output ItemName="LocalPackageFiles" TaskParameter="Include" />
    </CreateItem>
  </Target>


  <Target Name="GetProduct">

    <ItemGroup>
      <FilesNotWanted Include="@(StateFiles)" />
    </ItemGroup>

    <ItemGroup>
      <!-- Subtract list of files not wanted -->
      <LocalPackageFiles Remove="@(FilesNotWanted)" />
    </ItemGroup>

    <Exec Condition="'$(GetProduct)' != 'false'"
      ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NonInteractive -NoProfile $(PackageScriptsDirectory)GetProduct.ps1 -productManifestPath $(ProductManifestPath) -dropRoot $(XamlBuildDropLocation) -binariesDirectory $(LocalExpertBinariesDirectory) -getDebugFiles:1 -skipDeploymentCheck"
      WorkingDirectory="$(LocalExpertBinariesDirectory)" />

    <Message Text="Updating product with outputs from this build..." />

    <!--TODO: Should we teach GetProduct how to do this? What if we have crazy assembly rules we want to fire-->
    <Copy SourceFiles="@(LocalPackageFiles)"
      DestinationFiles="@(LocalPackageFiles->'$(ExpertSourceDirectory)%(DestinationSubDirectory)%(RecursiveDir)%(Filename)%(Extension)')"
      UseHardlinksIfPossible="true">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <CheckForDoubleWrites FileList="@(FileWrites)" />

  </Target>


  <Target Name="GenerateFactory" Condition="'$(GenerateFactory)' != 'false'">

    <PropertyGroup>
      <FactoryResourceGenerator>$(ExpertSourceDirectory)FactoryResourceGenerator.exe</FactoryResourceGenerator>
      <FactorySearchPath>Aderant*.dll,*.exe</FactorySearchPath>
    </PropertyGroup>

    <Exec
      Condition="Exists($(FactoryResourceGenerator))"
      Command="&quot;$(FactoryResourceGenerator)&quot; /v:+ /SuppressHeader /f:$(ExpertSourceDirectory) /of:$(ExpertSourceDirectory)Factory.bin /sp:&quot;$(FactorySearchPath)&quot;"
      IgnoreExitCode="false" />

  </Target>


  <Target Name="ArchiveArtifacts" Condition="'$(PackageProduct)' == 'true'">

    <PropertyGroup>
      <CompressionLevel Condition="'$(CompressionLevel)' == ''">Fastest</CompressionLevel>
    </PropertyGroup>

    <ItemGroup>
      <DirectoriesToArchive Include="@(LocalPackagePaths)" Condition="'$([System.IO.Path]::GetFileName(%(LocalPackagePaths.FullPath)).StartsWith(&quot;~&quot;))' != 'true'"></DirectoriesToArchive>
    </ItemGroup>

    <GenerateArchives
      DirectoriesToArchive="@(DirectoriesToArchive)"
      OutputArchives="@(DirectoriesToArchive -> '%(FullPath)\%(Filename)%(Extension).zip')"
      CompressionLevel="$(CompressionLevel)">

      <Output TaskParameter="ArchivedFiles" ItemName="ArtifactArchives" />
    </GenerateArchives>

  </Target>


  <Target Name="PackageProduct" Condition="'$(PackageProduct)' == 'true'" DependsOnTargets="GetFilesForPackage;GetProduct;GenerateFactory;ArchiveArtifacts;">

    <!-- Compress-Archive fails in a 32-bit process due to its naive implementation so we shell out to 7zip -->
    <Exec Command='"$(BuildToolsDirectory)7z.exe" -bb1 a "$(ProductArchiveFile)" "$(LocalExpertBinariesDirectory)*"' />

    <PropertyGroup>
      <CreateArchiveHashScript>
        $hash = Get-FileHash -LiteralPath "$(ProductArchiveFile)" -Algorithm SHA1 -Verbose | Select-Object -ExpandProperty Hash
        $hash = $hash.ToLower()
        $fn = [System.IO.Path]::GetFileName("$(ProductArchiveFile)")
        Set-Content -LiteralPath "$(ProductArchiveFile).sha1" -Value "$hash  $fn"
        Add-Content -LiteralPath "$(ProductArchiveFile)" -Value "$hash" -Stream "sha1"
      </CreateArchiveHashScript>

    </PropertyGroup>

    <PowerShellScript ScriptBlock="$(CreateArchiveHashScript)" />

  </Target>


  <Target Name="ComputeFilesForDrop">

    <ItemGroup>
      <AdditionalArtifacts Include="$(ProductArchiveFile)">
        <ArtifactId>Product</ArtifactId>
        <ArtifactType>Branch</ArtifactType>
      </AdditionalArtifacts>
    </ItemGroup>

    <!-- ToDo: Update this to exclude directories for archived artifacts. -->

    <PublishArtifacts
      ArtifactStagingDirectory="$(ArtifactStagingDirectory)"
      Artifacts="@(AdditionalArtifacts)"
      DestinationRootPath="$(PrimaryDropLocation)">
      <Output TaskParameter="ArtifactPaths" ItemName="ArtifactPaths" />
      <Output TaskParameter="LinkCommands" ItemName="LinkCommands" />
    </PublishArtifacts>

    <!--Tell TFS about the new artifacts so it can manage them -->
    <Message Text="%(LinkCommands.Identity)" />
    <Message Text="Copy command: %(ArtifactPaths.FullPath) -> %(TargetPath)" />

  </Target>


  <Target Name="CopyToDrop" DependsOnTargets="ComputeFilesForDrop;CopyFilesToDrop" Condition="'$(CopyToDropEnabled)' == 'true' And '$(PrimaryDropLocation)' != ''">
  </Target>


  <Target Name="CopyFilesToDrop" Outputs="%(ArtifactPaths.TargetPath)">
    <Error Condition="!Exists('%(ArtifactPaths.FullPath)')" Text="The path %(ArtifactPaths.FullPath) does not exist. This indicates a failure in artifact tracking." />

    <PropertyGroup>
      <CopyToDropCommand>
        robocopy.exe "%(ArtifactPaths.FullPath)" "%(TargetPath)" %(ArtifactPaths.FileName)%(ArtifactPaths.Extension).zip Binaries.zip *.metadata *.sha1 /MT /S /NDL /R:10 /NP /LOG:"$(ArtifactStagingDirectory)CopyToDrop.log" /TEE
        IF %ERRORLEVEL% LEQ 4 EXIT /B 0
      </CopyToDropCommand>
    </PropertyGroup>

    <Exec Command="$(CopyToDropCommand)"
          WorkingDirectory="$(ArtifactStagingDirectory)" />

    <PowerShellScript ScriptBlock='Get-Content -LiteralPath "$(ArtifactStagingDirectory)CopyToDrop.log" | Write-Output' />

  </Target>

  <!--
    ==========================================================================================
    Zip output
    ==========================================================================================
  -->
  <Target Name="ZipProduct" BeforeTargets="Package" Condition="'$(NoMSBuildCommunityTasks)' != 'true'">

    <PropertyGroup>
      <LocalExpertBinariesDirectory>$(ArtifactStagingDirectory)</LocalExpertBinariesDirectory>
      <ZipFileDirectory Condition="'$(ZipFileDirectory)' == ''">$(ArtifactStagingDirectory)</ZipFileDirectory>
      <ZipFile>$(ZipFileDirectory)\ExpertBinaries.zip</ZipFile>
      <EliteEnterpriseZipFile>$(ZipFileDirectory)\ExpertEEIntegrationBinaries.zip</EliteEnterpriseZipFile>
      <LicenseZipFile>$(ZipFileDirectory)\LicenseGenerator.zip</LicenseZipFile>
      <RegistrationZipFile>$(ZipFileDirectory)\RegistrationService.zip</RegistrationZipFile>
      <EliteEnterpriseBinOverrideDirectory>$(LocalExpertBinariesDirectory)\ExpertSource\EEBin</EliteEnterpriseBinOverrideDirectory>
    </PropertyGroup>

    <Message Text="Zipping product files"/>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <SharedExclusions
        Include="$(LocalExpertBinariesDirectory)\ExpertSource\Internal\**\*.*;
                 $(LocalExpertBinariesDirectory)\**\_PublishedWebsites\**\*;
                 $(LocalExpertBinariesDirectory)\**\LexisNexis*.*;
                 $(LocalExpertBinariesDirectory)\**\iManage*.*;
                 $(LocalExpertBinariesDirectory)\**\System.dll*;
                 $(LocalExpertBinariesDirectory)\**\System.Data.dll;
                 $(LocalExpertBinariesDirectory)\**\System.Drawing*.dll;
                 $(LocalExpertBinariesDirectory)\**\System.Windows.Forms*.dll;
                 $(LocalExpertBinariesDirectory)\**\System.Xml*dll*;
                 $(LocalExpertBinariesDirectory)\**\Microsoft.TeamFoundation.*dll*;
                 $(LocalExpertBinariesDirectory)\**\*UnitTest*;
                 $(LocalExpertBinariesDirectory)\**\TestLicenseRegistration*;
                 $(LocalExpertBinariesDirectory)\**\*CodeAnalysis*;
                 $(LocalExpertBinariesDirectory)\**\*.deploy.cmd;
                 $(LocalExpertBinariesDirectory)\**\*.deploy-readme.txt;
                 $(LocalExpertBinariesDirectory)\**\*.SetParameters.*;
                 $(LocalExpertBinariesDirectory)\**\*.BuildInfo.config;
                 $(LocalExpertBinariesDirectory)\**\DropFolderBuildNumbers.txt;" />

      <!-- Group of the roles shared between expert and elite -->
      <SharedRoles
        Include="$(LocalExpertBinariesDirectory)\**\commonapplications.role.xml;
                 $(LocalExpertBinariesDirectory)\**\configuration.role.xml;
                 $(LocalExpertBinariesDirectory)\**\customworkflows.role.xml;
                 $(LocalExpertBinariesDirectory)\**\firmcontrol.role.xml;
                 $(LocalExpertBinariesDirectory)\**\messaging.role.xml;
                 $(LocalExpertBinariesDirectory)\**\notes.role.xml;
                 $(LocalExpertBinariesDirectory)\**\queryservice.role.xml;
                 $(LocalExpertBinariesDirectory)\**\security.role.xml;
                 $(LocalExpertBinariesDirectory)\**\webcore.role.xml;
                 $(LocalExpertBinariesDirectory)\**\workflow.role.xml;
                 $(LocalExpertBinariesDirectory)\**\workflowauthoring.role.xml" />

      <!-- Group of the roles that should be elite only -->
      <EliteRoles
        Include="$(LocalExpertBinariesDirectory)\**\eliteintegration.role.xml;
                 $(LocalExpertBinariesDirectory)\**\matterplanningelite.role.xml" />

      <!-- Create a group of roles to exclude from elite (all roles minus the elite roles and shared roles) -->
      <EliteRoleExclusions
        Include="$(LocalExpertBinariesDirectory)\**\*.role.xml"
        Exclude="@(SharedRoles);@(EliteRoles)"/>

      <EliteOverrideFiles Include="$(EliteEnterpriseBinOverrideDirectory)\**\*.*" />

      <EliteDocuments Include="$(LocalExpertBinariesDirectory)\Elite Documentation\**\*.*"/>
      <Documents Include="$(LocalExpertBinariesDirectory)\Documentation\**\*.*"/>

      <ZipSourceFiles
        Include="$(LocalExpertBinariesDirectory)\**\*.*"
        Exclude="@(SharedExclusions);@(EliteRoles);@(EliteOverrideFiles);@(EliteDocuments)" />
      <ZipLicenseGeneratorFiles
        Include="$(LocalExpertBinariesDirectory)\ExpertSource\Internal\LicenseGenerator\*.*" />
      <ZipRegistrationServiceFiles
        Include="$(LocalExpertBinariesDirectory)\ExpertSource\Internal\RegistrationService\*.*" />
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <!-- Create ZIP for ExpertSource -->
    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(LocalExpertBinariesDirectory)"
      ParallelCompression="false" />

    <!-- Replace files in ExpertSource with the Elite bin folder overrides, used for things like message files and help. -->
    <!--
    <Copy
      SourceFiles="@(EliteOverrideFiles)"
      DestinationFiles="@(EliteOverrideFiles->'$(LocalExpertBinariesDirectory)\ExpertSource\%(RecursiveDir)%(Filename)%(Extension)')" />

    -->
    <!-- Essentially rename Elite.Help to Expert.Help -->
    <!--
    <Copy
      SourceFiles="$(LocalExpertBinariesDirectory)\ExpertSource\Help\Elite.Help.sfx"
      DestinationFiles="$(LocalExpertBinariesDirectory)\ExpertSource\Help\Expert.Help.sfx" />

    <Delete
      Files="$(LocalExpertBinariesDirectory)\ExpertSource\Help\Elite.Help.sfx" />

    -->
    <!-- Move the Elite specific docs into the Documents folder-->
    <!--
    <Delete
      Files="@(Documents)" />

    <Copy
      SourceFiles="@(EliteDocuments)"
      DestinationFiles="@(EliteDocuments->'$(LocalExpertBinariesDirectory)\Documentation\%(RecursiveDir)%(Filename)%(Extension)')" />

    -->
    <!-- This item group must go after the copy so that any moved files are included -->
    <!--
    <ItemGroup>
      <ZipEliteEnterpriseSourceFiles
        Include="$(LocalExpertBinariesDirectory)\**\*.*"
        Exclude="@(SharedExclusions);@(EliteRoleExclusions);@(EliteDocuments)" />
    </ItemGroup>

    -->
    <!-- Create ZIP for Elite Enterprise ExpertSource -->
    <!--
    <MSBuild.Community.Tasks.Zip
      Files="@(ZipEliteEnterpriseSourceFiles)"
      ZipFileName="$(EliteEnterpriseZipFile)"
      WorkingDirectory="$(LocalExpertBinariesDirectory)"
      ParallelCompression="false" />

    -->
    <!-- Create ZIP for LicenseGenerator -->
    <!--
    <MSBuild.Community.Tasks.Zip
      Files="@(ZipLicenseGeneratorFiles)"
      ZipFileName="$(LicenseZipFile)"
      WorkingDirectory="$(LocalExpertBinariesDirectory)\ExpertSource\Internal\LicenseGenerator"
      ParallelCompression="false" />

    -->
    <!-- Create ZIP for RegistrationService -->
    <!--
    <MSBuild.Community.Tasks.Zip
      Files="@(ZipRegistrationServiceFiles)"
      ZipFileName="$(RegistrationZipFile)"
      WorkingDirectory="$(LocalExpertBinariesDirectory)\ExpertSource\Internal\RegistrationService"
      ParallelCompression="false" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />-->
  </Target>


  <Target Name="GetTfvc" Condition="'$(IsDesktopBuild)' != 'true'">

    <PropertyGroup>
      <TfvcWorkFolder>$(SolutionRoot)</TfvcWorkFolder>
      <TfvcBranch>$(XamlBuildDropLocation.Replace("\\dfs.aderant.com\expertsuite\", ""))</TfvcBranch>
      <TfvcExcludedModules>Tests.Load</TfvcExcludedModules>
    </PropertyGroup>

    <Exec Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -Command &quot;&amp; &apos;$(BuildScriptsDirectory)TFVC-WorkSpace-Initialize.ps1&apos; -workfolder &apos;$(TfvcWorkFolder)&apos; -branch &apos;$(TfvcBranch)&apos; -ExcludedModules &apos;$(TfvcExcludedModules)&apos;&quot;"
      ContinueOnError="false"
      IgnoreExitCode="false" />

  </Target>

</Project>