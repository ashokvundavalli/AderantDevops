<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<NDepend AppName="Aderant Framework" Platform="DotNet">
  <OutputDir KeepHistoric="True" KeepXmlFiles="True" ViewReport="True">.\NDependOut</OutputDir>
  <Assemblies>
    <Name>Aderant.Framework</Name>
    <Name>Aderant.Framework.Workflow.Services</Name>
    <Name>Aderant.Framework.Workflow.Presentation</Name>
    <Name>Aderant.Framework.Workflow</Name>
    <Name>Aderant.Framework.Workflow.Client</Name>
    <Name>Aderant.Framework.Workflow.Activities</Name>
    <Name>Aderant.Framework.ServiceLibrary</Name>
    <Name>Aderant.Framework.Security.Services</Name>
    <Name>Aderant.Framework.Security.Presentation</Name>
    <Name>Aderant.Framework.Security</Name>
    <Name>Aderant.Framework.Presentation</Name>
    <Name>Aderant.Framework.Persistence</Name>
    <Name>Aderant.Framework.Identity.Services</Name>
    <Name>Aderant.Framework.Identity.Presentation</Name>
    <Name>Aderant.Framework.Identity</Name>
    <Name>Aderant.Framework.Configuration.Presentation</Name>
    <Name>Aderant.Framework.Configuration</Name>
    <Name>Aderant.Framework.Communication.Services</Name>
    <Name>Aderant.Framework.Communication.Server</Name>
    <Name>Aderant.Framework.Communication.Client</Name>
    <Name>ConfigurationManager</Name>
    <Name>ConfigurationLoader</Name>
    <Name>HashTool</Name>
    <Name>PolicyManager</Name>
    <Name>ResourceManager</Name>
    <Name>WorkflowLoader</Name>
    <Name>Aderant.Framework.Integration</Name>
    <Name>Aderant.Framework.Integration.Services</Name>
    <Name>Aderant.Framework.Notes.Services</Name>
    <Name>Aderant.Framework.Notes.Presentation</Name>
    <Name>Aderant.Framework.Notes</Name>
    <Name>Aderant.Framework.Services.Monitoring</Name>
    <Name>Aderant.Framework.Wizards</Name>
    <Name>Aderant.Framework.Workflow.ContextDataGenerator</Name>
    <Name>Aderant.PresentationFramework.Windows</Name>
    <Name>Aderant.PresentationFramework.Images</Name>
    <Name>Aderant.PresentationFramework</Name>
    <Name>CustomizationPackageManager</Name>
    <Name>CustomizationBuilder</Name>
    <Name>FactoryResourceGenerator</Name>
    <Name>ExpertTaskServer</Name>
    <Name>ExpertTask</Name>
    <Name>ExpertService</Name>
    <Name>ExpertAssistantDetached</Name>
    <Name>ExpertAssistantCO</Name>
    <Name>ExpertAssistant</Name>
    <Name>DomainWizard</Name>
    <Name>DomainViewWizard</Name>
    <Name>MtiManager</Name>
    <Name>PerformanceManager</Name>
    <Name>SolutionDesigner</Name>
    <Name>SmartFormWizard</Name>
    <Name>SmartFormAtion</Name>
    <Name>SecurityManager</Name>
    <Name>SystemMapBuilder</Name>
    <Name>Aderant.Framework.Security.ImportExport</Name>
    <Name>Aderant.Framework.Customization.Presentation</Name>
    <Name>Aderant.Framework.Customization.Packaging</Name>
    <Name>Aderant.Framework.Customization.Client</Name>
    <Name>Aderant.Framework.Customization</Name>
    <Name>Aderant.Framework.Communication.Caching</Name>
  </Assemblies>
  <FrameworkAssemblies>
    <Name>WindowsBase</Name>
    <Name>System.Workflow.Runtime</Name>
    <Name>System.Workflow.ComponentModel</Name>
    <Name>System.Workflow.Activities</Name>
    <Name>System.ServiceModel</Name>
    <Name>System.Runtime.Serialization</Name>
    <Name>System.IdentityModel</Name>
    <Name>PresentationFramework</Name>
    <Name>PresentationCore</Name>
    <Name>log4net</Name>
    <Name>ICSharpCode.TextEditor</Name>
    <Name>Infragistics2.Win.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinTree.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinToolbars.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinGrid.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinEditors.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinDataSource.v6.3</Name>
    <Name>Infragistics2.Win.Misc.v6.3</Name>
    <Name>Infragistics2.Shared.v6.3</Name>
    <Name>Iesi.Collections</Name>
    <Name>NHibernate</Name>
    <Name>System.Xml</Name>
    <Name>System.Windows.Forms</Name>
    <Name>System.Web</Name>
    <Name>System.Transactions</Name>
    <Name>System.ServiceProcess</Name>
    <Name>System.Runtime.Remoting</Name>
    <Name>System.Messaging</Name>
    <Name>System.Drawing</Name>
    <Name>System</Name>
    <Name>System.Design</Name>
    <Name>System.Data</Name>
    <Name>System.Configuration</Name>
    <Name>mscorlib</Name>
    <Name>Wintellect.Threading</Name>
    <Name>System.Core</Name>
    <Name>IronPython</Name>
    <Name>ICSharpCode.SharpZipLib</Name>
    <Name>DevComponents.WpfRibbon</Name>
    <Name>Xceed.Wpf.DataGrid</Name>
    <Name>System.Xml.Linq</Name>
    <Name>System.ServiceModel.Web</Name>
    <Name>System.Data.DataSetExtensions</Name>
    <Name>PresentationFramework.Aero</Name>
    <Name>Mindscape.WpfPropertyGrid</Name>
    <Name>WindowsFormsIntegration</Name>
    <Name>NVelocity</Name>
    <Name>Microsoft.Build.Engine</Name>
    <Name>Microsoft.Build.Framework</Name>
    <Name>UIAutomationProvider</Name>
    <Name>Microsoft.Office.Interop.Word</Name>
    <Name>UIAutomationTypes</Name>
    <Name>System.Configuration.Install</Name>
    <Name>Aderant.Deployment.Client</Name>
    <Name>Infragistics2.Win.UltraWinExplorerBar.v6.3</Name>
    <Name>Infragistics2.Win.UltraWinDock.v6.3</Name>
    <Name>Aderant.Framework.SoftwareFactory.Domain</Name>
    <Name>Microsoft.VisualStudio.Modeling.Sdk</Name>
    <Name>Microsoft.VisualStudio.Modeling.Sdk.Diagrams</Name>
    <Name>Aderant.Framework.SoftwareFactory.ViewModel</Name>
    <Name>Aderant.Framework.SoftwareFactory.Common</Name>
    <Name>Aderant.Framework.Communication.Caching.Common</Name>
    <Name>System.Management</Name>
    <Name>Microsoft.Practices.ObjectBuilder2</Name>
    <Name>Microsoft.Practices.Unity</Name>
    <Name>System.Management.Instrumentation</Name>
  </FrameworkAssemblies>
  <Dirs>
    <Dir>C:\Windows\Microsoft.NET\Framework\v2.0.50727</Dir>
    <Dir>C:\Program Files\Reference Assemblies\Microsoft\Framework\v3.0</Dir>
    <Dir>.\ADERANT\Framework\99.99.99.99\Bin</Dir>
  </Dirs>
  <Report XslPath="">
    <Section Enabled="True">Application Metrics</Section>
    <Section Enabled="True">Assemblies Metrics</Section>
    <Section Enabled="True">VisualNDepend View</Section>
    <Section Enabled="True">Assemblies Abstractness vs. Instability</Section>
    <Section Enabled="False">Assemblies Dependencies</Section>
    <Section Enabled="False">Assemblies Dependencies Diagram</Section>
    <Section Enabled="True">Assemblies build order</Section>
    <Section Enabled="True">NDepend information and warnings</Section>
    <Section Enabled="True">CQL Queries and Constraints</Section>
    <Section Enabled="True">Types Metrics</Section>
    <Section Enabled="False">Types Dependencies</Section>
  </Report>
  <BuildComparisonSetting ProjectMode="DontCompare" BuildMode="MostRecentBuildAvailable" ProjectFileToCompareWith="" BuildFileToCompareWith="" NDaysAgo="1" />
  <CoverageFiles UncoverableAttribute="" />
  <SourceFileRebasing FromPath="" ToPath="" /><CQLQueries>
    <CQLGroup Name="Source Code Quality constraints" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbLinesOfCode &gt; 30 AND !NameLike "InitializeComponent"  ORDER BY NbLinesOfCode DESC\r\n                // METHODS WHERE NbLinesOfCode &gt; 30 are extremely complex and\r\n                // should be split in smaller methods\r\n                // (except if they are automatically generated by a tool).\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE CyclomaticComplexity &gt; 20 ORDER BY CyclomaticComplexity DESC\r\n// METHODS WHERE CyclomaticComplexity &gt; 15 are hard to understand and maintain.\r\n// METHODS WHERE CyclomaticComplexity &gt; 30 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE PercentageComment &lt; 20 AND NbLinesOfCode &gt; 10  ORDER BY PercentageComment ASC\r\n// METHODS WHERE %Comment &lt; 20 and that have at least 10 lines of code should be more commented.\r\n// Refer to NbLinesOfComment documentation to understand how PercentageComment is computed.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Code Quality constraints" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbILInstructions &gt; 200  AND !NameLike "InitializeComponent"  ORDER BY NbILInstructions DESC\r\n                // METHODS WHERE NbILInstructions &gt; 200 are extremely complex and\r\n                // should be split in smaller methods\r\n                // (except if they are automatically generated by a tool).\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE ILCyclomaticComplexity &gt; 40 ORDER BY ILCyclomaticComplexity DESC\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 20 are hard to understand and maintain.\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 40 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbParameters &gt; 5 ORDER BY NbParameters DESC\r\n// METHODS WHERE NbParameters &gt; 5 might be painful to call and might degrade performance. \r\n// You should prefer using additional properties/fields to the declaring type to handle \r\n// numerous states. Another alternative is to provide a class or structure dedicated to \r\n// handle arguments passing (for example see the class System.Diagnostics.ProcessStartInfo \r\n// and the method System.Diagnostics.Process.Start(ProcessStartInfo))</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbVariables &gt; 15  AND !NameLike "InitializeComponent"  ORDER BY NbVariables DESC\r\n                // METHODS WHERE NbVariables &gt; 8 are hard to understand and maintain.\r\n                // METHODS WHERE NbVariables &gt; 15 are extremely complex and should be split in\r\n                // smaller methods (except if they are automatically generated by a tool).\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbMethods &gt; 20 ORDER BY NbMethods DESC\r\n// TYPES WHERE NbMethods &gt; 20 might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbMethods. \r\n// For example, the System.Windows.Forms.DataGridView standard class has more than 1000 methods.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbFields &gt; 20 AND !IsEnumeration ORDER BY NbFields DESC\r\n// TYPES WHERE NbFields &gt; 20 AND !IsEnumeration might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbFields. \r\n// For example, the System.Windows.Forms.Control standard class has more than 200 fields. \r\n// The value of the metric SizeOfInst might be a better indicator of complex type.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n     (  NbILInstructions &gt; 200 OR \r\n        ILCyclomaticComplexity &gt; 50 OR \r\n        NbParameters &gt; 5 OR \r\n        NbVariables &gt; 8) \r\n     AND \r\n// Here is a way to avoid to take account of generated methods.\r\n// Another way would be to use the SELECT METHODS FROM or SELECT METHODS OUT OF facilities.\r\n     !( NameLike "InitializeComponent" OR NameLike "Generated") </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOM DESC\r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 might be problematic. \r\n// However, it is very hard to avoid such non-cohesive types. The LCOMHS metric\r\n// is often considered as more efficient to detect non-cohesive types.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOMHS &gt; 0.95 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOMHS DESC\r\n// TYPES WHERE LCOMHS &gt; 1.0 AND NbFields &gt; 10 AND NbMethods &gt;10 should be avoided. \r\n// Note that this constraint is stronger than the constraint \r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10. </CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Performance constraints" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst &gt; 64 ORDER BY SizeOfInst DESC\r\n// TYPES WHERE SizeOfInst &gt; 64 might degrade performance (depending on the number of \r\n// instances created at runtime) and might be hard to maintain. \r\n// However it is not a rule since sometime there is no alternative \r\n// (the size of instances of the System.Net.NetworkInformation.SystemIcmpV6Statistics \r\n// standard class is 2064 bytes).</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True" DisplaySelectionView="False">WARN IF Percentage &gt; 5 IN SELECT METHODS WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True" DisplaySelectionView="False">WARN IF Percentage &gt; 5 IN SELECT TYPES WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Design constraints" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE ContainsNamespaceDependencyCycle\r\n // Dependency cycles between namespaces must be avoided \r\n// in order to have a levelized and comprehensive design.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE MethodCa == 0 AND \r\n!IsPublic AND !IsEntryPoint AND \r\n!IsExplicitInterfaceImpl AND !IsClassConstructor AND !IsFinalizer \r\n// Detect unused methods. \r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE TypeCa == 0 AND !IsPublic \r\n// Detect unused types. \r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst ==0 AND !IsStatic AND !IsGeneric AND !IsInterface \r\n// It indicate stateless types that might eventually be turned into static classes.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE DepthOfInheritance &gt;= 6 ORDER BY DepthOfInheritance DESC \r\n // Branches too long in the derivation should be avoided.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsClass AND NbChildren ==0 AND !IsSealed ORDER BY NbLinesOfCode \r\n // Classes with no descendant should be sealed.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Percentage &gt; 15 IN SELECT ASSEMBLIES WHERE NormDistFromMainSeq &gt; 0.7 ORDER BY NormDistFromMainSeq DESC\r\n// See the NormDistFromMainSeq documentation for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE RelationalCohesion &lt; 1.5 OR RelationalCohesion &gt; 4.0\r\n// As classes inside an assembly should be strongly related, \r\n// the cohesion should be high. On the other hand, a value which is too high may \r\n// indicate over-coupling. A good range for RelationalCohesion is 1.5 to 4.0.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Naming constraints" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^m_" AND IsStatic\r\n// A static field should not be named 'm_XXX'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^s_" AND !IsStatic\r\n// A non-static field should not be named 's_XXX'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsInterface AND !NameLike "^I" AND !IsNested \r\n// The name of a non-nested interface should begin with a 'I'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsExceptionClass AND !NameLike "Exception$" \r\n// The name of an exception class should end with 'Exception'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsAttributeClass AND !NameLike "Attribute$" \r\n// The name of an attribute class should end with 'Attribute'</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE \r\n !NameLike "^[A-Z]" AND // The name of a type should begin with an Upper letter.\r\n !NameLike "__StaticArrayInit" AND  // Except __StaticArrayInit generated type\r\n !NameLike "struct0x" AND           // Except struct0x generated type \r\n    !NameLike "&lt;"                      // Except C# compiler generated type</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n !NameLike "^[A-Z]" AND \r\n !(IsClassConstructor OR IsConstructor OR \r\n IsPropertyGetter  OR IsPropertySetter OR\r\n IsIndexerGetter OR IsIndexerSetter OR\r\n IsEventAdder OR IsEventRemover OR\r\n IsOperator)\r\n// The name of a regular method should begin with an Upper letter.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">WARN IF Count &gt; 0 IN SELECT FIELDS WHERE NameLike "^_"</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Queries to understand code" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 TYPES ORDER BY TypeRank DESC\r\n// TypeRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of types' dependencies \r\n// Types with high Rank are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 METHODS ORDER BY MethodRank DESC\r\n// MethodRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of methods' dependencies\r\n// Methods with high Rank are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 NAMESPACES ORDER BY NamespaceCa DESC\r\n// The Afferent Coupling for a particular namespace is the number of namespaces that depends directly on it.\r\n// Namespaces with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 TYPES ORDER BY TypeCa DESC\r\n// The Afferent Coupling for a particular type is the number of types that depends directly on it.\r\n// Types with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 METHODS ORDER BY MethodCa DESC\r\n// The Afferent Coupling for a particular method is the number of methods that depends directly on it.\r\n// Methods with high Ca are the most used ones.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 NAMESPACES ORDER BY NamespaceCe DESC\r\n// The Efferent Coupling for a particular namespace is the number of namespaces it directly depends on.\r\n// Namespaces declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 TYPES ORDER BY TypeCe DESC\r\n// The Efferent Coupling for a particular type is the number of types it directly depends on.\r\n// Types declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TOP 50 METHODS ORDER BY MethodCe DESC\r\n// The Efferent Coupling for a particular method is the number of methods it directly depends on.\r\n// Methods declared in Framework assemblies are taken account.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT ASSEMBLIES ORDER BY AssemblyLevel DESC\r\n// Classify assemblies by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT NAMESPACES ORDER BY NamespaceLevel DESC\r\n// Classify namespaces by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT TYPES ORDER BY TypeLevel DESC\r\n// Classify types by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">SELECT METHODS ORDER BY MethodLevel DESC\r\n// Classify methods by their Level values. \r\n// See the Level metric definition for more info.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Aderant Framework Rules" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*Using System.Web*/ WARN IF Count &gt; 0 IN SELECT TYPES WHERE IsDirectlyUsing "NAMESPACE:System.Web"</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*Unsealed Impl*/ WARN IF Count &gt; 0 IN SELECT TYPES WHERE NameLike "Impl$" AND (!IsSealed OR !IsInternal)</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*Non static logwriters*/ WARN IF Count &gt; 0 IN SELECT FIELDS WHERE IsOfType "Aderant.Framework.Logging.ILogWriter" AND (!IsStatic OR IsPublic)</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*Console.Writeline in dll*/WARN IF Count &gt; 0 IN SELECT ASSEMBLIES WHERE IsDirectlyUsing "System.Console" AND NameLike "Aderant.Framework.*"</CQLQuery>
      <CQLQuery Active="False" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*ArrayList*/WARN IF Count &gt; 0 IN SELECT METHODS WHERE IsDirectlyUsing "System.Collections.ArrayList" OR IsDirectlyUsing "System.Collections.IList"</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*BC using Arraylist*/WARN IF Count &gt; 0 IN SELECT TYPES WHERE (IsDirectlyUsing "System.Collections.ArrayList" OR IsDirectlyUsing "System.Collections.IList" )\r\n                AND NameLike "BC$"\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*Abstract class base suffixed */WARN IF Count &gt; 0 IN SELECT TYPES WHERE IsAbstract\r\n                AND !(NameLike "Base$" OR NameLike "Base\&lt;T.*\&gt;") AND  !IsInterface AND !IsInFrameworkAssembly\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*BCs Internal*/WARN IF Count &gt; 0 IN SELECT TYPES WHERE NameLike "BC$" AND !IsInternal</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                //&lt;Name&gt;Model Internal&lt;/Name&gt;\r\n                WARN IF Count &gt; 0 IN SELECT TYPES WHERE FullNameLike "\.Model\." AND !IsInternal AND !IsInterface\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">/*Using System.Data*/WARN IF Count &gt; 0 IN SELECT TYPES WHERE IsDirectlyUsing "NAMESPACE:System.Data"</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Aderant ECs Calling BCs" Active="False">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*Identity BC not called by EC*/WARN IF Count &gt; 0 IN SELECT TYPES OUT OF NAMESPACES "Aderant.Framework.Identity.Enterprise"\r\n                WHERE IsDirectlyUsing "Aderant.Framework.Identity.BusinessComponent"\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*Security BC not called by EC*/WARN IF Count &gt; 0 IN SELECT TYPES OUT OF NAMESPACES "Aderant.Framework.Security.Enterprise"\r\n                WHERE IsDirectlyUsing "Aderant.Framework.Security.BusinessComponent"\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*Workflow BC not called by EC*/WARN IF Count &gt; 0 IN SELECT TYPES OUT OF NAMESPACES "Aderant.Framework.Workflow.Enterprise"\r\n                WHERE IsDirectlyUsing "Aderant.Framework.Workflow.BusinessComponent"\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*Config BC not called by EC*/WARN IF Count &gt; 0 IN SELECT TYPES OUT OF NAMESPACES "Aderant.Framework.Configuration.Enterprise"\r\n                WHERE IsDirectlyUsing "Aderant.Framework.Configuration.BusinessComponent"\r\n            </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False">\r\n                /*EC - BC without rules*/ WARN IF Count &gt; 0 IN SELECT NAMESPACES WHERE NameLike "Enterprise"\r\n                AND !NameLike "(Security|Workflow|Configuration|Identity)"\r\n            </CQLQuery>
    </CQLGroup>
  </CQLQueries><WarnFilter WarnNotUsedType="True" WarnNotUsedMember="True" WarnTypeVisibility="False" WarnPropertiesVisibility="False" WarnMethodsVisibility="False" WarnConstructorsVisibility="False" WarnFieldsVisibility="False" WarnEventsVisibility="False" WarnAssemblyVersioningIssues="True" WarnPDBIssues="True">
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow.Presentation.SmartParts\ApprovedValueTaskControl.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow.Presentation\NoteEditWindow.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow.Presentation\NotesControl.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The System.Runtime.InteropServices.Marshal.SizeOf() method thrown a {System.ArgumentException} on the value type {AppearanceData}  Message: Type 'Infragistics.Win.AppearanceData' cannot be marshaled as an unmanaged structure; no meaningful size or offset can be computed.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow.Presentation\ProcessesControl.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow.Presentation\SplitControlWindow.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Workflow\src\Aderant.Framework.Workflow\Activities\Editors\ChooseWorkflowDefinition.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Security\src\Aderant.Framework.Security.Presentation\Controls\PolicySelector.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Security\src\Aderant.Framework.Security.Presentation\Controls\PolicyGrantees.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Security\src\Aderant.Framework.Security.Presentation\Controls\PolicyPermissions.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Security\src\Aderant.Framework.Security.Presentation\Controls\ResourceSecurer.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Foundation\src\Aderant.Framework.Presentation\Windows\StandardWindow.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Foundation\src\Aderant.Framework.Presentation\Controls\TypeBrowser\TypeBrowser.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Identity\src\Aderant.Framework.Identity.Presentation\Controls\IdentityExplorer.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Identity\src\Aderant.Framework.Identity.Presentation\Controls\IdentitySelector.xaml} contains CSharp code but has an invalid extension.</DontWarn>
    <DontWarn>WARNING: The source file {c:\Development\ToolsAndTechnology\Modules\Configuration\src\Aderant.Framework.Configuration.Presentation\EditConfigurationParameters.xaml} contains CSharp code but has an invalid extension.</DontWarn>
  </WarnFilter></NDepend>