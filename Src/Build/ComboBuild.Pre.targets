<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="EndToEnd"
         TreatAsLocalProperty="SolutionDirectoryPath;T4TransformEnabled">

  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' != 'true'" />
  <Import Project="RM.TransformTemplates.Targets" />
  <Import Project="Aderant.TextTransform.targets" />
  <Import Project="Aderant.Build.CustomSolutionPackaging.targets" />
  <Import Project="Aderant.Build.Clean.targets" />
  <Import Project="Aderant.ArtifactRestore.targets" />

  <Target Name="PreBuild" />

  <Target Name="RunBuildExtensions">
    <Message Text="Executing custom targets: $(RunUserTargets)" />
    <CallTarget Targets="PreBuild" />
  </Target>

  <PropertyGroup>
    <!--
    These targets make up the steps needed to package artifacts shipped as part of the product.
    These can be skipped if this file is scheduled to satisfy a build tree and wasn't scheduled explicitly by the user -->
    <TargetsForCustomizationFiles Condition="'$(RunUserTargets)' != 'false' Or '$(IsDesktopBuild)' == 'false'">
      ZipCustomSource;
      SeedPackagePacking;
      ZipWorkflowTemplateSource
    </TargetsForCustomizationFiles>
  </PropertyGroup>

  <PropertyGroup>
    <RunBuildDependsOn>
      _BeforeBuild;
      RunBuildExtensions;
      ValidateRequiredProperties;
      CleanBin;
      DeployPerDirectoryFiles;
      UpdateCommonAssemblyInfo;
      UpdateContext;
      $(TargetsForCustomizationFiles);
      RepairDirectoryLinks;
      GetDependencies;
      RunRetrieveArtifacts;
      rmTransformTemplates;
    </RunBuildDependsOn>
  </PropertyGroup>

  <!--
       Pull the entry targets into our context.
       This lets us call into it and lets people who want to customize the workflow change stuff in here
  -->
  <Import Project="$(SolutionDirectoryPath)Build\TFSBuild.proj" Condition="'$(RunUserTargets)' != 'false' And Exists('$(SolutionDirectoryPath)Build\TFSBuild.proj')" />

  <!-- Entry target -->
  <Target Name="EndToEnd" DependsOnTargets="$(RunBuildDependsOn)">
  </Target>

  <PropertyGroup>
    <ModuleBuildTempDirectory Condition="'$(ModuleBuildTempDirectory)' == ''">$(SolutionDirectoryPath)_tmp\</ModuleBuildTempDirectory>
    <rmBCItemTransformTemplatesEnabled Condition="'$(T4TransformEnabled)' == 'true'">true</rmBCItemTransformTemplatesEnabled>

    <!-- If we are skipping user targets then disable T4 - except for CI --><!--
    TODO: Sort this out
    <rmBCItemTransformTemplatesEnabled Condition="'$(RunUserTargets)' == 'false' And '$(IsDesktopBuild)' != 'false'">false</rmBCItemTransformTemplatesEnabled>-->
  </PropertyGroup>

  <!-- Clean -->
  <PropertyGroup>
    <CleanBin>$([MSBuild]::ValueOrDefault('$(switch-clean)', 'false'))</CleanBin>
  </PropertyGroup>


  <Target Name="_BeforeBuild">
    <PropertyGroup>
      <ModuleName Condition="'$(ModuleName)' == ''">$([System.IO.Directory]::GetParent(GetSolutionRoot).Name)</ModuleName>
    </PropertyGroup>

    <PrintBanner Text="$(ModuleName)" />
  </Target>


  <Target Name="ValidateRequiredProperties">
    <Error Condition="'$(SolutionDirectoryPath)' == ''" Text="Fatal error. SolutionDirectoryPath is undefined in element $(ProjectInstanceId)" />
    <Error Condition="'$(SolutionRoot)' == ''" Text="SolutionRoot is undefined." />
    <Error Condition="'$(CustomAfterMicrosoftCSharpTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom CSharp targets file set." />
    <Error Condition="'$(CustomAfterMicrosoftCommonTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom Microsoft common targets file set." />
  </Target>


  <PropertyGroup>
    <DependenciesDirectory>$(SolutionDirectoryPath)\Dependencies</DependenciesDirectory>
  </PropertyGroup>


  <Target Name="RepairDirectoryLinks" Condition="'$(UseSharedDependencyDirectory)' == 'true' And '$(SharedDependencyDirectory)' != ''">
    <ItemGroup>
      <Link Include="$(DependenciesDirectory)">
        <LinkTarget>$(SharedDependencyDirectory)</LinkTarget>
      </Link>
      <Link Include="$(SolutionRoot)\packages">
        <LinkTarget>$(SharedDependencyDirectory)packages</LinkTarget>
      </Link>
    </ItemGroup>

    <MakeSymlink
      Condition="!Exists('%(Link.FullPath)') And Exists('%(Link.LinkTarget)')"
      Link="%(Link.FullPath)"
      Target="%(Link.LinkTarget)"
      Type="D" />
  </Target>


  <!--
    ==========================================================================================
        CollectExtensibilityFiles
        Recursively finds all props files
    ==========================================================================================
  -->
  <Target Name="CollectExtensibilityFiles" Returns="@(ExtensibilityFiles)">

    <ItemGroup>
      <ExtensibilityFiles Include="$(SolutionRoot)\**\dir.props"
                          Exclude="$(SolutionRoot)\packages\**;
                                   $(DependenciesDirectory)\**" />
    </ItemGroup>
  </Target>



  <Target Name="RunRetrieveArtifacts" Condition="'$(RetrievePrebuilts)' != 'false'" DependsOnTargets="CollectExtensibilityFiles">
    <Message Text="$(ModuleName): Restoring objects from build cache" />
    <!--
      By specifying DestinationDirectories we overwrite the common dependency
      directory contents with objects from the cache so we do not reuse stale objects as inputs
      to child dependencies in the build.
    -->

    <MSBuild Condition="'@(ExtensibilityFiles->Count())' != '0'"
      Projects="$(MSBuildThisFileDirectory)Aderant.BuildExtensions.targets"
      Targets="GetStagingDirectoryWhitelist"
      Properties="ExtensibilityFile=%(ExtensibilityFiles.FullPath)"
      UnloadProjectsOnCompletion="true"
      ContinueOnError="true">
      <Output TaskParameter="TargetOutputs" ItemName="StagingDirectoryWhitelist" />
    </MSBuild>

    <RetrieveArtifacts
      ContextEndpoint="$(ContextEndpoint)"
      SolutionRoot="$(SolutionRoot)"
      WorkingDirectory="$(ModuleBuildTempDirectory)"
      CommonOutputDirectory="$(BinModuleDirectory)"
      CommonDependencyDirectory="$(SharedDependencyDirectory)"
      StagingDirectoryWhitelist="@(StagingDirectoryWhitelist)">
      <Output TaskParameter="ArtifactRestoreSkipped" PropertyName="ArtifactRestoreSkipped" />
    </RetrieveArtifacts>

    <MSBuild Condition="'@(ExtensibilityFiles->Count())' != '0' And '$(ArtifactRestoreSkipped)' != 'true'"
      Projects="$(MSBuildThisFileFullPath)"
      Properties="DirPropFile=%(ExtensibilityFiles.FullPath);CommonOutputDirectory=$(BinModuleDirectory);SolutionRoot=$(SolutionRoot)"
      Targets="ExtractBuildCachePackages" />

  </Target>


  <Target Name="GetDependencies" Condition="'$(UseSharedDependencyDirectory)' != 'true' And '$(GetDependencies)' != 'false'">

    <GetDependencies
      ProductManifest="$(ProductManifestPath)"
      BranchConfigFile="$(BranchConfigFile)"
      ModulesRootPath="$(SolutionRoot)"
      ModuleName="$(SolutionRoot)"
      EnabledResolvers="@(EnabledResolvers)" />

  </Target>


  <Target Name="DeployPerDirectoryFiles" Condition="'$(SolutionRoot)' != ''">

    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)" />
    <Message Text="T4TransformEnabled:    $(rmBCItemTransformTemplatesEnabled)" />
    <Message Text="ZipSource:             $(ZipSource)" />
    <Message Text="VersionMajor:          $(VersionMajor)" />
    <Message Text="VersionMinor:          $(VersionMinor)" />
    <Message Text="VersionBuild:          $(VersionBuild)" />
    <Message Text="VersionRevision:       $(VersionRevision)" />

    <ItemGroup>
      <BuildExtensionFiles Include="$(MSBuildThisFileDirectory)dir.proj">
        <Destination></Destination>
      </BuildExtensionFiles>
      <BuildExtensionFiles Include="$(MSBuildThisFileDirectory)Aderant.wpp.content.v3.proj">
        <Destination>Build\wpp</Destination>
      </BuildExtensionFiles>
      <BuildExtensionFiles Include="$(MSBuildThisFileDirectory)Aderant.wpp.common.targets">
        <Destination>Build\wpp</Destination>
      </BuildExtensionFiles>
      <BuildExtensionFiles Include="$(MSBuildThisFileDirectory)MSTest_V2_Common.proj">
        <Destination>Test</Destination>
      </BuildExtensionFiles>
      <BuildExtensionFiles Include="$(MSBuildThisFileDirectory)TestPlatform.props">
        <Destination>Build</Destination>
      </BuildExtensionFiles>
    </ItemGroup>

    <Copy SourceFiles="@(BuildExtensionFiles)"
          DestinationFiles="@(BuildExtensionFiles-> '$(SolutionRoot)\%(Destination)\%(Filename)%(Extension)')"
          UseHardlinksIfPossible="true"
          OverwriteReadOnlyFiles="true"
          SkipUnchangedFiles="true" />

  </Target>


  <!--
    ==========================================================================================
        Versioning
    ==========================================================================================
  -->

  <Target Name="SetBuildNumbers"
          BeforeTargets="UpdateCommonAssemblyInfoCore"
          Condition="('$(IsDesktopBuild)' != 'true' Or '$(IsCustomBuild)' == 'true')">

    <PropertyGroup>
      <VersionMajor Condition="'$(VersionMajor)' == ''">1</VersionMajor>
      <VersionMinor Condition="'$(VersionMinor)' == ''">8</VersionMinor>
      <VersionBuild Condition="'$(VersionBuild)' == ''">0</VersionBuild>
      <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    </PropertyGroup>

    <!-- %25: to escape %
         cd:  commit date
         Using git directly as LibGit2Sharp is very slow for this operation (3 seconds vs 100 ms) -->
    <Exec Command='git log -n 1 --pretty=format:%%25cd --date=iso-strict "$(SolutionRoot)"'
          ConsoleToMSBuild="true"
          StandardOutputImportance="Normal"
          WorkingDirectory="$(SolutionRoot)">
      <Output TaskParameter="ConsoleOutput" PropertyName="SolutionRootLastRevision" />
    </Exec>

    <PropertyGroup>
      <!--Horrific hack until I can figure out why Tracker.exe leaves itself attached and calls Console.WriteLine with 'Response file not found'
      2021-07-23T16:54:49+12:00Tracker.exe: Response file C:\Users\tfsbuildservice%24\AppData\Local\Temp\tmp6540759e4313488699e930b76742eb7d.rsp not found.;Tracker.exe: Response file C:\Users\tfsbuildservice%24\AppData\Local\Temp\tmp6540759e4313488699e930b76742eb7d.rsp not found.;Tracker.exe: Response file C:\Users\tfsbuildservice%24\AppData\Local\Temp\tmp6540759e4313488699e930b76742eb7d.rsp not found.;Tracker.exe: Response file C:\Users\tfsbuildservice%24\AppData\Local\Temp\tmp6540759e4313488699e930b76742eb7d.rsp not found.;Tracker.exe: Response file C:\Users\tfsbuildservice%24\AppData\Local\Temp\tmp6540759e4313488699e930b76742eb7d.rsp not found.
      -->
      <SolutionRootLastRevision>$(SolutionRootLastRevision.Substring(0, 25))</SolutionRootLastRevision>
    </PropertyGroup>

    <Version
      BuildType="Automatic"
      RevisionType="Automatic"
      Major="$(VersionMajor)"
      Minor="$(VersionMinor)"
      StartDate="$(SolutionRootLastRevision)">
      <Output TaskParameter="Major" PropertyName="Major" />
      <Output TaskParameter="Minor" PropertyName="Minor" />
      <Output TaskParameter="Build" PropertyName="Build" />
      <Output TaskParameter="Revision" PropertyName="Revision" />
    </Version>

    <PropertyGroup>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
    </PropertyGroup>

    <Message Text="FileVersion = $(FileVersion)" />
  </Target>


  <Target Name="UpdateCommonAssemblyInfoCore"
          Condition="'$(FileVersion)' != ''"
          AfterTargets="UpdateCommonAssemblyInfo">

    <PropertyGroup>
      <AssemblyInfoFile>$(ModuleBuildDirectory)CommonAssemblyInfo.cs</AssemblyInfoFile>
      <AssemblyInfoFileExists Condition="Exists('$(AssemblyInfoFile)')">true</AssemblyInfoFileExists>
    </PropertyGroup>

    <FileUpdate
      Condition="'$(AssemblyInfoFileExists)' == 'true'"
      Files="$(AssemblyInfoFile)"
      IgnoreCase="true"
      Multiline="true"
      Singleline="false"
      Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
      ReplacementText="${section1}$(FileVersion)${section2}" />

  </Target>

  <Target Name="UpdateCommonAssemblyInfo"
          DependsOnTargets="SetBuildNumbers"/>

  <Target Name="UpdateContext">
    <PropertyGroup>
      <FileVersion Condition="'$(FileVersion)' == ''">99.99.99.99</FileVersion>
    </PropertyGroup>

    <GetOrPutContextVariable
      ContextEndpoint="$(ContextEndpoint)"
      Scope="$(VariableScopeId)"
      Properties="FileVersion=$(FileVersion);ModuleName=$(ModuleName)" />

  </Target>

</Project>
