<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="Current">

  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' == ''" />

  <PropertyGroup>
    <RunTestsDependsOn>
      CollectTestAssemblies;
      SetupTestProperties;
      CollectAssemblyPlatforms;
      RunTestAssemblies;
      RemoveFiles
    </RunTestsDependsOn>
  </PropertyGroup>


  <Target Name="RunTestsCore"
          Condition="'$(RunTests)' != 'false' Or '$(_RunIntegrationTests)' != 'false'"
          DependsOnTargets="$(RunTestsDependsOn)">

  </Target>


  <Target Name="CollectTestAssemblies">

    <GetBuildOutputs>
      <Output TaskParameter="TrackedProjects" ItemName="TrackedProjects" />
      <Output TaskParameter="SolutionRoots" ItemName="SolutionRoots" />
    </GetBuildOutputs>

    <Message Text="Looking for test assemblies in these directories:" />
    <Message Text="%(TrackedProjects.OutputPath)" />
  </Target>


  <Target Name="SetupTestProperties" Outputs="$(TestPattern)">
    <!-- Collect all assemblies to use as test dependencies -->
    <ItemGroup>
      <AllStagedDlls Include="$(ArtifactStagingDirectory)**\*.dll"
                     Exclude="$(ArtifactStagingDirectory)_artifacts\**\*;
                              $(ArtifactStagingDirectory)product\**\*;
                              $(ArtifactStagingDirectory)BinFiles\**\*;" />
      <AllDirectoriesWithDlls Include="@(AllStagedDlls->'%(RootDir)%(Directory)'->Distinct())"/>
    </ItemGroup>

    <PropertyGroup>
      <AssembliesUnderTest>@(TestAssemblies->'"%(FullPath)"', ',')</AssembliesUnderTest>
      <VsTestWorkingDirectory>$(SolutionRoot)</VsTestWorkingDirectory>

      <CodeCoverage Condition="'$(CodeCoverage)' == ''">false</CodeCoverage>

      <!-- VSTest Setup -->
      <VsTestDirectory Condition="'$(VsTestDirectory)' == ''">$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <PathToTestTool>$([System.IO.Path]::GetFullPath('$(PathToTestTool)'))</PathToTestTool>

      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <RunTestsInParallel Condition="'$(TestPattern)' != '' And '$(TestPattern)' == 'IntegrationTest'">false</RunTestsInParallel>
      <RunTestsInParallel>$([MSBuild]::ValueOrDefault('$(RunTestsInParallel)', 'true'))</RunTestsInParallel>
      <ParallelSwitch Condition="'$(RunTestsInParallel)' == 'true'">/Parallel</ParallelSwitch>

      <TestAdapterSwitch Condition="'$(PSTests)' == 'true'">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools"</TestAdapterSwitch>
      <ResultsFileSwitch Condition="'$(ResultsFileSwitch)' == ''">/Logger:trx</ResultsFileSwitch>

      <TestPattern>$([MSBuild]::ValueOrDefault('$(TestPattern)', 'UnitTest'))</TestPattern>
    </PropertyGroup>

    <Message Text="TestPattern: $(TestPattern)" />
    <Message Text="RunSettingsFile: $(RunSettingsFile)" />
  </Target>


  <Target Name="CollectAssemblyPlatforms"
          Outputs="%(SolutionRoots.Identity)">

    <PropertyGroup>
      <TestRunDirectory>%(SolutionRoots.Identity)</TestRunDirectory>
    </PropertyGroup>

    <PropertyGroup>
      <_CustomRunSettingsFile>$(TestRunDirectory)$(CustomRunSettings)</_CustomRunSettingsFile>
      <RunSettingsFile>$(MSBuildThisFileDirectory)Testing\default.runsettings</RunSettingsFile>
      <RunSettingsFile Condition="'$(IsDesktopBuild)' != 'true' And '$(CustomRunSettings)' != '' And Exists('$(_CustomRunSettingsFile)')">$(_CustomRunSettingsFile)</RunSettingsFile>
    </PropertyGroup>

    <!-- Copy the run settings template file and apply and custom transforms -->
    <Copy SourceFiles="$(RunSettingsFile)"
          DestinationFiles="$([System.IO.Path]::GetTempFileName())">
      <Output TaskParameter="DestinationFiles" PropertyName="RunSettingsFile" />
    </Copy>

    <PropertyGroup>
      <RunSettingsPropFile>$(TestRunDirectory)\Build\TFSBuild.proj</RunSettingsPropFile>
    </PropertyGroup>

    <MSBuild Projects="$(MSBuildThisFileFullPath)"
             Condition="Exists('$(RunSettingsPropFile)')"
             Targets="GetCustomTestSettings"
             Properties="RunSettingsPropFile=$(RunSettingsPropFile)"
             ContinueOnError="true">
      <Output TaskParameter="TargetOutputs" ItemName="RunSettings"/>
    </MSBuild>

    <XmlPoke Condition="'@(RunSettings)' != ''"
             XmlInputPath="$(RunSettingsFile)"
             Query="%(RunSettings.Identity)"
             Value="%(RunSettings.Value)"/>

    <ItemGroup>
      <ProjectsForThisRoot Include="@(TrackedProjects->WithMetadataValue('SolutionRoot', '$(TestRunDirectory)'))" />
      <TestAssemblyDirectories Include="@(ProjectsForThisRoot->'%(OutputPath)'->Distinct())" />
    </ItemGroup>

    <ItemGroup>
      <CandidateTestAssemblies Include="%(TestAssemblyDirectories.FullPath)\**\*$(TestPattern)*.dll"
                               Exclude="%(TestAssemblyDirectories.FullPath)\**\*Helpers*.dll;
                                        %(TestAssemblyDirectories.FullPath)\**\Microsoft.*;
                                        %(TestAssemblyDirectories.FullPath)\**\System.*;" />

      <AssemblyDependencies Include="%(TestAssemblyDirectories.FullPath)\**\*.dll;
                                     %(TestAssemblyDirectories.FullPath)\**\*.exe"
                            Exclude="@(CandidateTestAssemblies)" />
    </ItemGroup>

    <ItemGroup>
      <ImpactedTestAssemblies Include="$(ImpactedTestAssemblies)" />
    </ItemGroup>

    <FindInList
      Condition="'@(ImpactedTestAssemblies->Count())' != '0'"
      MatchFileNameOnly="true"
      CaseSensitive="false"
      List="@(CandidateTestAssemblies)"
      ItemSpecToFind="%(ImpactedTestAssemblies.Identity)">
      <Output TaskParameter="ItemFound" ItemName="TestAssemblies" />
    </FindInList>

    <ItemGroup Condition="'@(ImpactedTestAssemblies->Count())' == '0' And '$(IsDesktopBuild)' == 'true'">
      <TestAssemblies Include="@(CandidateTestAssemblies)" />
    </ItemGroup>

    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(TestAssemblies)"
      AssemblyDependencies="@(AssemblyDependencies)">
      <Output ItemName="AssembliesWithTargetPlatform" TaskParameter="Assemblies" />
      <Output ItemName="AssembliesTargetingX86" TaskParameter="AssembliesTargetingX86" />
      <Output ItemName="AssembliesTargetingX64" TaskParameter="AssembliesTargetingX64" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssembliesWithTargetPlatform.FileName) -> Platform: %(AssembliesWithTargetPlatform.PEKind) (AnyCPU)" Condition="'@(AssembliesWithTargetPlatform)' != ''" />
    <Message Text="Assembly: %(AssembliesTargetingX64.FileName) -> Platform: %(AssembliesTargetingX64.PEKind) (x64)" Condition="'@(AssembliesTargetingX64)' != ''" />
    <Message Text="Assembly: %(AssembliesTargetingX86.FileName) -> Platform: %(AssembliesTargetingX86.PEKind) (x86)" Condition="'@(AssembliesTargetingX86)' != ''" />
    <Message Condition="'@(AssembliesWithTargetPlatform)' != '' And '$(TestPattern)' == 'IntegrationTest'" Text="Assembly: %(AssembliesWithTargetPlatform.FileName) -> CIEnabled: %(AssembliesWithTargetPlatform.CIEnabled)" />

    <ItemGroup>
      <_Assemblies Condition="'$(TestPattern)' == 'UnitTest'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
        <RunSettingsFile>$(RunSettingsFile)</RunSettingsFile>
      </_Assemblies>
      <_Assemblies Condition="'@(_Assemblies)' == '' And '$(DeployEnvironment)' != 'true'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
        <RunSettingsFile>$(RunSettingsFile)</RunSettingsFile>
      </_Assemblies>
      <_Assemblies Condition="'@(_Assemblies)' == '' And %(AssembliesWithTargetPlatform.CIEnabled) == 'true'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
        <RunSettingsFile>$(RunSettingsFile)</RunSettingsFile>
      </_Assemblies>
    </ItemGroup>

  </Target>


  <Target Name="RunTestAssemblies" Inputs="@(_Assemblies)" Outputs="%(_Assemblies.TestRunDirectory);%(_Assemblies.Platform)">

    <PropertyGroup>
      <PlatformSwitch>/Platform:%(_Assemblies.Platform)</PlatformSwitch>
      <TestCaseFilter Condition="'%(_Assemblies.CICategory)' != ''">/TestCaseFilter:`&quot;%(_Assemblies.CICategory)`&quot;</TestCaseFilter>
      <TestRunDirectory>%(_Assemblies.TestRunDirectory)</TestRunDirectory>
      <AssembliesUnderTest>@(_Assemblies->'"%(FullPath)"', ' ')</AssembliesUnderTest>
      <TestAdapterPath>$([System.IO.Path]::GetTempPath())$([System.DateTime]::UtcNow.ToFileTimeUtc())\</TestAdapterPath>

      <AdditionalVariables Condition="'$(TestPattern)' != '' And '$(TestPattern)' == 'IntegrationTest'">
$additionalEnvironmentVariables.Add('EXPERT_ENVIRONMENT_URL', '$(ExpertEnvironmentUrl)');
$additionalEnvironmentVariables.Add('EXPERT_SOURCE_DIRECTORY', '$(ExpertSourceDirectory)');
      </AdditionalVariables>
    </PropertyGroup>

    <ItemGroup>
      <ScriptArguments Include="_">
        <PathToTestTool>$(PathToTestTool)</PathToTestTool>
        <ToolArgs>$(ResultsFileSwitch) $(PlatformSwitch) $(TestCaseFilter) $(ParallelSwitch)</ToolArgs>
        <WorkingDirectory>$(SolutionRoot)</WorkingDirectory>
        <SolutionRoot>$(TestRunDirectory)</SolutionRoot>
        <TestAdapterPath>$(TestAdapterPath)</TestAdapterPath>
        <IsDesktopBuild>$$(IsDesktopBuild)</IsDesktopBuild>
        <ReferencePaths>@(AllDirectoriesWithDlls)</ReferencePaths>
        <TestAssemblies>$(AssembliesUnderTest)</TestAssemblies>
        <RunInParallel>$$(RunTestsInParallel)</RunInParallel>
        <RunSettingsFile>%(_Assemblies.RunSettingsFile)</RunSettingsFile>
      </ScriptArguments>
    </ItemGroup>

    <PowerShellScript
      Condition="'$(AssembliesUnderTest)' != ''"
      ScriptArguments="@(ScriptArguments)"
      ScriptBlock="
$ErrorActionPreference = 'Stop'
$InformationPreference = 'Continue'
New-Item -ItemType Directory -Path '$(TestAdapterPath)' -Force
$additionalEnvironmentVariables = @{}
$(AdditionalVariables)
. '$(MSBuildThisFileDirectory)Testing\RunTests.ps1' @args -AdditionalEnvironmentVariables $additionalEnvironmentVariables"
      OnErrorReason="Test failure" />

    <ItemGroup>
      <FileWrites Include="%(_Assemblies.RunSettingsFile)" />
    </ItemGroup>

    <OnError ExecuteTargets="RemoveFiles;ShowTestFailureHelp" />

  </Target>

  <Target Name="RemoveFiles">
    <Delete Files="@(FileWrites)" TreatErrorsAsWarnings="true"/>
  </Target>


  <Target Name="ShowTestFailureHelp" Condition="'$(IsDesktopBuild)' == 'true'">
    <Message Text="!!!" Importance="High" />
    <Message Text="Run 'bm -Target RunTests' to issue another test run" Importance="High" />
    <Message Text="!!!" Importance="High" />
  </Target>


  <!-- Imports the props file when GetCustomTestSettings is invoked -->
  <Import Project="$(RunSettingsPropFile)" Condition="Exists('$(RunSettingsPropFile)')" />

  <Target Name="GetCustomTestSettings" Returns="@(RunSettings)">
    <!-- Target that returns any custom run settings from a downstream project -->
  </Target>

</Project>