<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">

  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' == ''" />

  <PropertyGroup>
    <RunTestsDependsOn>
      CollectTestAssemblies;
      SetupTestProperties;
      CollectAssemblyPlatforms;
      RunTestAssemblies;
    </RunTestsDependsOn>
  </PropertyGroup>


  <Target Name="RunTests"
          Condition="'$(RunTests)' != 'false' Or '$(_RunIntegrationTests)' != 'false'"
          DependsOnTargets="$(RunTestsDependsOn)">

  </Target>


  <Target Name="CollectTestAssemblies">

    <GetBuildOutputs>
      <Output TaskParameter="TrackedProjects" ItemName="TrackedProjects" />
      <Output TaskParameter="SolutionRoots" ItemName="SolutionRoots" />
    </GetBuildOutputs>

    <Message Text="Looking for test assemblies in these directories:" />
    <Message Text="%(TrackedProjects.OutputPath)" />
  </Target>


  <Target Name="SetupTestProperties" Outputs="$(TestPattern)">
    <!-- Collect all assemblies to use as test dependencies -->
    <ItemGroup>
      <AllStagedDlls Include="$(ArtifactStagingDirectory)**\*.dll"
                     Exclude="$(ArtifactStagingDirectory)_artifacts\**" />
      <AllDirectoriesWithDlls Include="@(AllStagedDlls->'%(RootDir)%(Directory)'->Distinct())"/>
    </ItemGroup>

    <PropertyGroup>
      <AssembliesUnderTest>@(TestAssemblies->'"%(FullPath)"', ',')</AssembliesUnderTest>
      <VsTestWorkingDirectory>$(SolutionRoot)</VsTestWorkingDirectory>

      <CodeCoverage Condition="'$(CodeCoverage)' == ''">false</CodeCoverage>

      <!-- VSTest Setup -->
      <VsTestDirectory Condition="'$(VsTestDirectory)' == ''">$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <PathToTestTool>$([System.IO.Path]::GetFullPath('$(PathToTestTool)'))</PathToTestTool>

      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <RunTestsInParallel Condition="'$(TestPattern)' != '' And $(TestPattern.Equals('IntegrationTest', StringComparison.OrdinalIgnoreCase))">false</RunTestsInParallel>
      <RunTestsInParallel>$([MSBuild]::ValueOrDefault('$(RunTestsInParallel)', 'true'))</RunTestsInParallel>
      <ParallelSwitch Condition="'$(RunTestsInParallel)' == 'true'">/Parallel</ParallelSwitch>

      <TestAdapterSwitch Condition="'$(PSTests)' == 'true'">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools"</TestAdapterSwitch>
      <ResultsFileSwitch Condition="'$(ResultsFileSwitch)' == ''">/Logger:trx</ResultsFileSwitch>
      <RunSettingsSwitch>/Settings:$(TestWorkingDirectory)default.runsettings</RunSettingsSwitch>

      <TestPattern>$([MSBuild]::ValueOrDefault('$(TestPattern)', 'UnitTest'))</TestPattern>

      <AllDirectoriesWithDlls>@(AllDirectoriesWithDlls->'"%(FullPath)"', ',')</AllDirectoriesWithDlls>
    </PropertyGroup>

    <Message Text="TestPattern: $(TestPattern)" />
  </Target>


  <Target Name="CollectAssemblyPlatforms"
          Outputs="%(SolutionRoots.Identity)">

    <PropertyGroup>
      <TestRunDirectory>%(SolutionRoots.Identity)</TestRunDirectory>
    </PropertyGroup>

    <ItemGroup>
      <ProjectsForThisRoot Include="@(TrackedProjects->WithMetadataValue('SolutionRoot', '$(TestRunDirectory)'))" />
      <TestAssemblyDirectories Include="@(ProjectsForThisRoot->'%(OutputPath)'->Distinct())" />
    </ItemGroup>

    <ItemGroup>
      <CandidateTestAssemblies Include="%(TestAssemblyDirectories.FullPath)\**\*$(TestPattern)*.dll"
                               Exclude="%(TestAssemblyDirectories.FullPath)\**\*Helpers*.dll;
                                        %(TestAssemblyDirectories.FullPath)\**\Microsoft.*;
                                        %(TestAssemblyDirectories.FullPath)\**\System.*;" />

      <AssemblyDependencies Include="%(TestAssemblyDirectories.FullPath)\**\*.dll;
                                     %(TestAssemblyDirectories.FullPath)\**\*.exe"
                            Exclude="@(CandidateTestAssemblies)" />
    </ItemGroup>

    <ItemGroup>
      <ImpactedTestAssemblies Include="$(ImpactedTestAssemblies)"></ImpactedTestAssemblies>
    </ItemGroup>

    <FindInList
      Condition="'@(ImpactedTestAssemblies->Count())' != '0'"
      MatchFileNameOnly="true"
      CaseSensitive="false"
      List="@(CandidateTestAssemblies)"
      ItemSpecToFind="%(ImpactedTestAssemblies.Identity)">
      <Output TaskParameter="ItemFound" ItemName="TestAssemblies" />
    </FindInList>

    <ItemGroup Condition="'@(ImpactedTestAssemblies->Count())' == '0' And '$(IsDesktopBuild)' == 'true'">
      <TestAssemblies Include="@(CandidateTestAssemblies)" />
    </ItemGroup>

    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(TestAssemblies)"
      AssemblyDependencies="@(AssemblyDependencies)">
      <Output ItemName="AssembliesWithTargetPlatform" TaskParameter="Assemblies" />
      <Output ItemName="AssembliesTargetingX86" TaskParameter="AssembliesTargetingX86" />
      <Output ItemName="AssembliesTargetingX64" TaskParameter="AssembliesTargetingX64" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
      <Output PropertyName="AssemblyPlatformDataKey" TaskParameter="AssemblyPlatformDataKey" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssembliesWithTargetPlatform.FileName) -> Platform: %(AssembliesWithTargetPlatform.PEKind) (AnyCPU)" Condition="'@(AssembliesWithTargetPlatform)' != ''" />
    <Message Text="Assembly: %(AssembliesTargetingX64.FileName) -> Platform: %(AssembliesTargetingX64.PEKind) (x64)" Condition="'@(AssembliesTargetingX64)' != ''" />
    <Message Text="Assembly: %(AssembliesTargetingX86.FileName) -> Platform: %(AssembliesTargetingX86.PEKind) (x86)" Condition="'@(AssembliesTargetingX86)' != ''" />
    <Message Condition="'@(AssembliesWithTargetPlatform)' != '' And $(TestPattern.Equals('IntegrationTest', StringComparison.OrdinalIgnoreCase))" Text="Assembly: %(AssembliesWithTargetPlatform.FileName) -> CIEnabled: %(AssembliesWithTargetPlatform.CIEnabled)" />

    <ItemGroup>
      <_Assemblies Condition="$(TestPattern.Equals('UnitTest', StringComparison.OrdinalIgnoreCase)) == 'true'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
      </_Assemblies>
      <_Assemblies Condition="'@(_Assemblies)' == '' And '$(DeployEnvironment)' != 'true'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
      </_Assemblies>
      <_Assemblies Condition="'@(_Assemblies)' == '' And %(AssembliesWithTargetPlatform.CIEnabled) == 'true'" Include="@(AssembliesWithTargetPlatform)">
        <SolutionRoot>$(SolutionRoot)</SolutionRoot>
        <TestRunDirectory>$(TestRunDirectory)</TestRunDirectory>
      </_Assemblies>
    </ItemGroup>

  </Target>


  <Target Name="RunTestAssemblies" Inputs="@(_Assemblies)" Outputs="%(_Assemblies.TestRunDirectory);%(_Assemblies.Platform)">

    <PropertyGroup>
      <PlatformSwitch>/Platform:%(_Assemblies.Platform)</PlatformSwitch>
      <TestCaseFilter Condition="'%(_Assemblies.CICategory)' != ''">/TestCaseFilter:`&quot;%(_Assemblies.CICategory)`&quot;</TestCaseFilter>
      <TestRunDirectory>%(_Assemblies.TestRunDirectory)</TestRunDirectory>
      <AssembliesUnderTest>@(_Assemblies->'"%(FullPath)"', ',')</AssembliesUnderTest>
      <AdditionalVariables Condition="'$(TestPattern)' != '' And $(TestPattern.Equals('IntegrationTest', StringComparison.OrdinalIgnoreCase))">
$additionalEnvironmentVariables.Add('EXPERT_ENVIRONMENT_URL', '$(ExpertEnvironmentUrl)');
$additionalEnvironmentVariables.Add('EXPERT_SOURCE_DIRECTORY', '$(ExpertSourceDirectory)');
      </AdditionalVariables>
    </PropertyGroup>

    <!-- TaskObjectKey will be the task object from GetAssemblyPlatform -->
    <PowerShellScript
      Condition="'$(AssembliesUnderTest)' != ''"
      ScriptBlock='
$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$testTool = "$(PathToTestTool)"
$testToolArgs = "$(ResultsFileSwitch) $(PlatformSwitch) $(TestCaseFilter) $(ParallelSwitch)"
$testRunDirectory = "$(TestRunDirectory)"
$workingDirectory = "$(SolutionRoot)"
$isDesktopBuild = $$(IsDesktopBuild)
$referencePaths = $(AllDirectoriesWithDlls)
$testFiles = $(AssembliesUnderTest)
$RunInParallel = $$(RunTestsInParallel)
$additionalEnvironmentVariables = @{}
$(AdditionalVariables)

. Testing\RunTests.ps1 -PathToTestTool $testTool -ToolArgs $testToolArgs -WorkingDirectory $workingDirectory -SolutionRoot $testRunDirectory -IsDesktopBuild:$isDesktopBuild -ReferencePaths $referencePaths -TestAssemblies $testFiles -AdditionalEnvironmentVariables $additionalEnvironmentVariables -RunInParallel $RunInParallel'
      OnErrorReason="Test failure"
      TaskObjects="$(AssemblyPlatformDataKey)" />

    <OnError ExecuteTargets="ShowTestFailureHelp" />

  </Target>


  <Target Name="ShowTestFailureHelp">
    <Message Text="!!!" Importance="High" />
    <Message Text="Run 'bm -Target RunTests' to issue another test run" Importance="High" />
    <Message Text="!!!" Importance="High" />
  </Target>

</Project>