<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">

  <PropertyGroup>
    <RunTestsDependsOn>
      CollectTestAssemblies
    </RunTestsDependsOn>
  </PropertyGroup>

  <Target Name="CollectTestAssemblies">

    <GetBuildOutputs>
      <Output TaskParameter="TestAssemblyDirectories" ItemName="TestAssemblyDirectories" />
    </GetBuildOutputs>

    <CreateItem Include="@(TestAssemblyDirectories->'%(FullPath)UnitTest*.dll')" PreserveExistingMetadata="true">
      <Output ItemName="TestAssemblies" TaskParameter="Include" />
    </CreateItem>

    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(TestAssemblies)">
      <Output ItemName="AssemblyList" TaskParameter="Assemblies" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssemblyList.FileName) [Platform: %(AssemblyList.Platform)]" Condition="'@(AssemblyList)' != ''" />

    <!-- 
      This section creates a .dll.config for each unit test assembly. The dll.config contains a probing path override 
      which includes two additional folders "ModuleBin" and "Dependencies". This is so unit tests can find dependencies
      without relying on copy local having deployed assemblies to the test directory.
    -->
    <PropertyGroup>
      <UnitTestAppConfigText>$([System.IO.File]::ReadAllText('$(BuildScriptsDirectory)UnitTestAppConfig.txt'))</UnitTestAppConfigText>
    </PropertyGroup>

    <ItemGroup>
      <TestAssemblyConfigFiles Include="@(TestAssemblies->'$(BinTestDirectory)%(RecursiveDir)%(Filename)%(Extension).config')" />
    </ItemGroup>

    <Touch Condition="!Exists(%(TestAssemblyConfigFiles.FullPath))"
      Files="%(TestAssemblyConfigFiles.FullPath)"
      AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="TouchedFiles" />
    </Touch>

    <ItemGroup>
      <XmlLinesToWrite Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
      <XmlLinesToWrite Include="&lt;configuration /&gt;" />
    </ItemGroup>

    <WriteLinesToFile Condition="'@(TouchedFiles)' != ''"
      File="%(TouchedFiles.FullPath)"
      Lines="@(XmlLinesToWrite)"
      Encoding="UTF-8" />

    <Error Condition="'$(UnitTestAppConfigText)' == ''" Text="No unit test app.config text defined!" />

    <XDocumentPoke Condition="Exists(%(TestAssemblyConfigFiles.FullPath))"
      File="%(TestAssemblyConfigFiles.FullPath)"
      Query="configuration/runtime"
      Value="$(UnitTestAppConfigText)" />

    <MakeSymlink Condition="'@(TestAssemblies)' != ''"
      Link="%(RootDir)%(Directory)Dependencies"
      Target="$(ArtifactStagingDirectory)out" />
  </Target>


  <Target Name="OnTestFailure">
    <PropertyGroup>
      <TestOutcome>Failed</TestOutcome>
    </PropertyGroup>
  </Target>


  <Target Name="AfterRunTests"
    AfterTargets="RunTests">

    <RemoveDir Directories="$(BinTestDirectory)Dependencies"
      ContinueOnError="true"  />
    <RemoveDir Directories="$(BinTestDirectory)ModuleBin"
      ContinueOnError="true" />
    <RemoveDir Directories="$(BinTestDirectory)TestResults\packages"
      ContinueOnError="true" />

    <Delete Condition="'@(TestAssemblyConfigFiles)' != ''"
      Files="@(TestAssemblyConfigFiles)"
      TreatErrorsAsWarnings="true" />
  </Target>


  <Target Name="CopyTrxFile" AfterTargets="RunTests">
    <!--<ItemGroup>
      <TestResults Include="$(SolutionDirectoryPath)**\*.trx" />
    </ItemGroup>

    <Copy Condition="@(TestResults) != ''"
          SourceFiles="@(TestResults)"
          DestinationFiles="$(BinTestDirectory)TestResults.trx" />-->
  </Target>


  <Target Name="RunTests"
          DependsOnTargets="$(RunTestsDependsOn)"
          Condition="('$(RunTest)' != 'false') And ('$(IsCustomBuild)' != 'true')">

    <PropertyGroup>
      <UnitTestAssemblies>@(TestAssemblies->'%(FullPath)', ' ')</UnitTestAssemblies>
      <VsTestWorkingDirectory>$(SolutionRoot)</VsTestWorkingDirectory>

      <CodeCoverage Condition="'$(CodeCoverage)' == ''">false</CodeCoverage>

      <!-- VSTest Setup -->
      <VsTestDirectory Condition="'$(VsTestDirectory)' == ''">$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <PathToTestTool>$([System.IO.Path]::GetFullPath('$(PathToTestTool)'))</PathToTestTool>

      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <RunUnitTestsInParallel>$([MSBuild]::ValueOrDefault('$(RunUnitTestsInParallel)', 'true'))</RunUnitTestsInParallel> 
      <ParallelSwitch Condition="'$(RunUnitTestsInParallel)' == 'true'">/Parallel</ParallelSwitch>
      
      <PlatformSwitch Condition="'$(Use32BitTestRunner)' != 'true'">/Platform:x64</PlatformSwitch>
      <TestAdapterSwitch Condition="'$(PSTests)' == 'true'">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools"</TestAdapterSwitch>
      <ResultsFileSwitch Condition="'$(ResultsFileSwitch)' == ''">/Logger:trx</ResultsFileSwitch>
    </PropertyGroup>

    <!-- dotCover Setup -->
    <ItemGroup Condition="('$(CodeCoverage)' == 'true') And '@(CodeCoverageFilterList)' != ''">      
      <CodeCoverageFilters Include="+:%(CodeCoverageFilterList.FileName)"></CodeCoverageFilters>
    </ItemGroup>

    <PropertyGroup Condition="('$(CodeCoverage)' == 'true') And '$(UnitTestAssemblies)' != ''">
      <DotCoverExecutablePath>$(BuildToolsDirectory)dotCover\bin\dotCover.exe</DotCoverExecutablePath>
      <DotCoverReportType Condition="'$(IsDesktopBuild)' == 'true'">HTML</DotCoverReportType>
      <DotCoverReportType Condition="'$(IsDesktopBuild)' != 'true'">XML</DotCoverReportType>
      <DotCoverReportFile>$(BinTestDirectory)CodeCoverage\dotCoverReport.$(DotCoverReportType)</DotCoverReportFile>
      <CoberturaReportTarget>$(BinTestDirectory)CodeCoverage\CoberturaReport.xml</CoberturaReportTarget>
    </PropertyGroup>
    
    <Message Condition="'$(Use32BitTestRunner)' == 'true'" Text="Must run tests in 32-bit mode as at least one build output assembly has a platform of x86." />

    <PropertyGroup>
      <TestTimeoutMilliseconds>-1</TestTimeoutMilliseconds>
      <TestTimeoutMilliseconds Condition="'$(IsDesktopBuild)' == 'false'">900000</TestTimeoutMilliseconds>
    </PropertyGroup>
    
    <!-- Chutzpah - JavaScript UnitTest related -->
    <ItemGroup>
      <JavascriptTests Include="$(VsTestWorkingDirectory)Src\**\chutzpah.json" Exclude="$(VsTestWorkingDirectory)Src\**\obj\**" />
    </ItemGroup>

    <PropertyGroup>
      <ChutzpahTestAdapterPath Condition="'@(JavascriptTests)' != ''">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools\Chutzpah\bin"</ChutzpahTestAdapterPath>
    </PropertyGroup>
    <Message Condition="'@(JavascriptTests)' != ''" Text="Chutzpah.json found. JavaScript tests will be included" />

    <!-- Run With VSTest -->
    <Exec Condition="('$(CodeCoverage)' != 'true') And '$(UnitTestAssemblies)' != ''"
          ContinueOnError="false"
          IgnoreExitCode="false"
          WorkingDirectory="$(VsTestWorkingDirectory)"
          Timeout="$(TestTimeoutMilliseconds)"
          Command='SET EXPERT_MODULE_DIRECTORY=$(VsTestWorkingDirectory) &amp; "$(PathToTestTool)" $(UnitTestAssemblies) @(JavascriptTests, &#39; &#39;) "$(ResultsFileSwitch)" $(PlatformSwitch) $(IsolationSwitch) $(ParallelSwitch) $(ChutzpahTestAdapterPath)' />

    <!-- Run VSTest using dotCover -->
    <Exec Condition="('$(CodeCoverage)' == 'true') And '$(UnitTestAssemblies)' != ''"
          ContinueOnError="false"
          IgnoreExitCode="false"
          WorkingDirectory="$(VsTestWorkingDirectory)"
          Timeout="$(TestTimeoutMilliseconds)"
          Command='SET EXPERT_MODULE_DIRECTORY=$(VsTestWorkingDirectory) &amp; "$(DotCoverExecutablePath)" analyse /TargetExecutable="$(PathToTestTool)" /TargetArguments="$(UnitTestAssemblies) @(JavascriptTests, &#39; &#39;) \&#34;$(ResultsFileSwitch)\&#34; $(PlatformSwitch) $(IsolationSwitch) $(ParallelSwitch) $(ChutzpahTestAdapterPath)" /TargetWorkingDir=$(VsTestWorkingDirectory) /Output="$(DotCoverReportFile)" /ReportType="$(DotCoverReportType)" /Filters="@(CodeCoverageFilters)" /AttributeFilters="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute;System.Runtime.CompilerServices.CompilerGeneratedAttribute;System.CodeDom.Compiler.GeneratedCodeAttribute"' />

    <ReadLinesFromFile Condition="('$(IsDesktopBuild)' == 'true' And '$(CodeCoverage)' == 'true') And '$(UnitTestAssemblies)' != ''" File="$(DotCoverReportFile)">
      <Output TaskParameter="Lines" PropertyName="DotCoverResult" />
    </ReadLinesFromFile>

    <PropertyGroup Condition="'$(IsDesktopBuild)' == 'true' And '$(CodeCoverage)' == 'true' And '$(UnitTestAssemblies)' != ''">
      <CodeCoverageValue>$([System.Text.RegularExpressions.Regex]::Match($(DotCoverResult), '(?&lt;="Total",)(.*?)(?=[,])'))</CodeCoverageValue>
      <CodeCoverageValue Condition="'$(CodeCoverageValue)' == ''">0</CodeCoverageValue>
    </PropertyGroup>

    <Message Condition="'$(IsDesktopBuild)' == 'true' And '$(CodeCoverage)' == 'true' And '$(UnitTestAssemblies)' != ''" Text="

=============================
Code coverage percentage: $(CodeCoverageValue)
=============================

" Importance="high" />
    
    <Message Condition="'$(IsDesktopBuild)' == 'true' And '$(CodeCoverage)' == 'true' And '$(UnitTestAssemblies)' != '' And '$(CodeCoverageValue)' &lt; '30'" Text="
Code coverage is less than 30%! The hounds have been released.

░░░░░░░░░░░█████████████
░░░░░░░░░███░███░░░░░░██
███░░░░░██░░░░██░██████████
████████░░░░░░████░░░░░░░██
████░░░░░░░░░░██░░██████████
████░░░░░░░░░░░███░░░░░░░░░██
████░░░░░░░░░░░██░░██████████
████░░░░░░░░░░░░████░░░░░░░░█
████░░░░░░░░░░░░░███░░████░░█
█████████░░░░░░░░░░████░░░░░█
███░░░░░██░░░░░░░░░░░░░█████
░░░░░░░░░███░░░░░░░██████
░░░░░░░░░░░██░░░░░░██
░░░░░░░░░░░░███░░░░░██
░░░░░░░░░░░░░░██░░░░██
░░░░░░░░░░░░░░░███░░░██
░░░░░░░░░░░░░░░░░██░░░█
░░░░░░░░░░░░░░░░░░█░░░█
░░░░░░░░░░░░░░░░░░██░██
░░░░░░░░░░░░░░░░░░░███
" />

    <!-- Run Cobertura Report Converter -->
    <CoberturaReportConverter Condition="'$(IsDesktopBuild)' != 'true' And '$(CodeCoverage)' == 'true' And '$(UnitTestAssemblies)' != ''"
      ImportPath="$(DotCoverReportFile)"
      TargetPath="$(CoberturaReportTarget)">
    </CoberturaReportConverter>

    <Message Condition="'$(IsDesktopBuild)' != 'true' And '$(CodeCoverage)' == 'true' And '$(UnitTestAssemblies)' != ''" Text="##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=$(CoberturaReportTarget);]"></Message>

    <PropertyGroup>
      <TestOutcome>Succeeded</TestOutcome>
    </PropertyGroup>

    <OnError ExecuteTargets="OnTestFailure" />
  </Target>


</Project>