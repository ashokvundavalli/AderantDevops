<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">

  <PropertyGroup>
    <RunTestsDependsOn>
      CreatePlan;
      CollectTestAssemblies;
      SetupTestProperties;
    </RunTestsDependsOn>
  </PropertyGroup>

  <Target Name="CollectTestAssemblies">

    <GetBuildOutputs>
      <Output TaskParameter="TrackedProjects" ItemName="TrackedProjects" />
      <Output TaskParameter="SolutionRoots" ItemName="SolutionRoots" />
    </GetBuildOutputs>

    <Message Text="Looking for test assemblies in these directories:" />
    <Message Text="%(TrackedProjects.OutputPath)" />
  </Target>


  <Target Name="SetupTestProperties">
    <PropertyGroup>
      <UnitTestAssemblies>@(TestAssemblies->'"%(FullPath)"', ',')</UnitTestAssemblies>
      <VsTestWorkingDirectory>$(SolutionRoot)</VsTestWorkingDirectory>

      <CodeCoverage Condition="'$(CodeCoverage)' == ''">false</CodeCoverage>

      <!-- VSTest Setup -->
      <VsTestDirectory Condition="'$(VsTestDirectory)' == ''">$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <PathToTestTool>$([System.IO.Path]::GetFullPath('$(PathToTestTool)'))</PathToTestTool>

      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <RunUnitTestsInParallel>$([MSBuild]::ValueOrDefault('$(RunUnitTestsInParallel)', 'true'))</RunUnitTestsInParallel>
      <ParallelSwitch Condition="'$(RunUnitTestsInParallel)' == 'true'">/Parallel</ParallelSwitch>

      <TestAdapterSwitch Condition="'$(PSTests)' == 'true'">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools"</TestAdapterSwitch>
      <ResultsFileSwitch Condition="'$(ResultsFileSwitch)' == ''">/Logger:trx</ResultsFileSwitch>
      <RunSettingsSwitch>/Settings:$(TestWorkingDirectory)default.runsettings</RunSettingsSwitch>
    </PropertyGroup>
  </Target>


  <Target Name="RunTests"
          Outputs="%(SolutionRoots.Identity)"
          Condition="'$(RunTests)' != 'false' And '@(ImpactedTestAssemblies)' != ''"
          DependsOnTargets="$(RunTestsDependsOn)">

    <PropertyGroup>
      <TestRunDirectory>%(SolutionRoots.Identity)</TestRunDirectory>
    </PropertyGroup>

    <ItemGroup>
      <ProjectsForThisRoot Include="@(TrackedProjects->WithMetadataValue('SolutionRoot', '$(TestRunDirectory)'))" />
      <TestAssemblyDirectories Include="@(ProjectsForThisRoot->'%(OutputPath)'->Distinct())" />
    </ItemGroup>

    <ItemGroup>
      <CandidateTestAssemblies Include="%(TestAssemblyDirectories.FullPath)**\*UnitTest*.dll"
                               Exclude="%(TestAssemblyDirectories.FullPath)**\*Helpers*.dll;
                                        %(TestAssemblyDirectories.FullPath)**\Microsoft.*;
                                        %(TestAssemblyDirectories.FullPath)**\System.*;" />

      <AssemblyDependencies Include="%(TestAssemblyDirectories.FullPath)**\*.dll;
                                     %(TestAssemblyDirectories.FullPath)**\*.exe"
                            Exclude="@(CandidateTestAssemblies)" />
    </ItemGroup>


    <FindInList
      MatchFileNameOnly="true"
      CaseSensitive="false"
      List="@(CandidateTestAssemblies)"
      ItemSpecToFind="%(ImpactedTestAssemblies.Identity)">
      <Output TaskParameter="ItemFound" ItemName="TestAssemblies" />
    </FindInList>



    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(TestAssemblies)"
      AssemblyDependencies="@(AssemblyDependencies)">
      <Output ItemName="AssemblyList" TaskParameter="Assemblies" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
      <Output PropertyName="AssemblyPlatformDataKey" TaskParameter="AssemblyPlatformDataKey" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssemblyList.FileName) -> Platform: %(AssemblyList.Platform)" Condition="'@(AssemblyList)' != ''" />

    <PropertyGroup>
      <PlatformSwitch>/Platform:x86</PlatformSwitch>
      <PlatformSwitch Condition="'$(Use32BitTestRunner)' != 'true'">/Platform:x64</PlatformSwitch>

      <UnitTestAssemblies>@(TestAssemblies->'"%(FullPath)"', ',')</UnitTestAssemblies>
    </PropertyGroup>

    <!-- TaskObjectKey will be the task object from GetAssemblyPlatform -->
    <PowerShellScript
      Condition="'@(TestAssemblies)' != ''"
      ScriptBlock='
$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$testTool = "$(PathToTestTool)"
$testToolArgs = "$(ResultsFileSwitch) $(PlatformSwitch) $(ParallelSwitch)"
$testRunDirectory = "$(TestRunDirectory)"
$workingDirectory = "$(SolutionRoot)"
$isDesktopBuild = $$(IsDesktopBuild)
$referencePaths = "$(ArtifactStagingDirectory)"
$testFiles = $(UnitTestAssemblies)
$referencesToFind = $$(AssemblyPlatformDataKey).ReferencesToFind

Write-Output $referencesToFind

. Testing\RunTests.ps1 -PathToTestTool $testTool -ToolArgs $testToolArgs -WorkingDirectory $workingDirectory -SolutionRoot $testRunDirectory -IsDesktopBuild:$isDesktopBuild -ReferencePaths $referencePaths -TestAssemblies $testFiles -ReferencesToFind $referencesToFind'
    OnErrorReason="Test failure"
    TaskObjects="$(AssemblyPlatformDataKey)" />

      <OnError ExecuteTargets="ShowTestFailureHelp" />

  </Target>


  <Target Name="ShowTestFailureHelp">
    <Message Text="!!!" Importance="High" />
    <Message Text="Run 'bm -Target RunTests' to issue another test run" Importance="High" />
    <Message Text="!!!" Importance="High" />
  </Target>

</Project>