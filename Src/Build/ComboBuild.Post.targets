<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="EndToEnd">

  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' != 'true'" />
  <Import Project="Aderant.Build.Publish.targets" />
  <Import Project="Aderant.CodeSigning.targets" />
  <Import Project="Mobile.targets" />

  <PropertyGroup>
    <RunTestsDependsOn>
      $(RunTestsDependsOn);
      CollectTestAssemblies;
    </RunTestsDependsOn>

    <EndToEndDependsOn>
      ValidateRequiredProperties;
      RefreshVersionVariables;
      PostBuild;
      RunBuildExtensions;
      SignInstallers;
      CopyRelatedFiles;
      PackageArtifactsCore;
      PaketPack;
    </EndToEndDependsOn>

    <PackageArtifactsDependsOn>
      $(PackageArtifactsDependsOn);
      CreateDefaultArtifacts;
      CreateWebArtifacts;
      CreateApiArtifacts;
      PackageArtifacts;
    </PackageArtifactsDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <SignApplications Condition="'$(SignApplications)' == ''">true</SignApplications>
  </PropertyGroup>

  <ItemGroup>
    <InvokePaket Include="$(SolutionRoot)\*paket.template" />
  </ItemGroup>

  <!--Stub-->
  <Target Name="PackageArtifacts" />


  <Target Name="RefreshVersionVariables">

    <ItemGroup>
      <_Variables Include="ModuleName" />
    </ItemGroup>

    <GetOrPutContextVariable
      Scope="$(VariableScopeId)"
      ContextEndpoint="$(ContextEndpoint)"
      VariableName="%(_Variables.Identity)">
      <Output TaskParameter="Value" PropertyName="%(_Variables.Identity)" />
    </GetOrPutContextVariable>

  </Target>


  <Target Name="CreateDefaultArtifacts">

    <ItemGroup>

      <_PackageArtifact Include="$(BinTestDirectory)\**\*;">
        <ArtifactId>$(ModuleName).default.tests</ArtifactId>
        <Generated>true</Generated>
        <ArtifactType>Prebuilt</ArtifactType>
      </_PackageArtifact>

      <_PackageArtifact Include="$(BinModuleDirectory)\**\*;">
        <ArtifactId>$(ModuleName).default</ArtifactId>
        <Generated>true</Generated>
        <ArtifactType>Prebuilt</ArtifactType>
      </_PackageArtifact>

    </ItemGroup>

  </Target>


  <Target Name="CreateWebArtifacts">

    <ItemGroup>

      <_PackageArtifact Include="$(SolutionRoot)\Src\Web*\bin\*Web*.dll;" Exclude="$(SolutionRoot)\Src\Web*\bin\Web.SMB.dll;">
        <ArtifactId>$(ModuleName).default.web</ArtifactId>
        <Generated>true</Generated>
        <ArtifactType>Prebuilt</ArtifactType>
        <IsTestPackage>true</IsTestPackage>
      </_PackageArtifact>

    </ItemGroup>

  </Target>


  <Target Name="CreateApiArtifacts">

    <ItemGroup>

      <_PackageArtifact Include="$(SolutionRoot)\Src\*Api\bin\*Api.dll;">
        <ArtifactId>$(ModuleName).default.api</ArtifactId>
        <Generated>true</Generated>
        <ArtifactType>Prebuilt</ArtifactType>
        <IsTestPackage>true</IsTestPackage>
      </_PackageArtifact>

    </ItemGroup>

  </Target>


  <Target Name="CopyRelatedFiles">

    <CopyRelatedFiles
      SourceLocation ="$(BinModuleDirectory)"
      Destination="$(UpdateStagingDirectory)BinFiles" />

  </Target>


  <Target Name="PackageArtifactsCore" Condition="'$(ArtifactStagingDirectory)' != ''" DependsOnTargets="$(PackageArtifactsDependsOn)">

    <CreateArtifacts
      ContextEndpoint="$(ContextEndpoint)"
      SolutionRoot="$(SolutionRoot)"
      RelativeFrom="$(BinModuleDirectory);$(BinTestDirectory)"
      ArtifactDefinitions="@(PackageArtifact);@(_PackageArtifact)" />

  </Target>

  <!-- Stub for customizers to override -->
  <Target Name="PostBuild" />


  <Target Name="EndToEnd" DependsOnTargets="$(EndToEndDependsOn)">
  </Target>


  <Target Name="ValidateRequiredProperties">
    <Error Condition="'$(SolutionDirectoryPath)' == ''" Text="Fatal error. SolutionDirectoryPath is undefined in element $(ProjectInstanceId)" />
  </Target>


  <!-- TODO: Legacy extension name... replace this -->
  <Target Name="OnAfterBuild" />
  <Target Name="PostBuild" />

  <Target Name="RunBuildExtensions">
    <Message Text="Executing custom targets: $(RunUserTargets)" />
    <CallTarget Targets="PostBuild;OnAfterBuild" />
  </Target>



  <!-- This target is looks for any paket template files.
       If found will cause RunPaketPack to be invoked which looks for any props files that
       define the NuGet package version to use.
       If a props file is found it calls the BuildExtensions target which then has access to all
       three pieces of data
          - Template Files
          - Package Version
          - The SolutionRoot
   -->
  <Target Name="PaketPack" Condition="'$(BUILD_REASON)' != 'PullRequest'">

    <PropertyGroup>
      <PaketLockFile>$(SolutionRoot)\paket.lock</PaketLockFile>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(PaketLockFile)"
      Lines=""
      Overwrite="false"
      Condition="!Exists('$(PaketLockFile)')"/>

    <ItemGroup>
      <TemplateFiles Include="$(SolutionRoot)\*.paket.template" />
    </ItemGroup>
  </Target>


  <Target Name="RunPaketPack" Condition="'@(TemplateFiles->Count())' != '0'"
          AfterTargets="PaketPack">

    <PropertyGroup>
      <TemplateFilesAsScalarPropertyList>@(TemplateFiles)</TemplateFilesAsScalarPropertyList>
      <ExtensibilityFile>$(SolutionRoot)\dir.props</ExtensibilityFile>
    </PropertyGroup>

    <!-- The system allows for recursive extensibility but the current NuGet packaging
         does not follow this rule. Here we look for a top level extensibility file and use that -->
    <MSBuild Condition="Exists('$(ExtensibilityFile)')"
             Projects="$(MSBuildThisFileDirectory)Aderant.BuildExtensions.targets"
             Targets="PaketPack"
             Properties="SolutionRoot=$(SolutionRoot);ExtensibilityFile=$(ExtensibilityFile)"
             UnloadProjectsOnCompletion="true"
             ContinueOnError="true">
      <Output TaskParameter="TargetOutputs" PropertyName="PackageVersion" />
    </MSBuild>

    <Exec
      Command="$(BuildToolsDirectory)paket.exe pack $(ArtifactStagingDirectory)packages --template %(TemplateFiles.FullPath) --version $(PackageVersion) --verbose"
      YieldDuringToolExecution="true"
      WorkingDirectory="$(SolutionRoot)" />

  </Target>


  <!-- Pull the entry targets into our context. This lets us call into PostBuild for people who want to customize the workflow -->
  <Import Project="$(SolutionDirectoryPath)Build\TFSBuild.proj" Condition="'$(RunUserTargets)' != 'false' And Exists('$(SolutionDirectoryPath)Build\TFSBuild.proj')" />
  <Import Project="$(SolutionDirectoryPath)packaging.targets" Condition="'$(RunUserTargets)' != 'false' And Exists('$(SolutionDirectoryPath)packaging.targets')" />

</Project>