<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">


  <PropertyGroup>
    <RunIntegrationTestsDependsOn>
      GetServerImage;
      ProvisionExpertDatabase;
      UpdateServerImage;
      ExecuteQueryViewsScript;
      LightUpServerImage;
      PackageImport;
    </RunIntegrationTestsDependsOn>

    <ImageWorkingDirectory>$(SolutionDirectoryPath)Dependencies</ImageWorkingDirectory>
    <ExpertEnvironmentName>Local_$([System.DateTime]::Now.ToFileTimeUtc())</ExpertEnvironmentName>
    <ExpertEnvironmentUrl>http://localhost/Expert_$(ExpertEnvironmentName)</ExpertEnvironmentUrl>
    <DatabaseName>$([System.Guid]::NewGuid())</DatabaseName>
    <ServiceAccount Condition="'$(ServiceAccount)' == ''">ADERANT_AP\tfsbuildservice$</ServiceAccount>
  </PropertyGroup>


  <Target Name="GetServerImage">

    <Message Text="Acquiring Expert server image." />

    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(BuildScriptsDirectory)LightUpDependencies.ps1&apos; -modulesRootPath &apos;$(SolutionDirectoryPath)&apos; -dropPath &apos;\\dfs.aderant.com\expertsuite\dev\vnext&apos; -manifestFile &apos;$(BuildScriptsDirectory)LightUpManifest.xml&apos; } &quot;" />

    <ItemGroup>
      <FilesToMove Include="$(ImageWorkingDirectory)\ApplicationServerCommon.psm1;$(ImageWorkingDirectory)\SecuritySetup.ps1;$(ImageWorkingDirectory)\TeardownServerImage.ps1"/>
    </ItemGroup>

    <MakeDir Directories="$(ImageWorkingDirectory)\bin" />
    <Move SourceFiles="@(FilesToMove)" DestinationFolder="$(ImageWorkingDirectory)\bin" />

  </Target>


  <Target Name="ProvisionExpertDatabase">

    <Message Text="Provisioning Expert database: $(DatabaseName)" />

    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\ProvisionDatabase.ps1&apos; -serverInstance &apos;LocalHost&apos; -databaseName &apos;$(DatabaseName)&apos; -backupPath &apos;$(ImageWorkingDirectory)\Expert.bak&apos; -assembly &apos;$(ImageWorkingDirectory)\API.Database.dll&apos; }&quot;" />

  </Target>


  <Target Name="UpdateServerImage">

    <Message Text="Updating Expert server image: $(ExpertEnvironmentName)." />

    <PropertyGroup>
      <ImagePath>$(ImageWorkingDirectory)\ExpertServerImage.zip</ImagePath>
      <!-- RoleFiles in future should be in the module build. Right now they were managed by Libraries.Roles so we need to load from the server image with all role files. -->
      <RoleFiles>$(BinModuleDirectory);$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\Roles\</RoleFiles>
    </PropertyGroup>
    
    <!--Update Server Image -->
    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\DeploymentEngine.exe&apos; UpdateServerImage /image:&apos;$(ImagePath)&apos; /name:&apos;$(ExpertEnvironmentName)&apos; /roles:&apos;$(RoleFiles)&apos; /modules:&apos;$(BinModuleDirectory)&apos; }&quot;" />

  </Target>


  <Target Name="ExecuteQueryViewsScript">

    <Message Text="Executing QueryViews Script: ExpertQuery.SqlViews.sql" />

    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\ExecuteSQLFile.ps1&apos; -serverInstance &apos;LocalHost&apos; -databaseName &apos;$(DatabaseName)&apos; -sqlFilePath &apos;$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\ExpertQuery.SqlViews.sql&apos; -assembly &apos;$(ImageWorkingDirectory)\API.Database.dll&apos; }&quot;" />

    <OnError ExecuteTargets="LightsOff" />

  </Target>


  <Target Name="LightUpServerImage">

    <Message Text="Lighting up Expert server image: Expert_$(ExpertEnvironmentName)." />
    
    <!-- Light up server image -->
    <Exec ContinueOnError="false"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\DeploymentEngine.exe&apos; LightUpServerImage /image:&apos;$(ImageWorkingDirectory)\$(ExpertEnvironmentName)&apos; /server:LocalHost /database:$(DatabaseName) /serviceaccount:$(ServiceAccount) /name:$(ExpertEnvironmentName) }&quot;" />

    <OnError ExecuteTargets="LightsOff" />

  </Target>


  <Target Name="PackageImport">

    <PropertyGroup>
      <FactoryBin>$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\SharedBin\Factory.bin</FactoryBin>
    </PropertyGroup>

    <ItemGroup>
      <Packages Include="$(BinModuleDirectory)\Packages\*" />
      <Packages Include="%(Packages.FullPath)" Condition="'%(Extension)' == '.zip'" />
      <ConfigFiles Include="$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\Services\extensions.config;$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\Services\bindings.config;$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\Services\clients.config;$(ImageWorkingDirectory)\$(ExpertEnvironmentName)\Services\instance.config" />
    </ItemGroup>

    <Copy SourceFiles="@(ConfigFiles)" DestinationFolder="$(ImageWorkingDirectory)" />
    <Copy SourceFiles="$(FactoryBin)" DestinationFolder="$(ImageWorkingDirectory)" />

    <!-- Package Import -->
    <Exec Condition="'@(Packages)' != ''"
      ContinueOnError="false"
      IgnoreExitCode="false"
      Command="$(ImageWorkingDirectory)\PackageManagerConsole.exe /Import /File:'%(Packages.FullPath)' /SourcePath:'$(ImageWorkingDirectory)'" />

    <OnError ExecuteTargets="LightsOff" />

  </Target>


  <Target Name="RunIntegrationTests"
    DependsOnTargets="$(RunTestsDependsOn)$(RunIntegrationTestsDependsOn)"
    Condition="'$(RunIntegrationTests)' == 'true' And '$(RunTest)' != 'false' And '$(IsCustomBuild)' != 'true'">

    <PropertyGroup>
      <IntegrationTestAssemblies>@(IntegrationTestAssemblies->'%(FullPath)',' ')</IntegrationTestAssemblies>
      <VsTestWorkingDirectory>$(SolutionDirectoryPath)</VsTestWorkingDirectory>

      <!-- VSTest Setup -->
      <VsTestDirectory Condition="'$(VsTestDirectory)' == ''">$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <PlatformSwitch Condition="'$(Use32BitTestRunner)' != 'true'">/Platform:x64</PlatformSwitch>
      <TestAdapterSwitch Condition="'$(PSTests)' == 'true'">/TestAdapterPath:"$(BuildScriptsDirectory)..\Build.Tools"</TestAdapterSwitch>
      <ResultsFileSwitch Condition="'$(ResultsFileSwitch)' == ''">/Logger:trx</ResultsFileSwitch>
      <TestCaseFilter>/TestCaseFilter:&quot;TestCategory!=Reporting$(CustomTestFilters)&quot;</TestCaseFilter>
    </PropertyGroup>
    
    <Message Condition="'$(Use32BitTestRunner)' == 'true'" Text="Must run tests in 32-bit mode as at least one build output assembly has a platform of x86." />

    <MakeDir Directories="$(VsTestWorkingDirectory)" />

    <PropertyGroup>
      <TestTimeoutMilliseconds>-1</TestTimeoutMilliseconds>
      <TestTimeoutMilliseconds Condition="'$(IsDesktopBuild)' == 'false'">900000</TestTimeoutMilliseconds>
    </PropertyGroup>
    
    <!-- Run With VSTest -->
    <Exec Condition="'$(IntegrationTestAssemblies)' != ''"
          ContinueOnError="false"
          IgnoreExitCode="false"
          WorkingDirectory="$(VsTestWorkingDirectory)"
          Timeout="$(TestTimeoutMilliseconds)"
          Command='SET EXPERT_ENVIRONMENT_URL=$(ExpertEnvironmentUrl)&amp; SET EXPERT_MODULE_DIRECTORY=$(VsTestWorkingDirectory) &amp; "$(PathToTestTool)" $(IntegrationTestAssemblies) $(TestCaseFilter) "$(ResultsFileSwitch)" $(PlatformSwitch) $(IsolationSwitch)' />

    <PropertyGroup>
      <TestOutcome>Succeeded</TestOutcome>
    </PropertyGroup>

    <OnError ExecuteTargets="LightsOff;OnTestFailure" />

  </Target>


  <Target Name="LightsOff"
    AfterTargets="RunIntegrationTests"
    Condition="'$(RunIntegrationTests)' == 'true' And '$(RunTest)' != 'false' And '$(IsCustomBuild)' != 'true'">

    <Message Text="Removing Expert server image: Expert_$(ExpertEnvironmentName)." />

    <Exec ContinueOnError="true"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\DeploymentEngine.exe&apos; TeardownServerImage /name:$(ExpertEnvironmentName) }&quot;" />

    <Message Text="Dropping Expert database: $(DatabaseName)." />

    <Exec ContinueOnError="true"
      IgnoreExitCode="false"
      Command="Powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -command &quot;&amp; { &amp; &apos;$(ImageWorkingDirectory)\DropDatabase.ps1&apos; -serverInstance &apos;LocalHost&apos; -databaseName &apos;$(DatabaseName)&apos; -assembly &apos;$(ImageWorkingDirectory)\API.Database.dll&apos; }&quot;" />

  </Target>


</Project>