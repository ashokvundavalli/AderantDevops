<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="3.5">

  <!-- 
    =========================================================================================================
        Team Build Script - Modularisation Prototype.
        Another Change.
        
        Maintained by Global DBA And Release Management.  DBARM monitors and approves all modifications.  
        Guidelines:
            * All Imports, Calls to external commands/tasks/tools/utilities must be approved by DBARM  
            * Retain structure and formatting for easier merge between Team Build project scripts 
            * Tabs converted to 4 spaces for easier reading outside of VS.
    =========================================================================================================
    -->

  <ProjectExtensions>
    <ProjectFileVersion>2</ProjectFileVersion>
  </ProjectExtensions>

  <PropertyGroup>
    <RunTest>true</RunTest>
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
    <RunCodeAnalysis>Never</RunCodeAnalysis>
    <BaseDropDirectory>$(DropLocation)</BaseDropDirectory>
    <!--Server Build for all modules-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\..\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Server build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)Build\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Desktop build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionRoot)\$(ModuleName)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Custom build for a module-->
    <!--<SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true') And ('$(IsCustomBuild)'=='true')">$(SolutionRoot)\$(ModuleName)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true') And ('$(IsCustomBuild)'=='true')">$(SolutionDirectoryPath)\Build\Common\</BuildScriptsDirectory>-->

    <!-- This is required as the T4 and compile is done via BuildUsingMSBuild4.ps1, so it runs as a desktopbuild -->
    <SolutionDirectoryPath Condition="('$(SolutionDirectoryPathForMSBuild4)'!='')">$(SolutionDirectoryPathForMSBuild4)</SolutionDirectoryPath>
    <rmBCItemTransformTemplatesEnabled>$(T4TransformEnabled)</rmBCItemTransformTemplatesEnabled>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <ModuleSourceDirectory>$(SolutionDirectoryPath)\src</ModuleSourceDirectory>
    <ModuleTestDirectory> $(SolutionDirectoryPath)\test</ModuleTestDirectory>
    <ModuleBuildDirectory> $(SolutionDirectoryPath)\build</ModuleBuildDirectory>    
  </PropertyGroup>

  <Import Project="RM.TransformTemplates.Targets"/>

  <!--Copied from Aderant.Build.targets-->
  <UsingTask
    AssemblyFile="$(MSBuildExtensionsPath)\NDepend\NDepend.Build.MSBuild.dll"
    TaskName="NDependTask"
        />

  <!-- 
    ==========================================================================================
        Build Configurations
    ==========================================================================================
    -->
  <ItemGroup>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Release'"
      Include="Release|Any CPU">
      <FlavorToBuild>Release</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Debug'"
      Include="Debug|Any CPU">
      <FlavorToBuild>Debug</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>

  <!--
    ==========================================================================================
        Team / Desktop Build Sequences - Begin
    ==========================================================================================
  -->

  <PropertyGroup>
    <OnBuildBreakDependsOn>
      BeforeOnBuildBreak;
      GetChangeSetsOnBuildBreak;
      DropBuild;
      AfterOnBuildBreak;
    </OnBuildBreakDependsOn>
  </PropertyGroup>

  <Target
    Name="OnBuildBreak"
    Condition="('$(IsDesktopBuild)'!='true')"
    DependsOnTargets="$(OnBuildBreakDependsOn)"
        >
  </Target>


  <Target Name="AfterCompile">
    <CallTarget Targets="ModuleBuild" />
  </Target>

  <!--
    ==========================================================================================
        Solutions To Build in the correct build order 
    ==========================================================================================
  -->
  <Target Name="ModuleBuild">
    <CallTarget Targets="CleanBin" />
    <CallTarget Targets="GetModuleDependencies" />
    <CallTarget Targets="ZipCustomSource" />
    <CallTarget Targets="SetBuildNumbers" />
    <CallTarget Targets="UpdateModuleFileVersion"/>
    <CallTarget Targets="Build" />
    <CallTarget Targets="CreateMSI" />
    <CallTarget Targets="BuildHelpFiles" />
    <CallTarget Targets="NDepend" />
    <CallTarget Targets="RunUnitTests" />
    <CallTarget Targets="SignFiles" />
    <CallTarget Targets="CopyToDrop" />
    <CallTarget Targets ="Testing" />
  </Target>

  <Target Name="Testing">
    <Message Text="Solution Root = $(SolutionRoot)" />
    <Message Text="Solution Directory = $(SolutionDirectoryPath)" />
    <Message Text="Build Scripts Directory = $(BuildScriptsDirectory) " />
    <Message Text="Module Name = $(ModuleName) " />
    <Message Text="Drop Location = $(DropLocation) " />
    <Message Text="Create MSI? = $(CreateMSI) " />
    <Message Text="BuildType MSI? = $(BuildType) " />
  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->

  <Target Name="SetBuildNumbers">
    <Version BuildType="Automatic"
             RevisionType="Automatic"
             Major="$(VersionMajor)"
             Minor="$(VersionMinor)" >
      <Output TaskParameter="Major"
              PropertyName="Major" />
      <Output TaskParameter="Minor"
              PropertyName="Minor" />
      <Output TaskParameter="Build"
              PropertyName="Build" />
      <Output TaskParameter="Revision"
              PropertyName="Revision" />
    </Version>

    <CreateProperty
      Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output
        TaskParameter="Value"
        PropertyName="FileVersion" />
    </CreateProperty>

    <CreateProperty
      Value="$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)">
      <Output
        TaskParameter="Value"
        PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!--
  ==========================================================================================
  Override drop location
  ==========================================================================================
  -->
  <Target Name="BuildNumberOverrideTarget"
          DependsOnTargets="SetBuildNumbers">
    <PropertyGroup>
      <BuildNumber>$(FileVersion)</BuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="BeforeEndToEndIteration"
          DependsOnTargets="SetBuildNumbers">
    <CreateProperty Value="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\" >
      <Output TaskParameter="Value"
              PropertyName="DropLocation"/>
    </CreateProperty>
  </Target>

  <!--
    ==========================================================================================
        Clean
    ==========================================================================================
  -->
  <ItemGroup>
    <ModuleBinFiles Include="$(SolutionDirectoryPath)\Bin\**\*.*"/>
  </ItemGroup>

  <Target Name="CleanBin" >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Clean Module Bin"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Delete Files="@(ModuleBinFiles)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>


  <!--
    ==========================================================================================
        Get Module Dependencies
    ==========================================================================================
  -->

  <Target Name ="GetModuleDependencies"
          Condition="('$(DropLocation)'!='')">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Getting Module Dependencies"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)LoadDependancies.ps1" -modulesRootPath $(SolutionDirectoryPath) -dropPath $(BaseDropDirectory) -buildScriptsDirectory $(BuildScriptsDirectory)'>
    </Exec>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!-- 
    ==========================================================================================
    T4 Template Transformation
    ========================================================================================== 
    -->
  <Target Name="rmBeforeTransformTemplates" >

    <PropertyGroup>
      <rmT4AssemblyReferencePaths>
        $(OutDir);
        $(SolutionDirectoryPath)\Dependencies;
      </rmT4AssemblyReferencePaths>
    </PropertyGroup>

    <ItemGroup>
      <rmT4TextTemplates Condition="('$(ModuleName)'=='Libraries.SoftwareFactory')"
                         Include="
                    $(ModuleSourceDirectory)\**\Dsl\GeneratedCode\**\*.tt;
                    $(ModuleSourceDirectory)\**\Dsl\Integration\**\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\GeneratedCode\**\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\ProjectItemTemplates\*.tt;
                    $(ModuleSourceDirectory)\Setup\SoftwareFactorySetup\*.tt;
                    "
                         Exclude="
                    $(ModuleSourceDirectory)\**\Templates\*.tt;
                    ">
        <Generator>TextTemplatingFileGenerator</Generator>
      </rmT4TextTemplates>
      <rmT4TextTemplates Condition="('$(ModuleName)'!='Libraries.SoftwareFactory')"
                         Include="
                    $(ModuleSourceDirectory)\**\*.tt;
                    $(ModuleTestDirectory)\**\*.tt;
                    ">
        <Generator>TextTemplatingFileGenerator</Generator>
      </rmT4TextTemplates>
    </ItemGroup>

    <Message Text="IsDesktopBuild = $(IsDesktopBuild)"/>
    <Message Text="SolutionDirectoryPathForMSBuild4 = $(SolutionDirectoryPathForMSBuild4)"/>
    <Message Text="SolutionDirectoryPath = $(SolutionDirectoryPath)"/>
    <Message Text="ModuleSourceDirectory = $(ModuleSourceDirectory)"/>
    <Message Text="ModuleTestDirectory = $(ModuleTestDirectory)"/>
    <Message Text="AderantBuildClientTasksV100Lib-1_0_0_0 = $(AderantBuildClientTasksV100Lib-1_0_0_0)"/>
    <Message Text="rmT4AssemblyReferencePaths = $(rmT4AssemblyReferencePaths)"/>
    <Message Text="rmT4TextTemplates = @(rmT4TextTemplates)"/>
    <Message
      Text="
DSLDirectiveLoadMethod&#xA;$(DSLDirectiveLoadMethod)&#xA;
AderantBuildClientTasksV100Lib-1_0_0_0&#xA;$(AderantBuildClientTasksV100Lib-1_0_0_0)&#xA;
rmT4AssemblyReferencePaths&#xA;$(rmT4AssemblyReferencePaths)&#xA;
rmT4TextTemplates&#xA;$(rmT4TextTemplates)&#xA;
            "/>

  </Target>

  <!--
    ==========================================================================================
        Versioning 
    ==========================================================================================
  -->

  <PropertyGroup>
    <TfCommand>$(TeamBuildRefPath)\..\tf.exe</TfCommand>
  </PropertyGroup>

  <Target Name="UpdateModuleFileVersion"
          Condition="('$(IsDesktopBuild)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Updating file version in CommonAssemblyInfo.cs"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <CreateItem Include="$(ModuleBuildDirectory)\CommonAssemblyInfo.cs;">
      <Output TaskParameter="Include"
              ItemName="AssemblyInfoFile" />
    </CreateItem>

    <!-- Get latest version of AssemblyInfo -->
    <Exec WorkingDirectory="$(SolutionRoot)"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(TfCommand)&quot; get @(AssemblyInfoFile) /version:T"/>

    <!--Checkout AssemblyInfo and lock-->
    <Exec WorkingDirectory="$(SolutionRoot)"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(TfCommand)&quot; checkout @(AssemblyInfoFile) /lock:Checkout"/>

    <FileUpdate Files="@(AssemblyInfoFile)"
                IgnoreCase="true"
                Multiline="true"
                Singleline="false"
                Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
                ReplacementText="${section1}$(FileVersion)${section2}"/>

    <!--Checkin AssemblyInfo-->
    <Exec WorkingDirectory="$(SolutionRoot)"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(TfCommand)&quot; checkin /comment:&quot;***NO_CI***&quot; /noprompt /override:&quot;Auto-Build: Version Update&quot; @(AssemblyInfoFile)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================================================
        Compile - rmTransformTemplates is only run here for a desktop build, on the server is is handled by BuildUsingMSBuild4 
    ==========================================================================================================================
  -->
  <PropertyGroup>
    <BuildDependsOn Condition="('$(IsDesktopBuild)'=='true')">
      rmTransformTemplates;
    </BuildDependsOn>
    <SolutionFileName Condition="('$(IsCustomBuild)'=='true')">$(SolutionDirectoryPath)\$(ModuleName).Custom.sln</SolutionFileName>
    <SolutionFileName Condition="('$(IsCustomBuild)'!='true')">$(SolutionDirectoryPath)\$(ModuleName).sln</SolutionFileName>
  </PropertyGroup>
  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOn)"
          Condition="('$(CreateMSI)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Building Module $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Message Text="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"/>
    <Message Text="SolutionDirectoryPath = $(SolutionDirectoryPath)"/>

    <MSBuild Condition="('$(IsDesktopBuild)'=='true')"
             Projects="$(SolutionFileName)"
             Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"
             Targets="Build"  />

    <Exec Condition="('$(IsDesktopBuild)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)BuildUsingMSBuild4.ps1" -moduleToBuildPath $(SolutionDirectoryPath) -buildInfrastructurePath $(BuildScriptsDirectory)'>
    </Exec>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================================================
        CreateMSI - target is called to create an MSI
    ==========================================================================================================================
  -->

  <PropertyGroup>
    <BuildType>(Debug|Any CPU)</BuildType>
  </PropertyGroup>

  <Target Name="CreateMSI"
          Condition="('$(CreateMSI)'=='true')">

    <Message Text="MSI BuildType [$(BuildType)]"/>
    <Message Text="MSI created for module [$(SolutionFileName)]"/>
    <Message Text="MSI created in directory [$(SolutionDirectoryPath)]"/>

    <Exec
      ContinueOnError="false"
      IgnoreExitCode="false"
      Command='"Powershell" "$(BuildScriptsDirectory)CreateMSIUsingMSBuild4.ps1" -moduleSolution $(SolutionFileName) -moduleDirectory $(SolutionDirectoryPath) -buildType &quot;$(BuildType)&quot;'>
    </Exec>

  </Target>


  <!--
   ==========================================================================================
        Building helpfiles
    ==========================================================================================
  -->
  <ItemGroup>
    <HelpProjectFiles
      Include="$(SolutionDirectoryPath)\Src\*.shfbproj;"/>
  </ItemGroup>

  <Target Name="BuildHelpFiles"
          Condition="('$(BuildHelpFiles)'== 'true')">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Building help file %(HelpProjectFiles.Identity)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Message Text = "Building HelpProjectFile: %(HelpProjectFiles.Identity)"/>

    <MSBuild
      Projects="%(HelpProjectFiles.Identity)"
      Properties="Platform=%(ConfigurationToBuild.PlatformToBuild)"
      Targets="Build"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        BuildUsingMSBuild4 
    ==========================================================================================
  -->
  <Target Name="BuildUsingMSBuild4"
          DependsOnTargets="rmTransformTemplates" >

    <Message Text="
      BuildUsingMSBuild4 Starting.
      This is a temporary solution to the problem that we are using a VS2008 build agent
      on the build servers .  A server build calls BuildUsingMSBuild4.ps1 (see above)
      which uses the MSBuild4 engine to run this target.
      "/>

    <Message Text="Solution File = $(SolutionDirectoryPathForMSBuild4)\$(ModuleName).sln"/>

    <MSBuild
      Projects="$(SolutionDirectoryPathForMSBuild4)\$(ModuleName).sln"
      Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"
      Targets="Build"  />

    <Message Text="BuildUsingMSBuild4 Finished"/>

  </Target>

  <!--
    ==========================================================================================
        Zip Source 
    ==========================================================================================
  -->

  <Target Name="ZipCustomSource"
          Condition="(Exists('$(SolutionDirectoryPath)\$(ModuleName).Custom.sln') and '$(IsCustomBuild)'!='true')"
          >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Zipping Source for $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Customization</ZipFileDirectory>
      <CustomBuildFilesDirectory>$(SolutionDirectoryPath)BuildScripts</CustomBuildFilesDirectory>
      <ZipFile>$(ZipFileDirectory)\$(ModuleName).Custom.zip</ZipFile>
    </PropertyGroup>

    <Delete
      Files="$(ZipFile)"
      Condition="Exists('$(ZipFile)')"
            />


    <!-- Read solution file so we can get the project source-->
    <ReadLinesFromFile File="$(SolutionDirectoryPath)\$(ModuleName).Custom.sln">
      <Output TaskParameter="Lines"
              ItemName="LinesFromSlnFile"/>
    </ReadLinesFromFile>


    <!--  Extract the Project lines from the custom solution file.
          This will give lines in this format:
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexMatch Input="@(LinesFromSlnFile)"
                Expression="Project\(&quot;.+&quot;\) = &quot;(.+)&quot;, &quot;.+\.csproj">
      <Output ItemName="ProjectLines"
              TaskParameter="Output"/>
    </RegexMatch>
    <Message Text="&#xA;Project lines in custom solution:&#xA;@(ProjectLines, '&#xA;')"/>


    <!--  Remove text before custom project name
          This will leave us with:
          Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexReplace Input="@(ProjectLines)"
                  Expression="Project\(&quot;.+&quot;\) = &quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="SlnProjects"
              TaskParameter="Output" />
    </RegexReplace>


    <!-- Remove text after custom project name
          This will leave us with the project name:
          Aderant.BusinessEntity
    -->
    <RegexReplace Input="@(SlnProjects)"
                  Expression="&quot;, &quot;.+\.csproj&quot;, &quot;.+&quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="CustomProjects"
              TaskParameter="Output" />
    </RegexReplace>
    <Message Text="&#xA;Projects in custom solution:&#xA;@(CustomProjects, '&#xA;')"/>


    <!-- Create property that lists the project folders as an MSBuild include string-->
    <PropertyGroup>
      <ProjectFoldersIncludeString>$(ModuleSourceDirectory)\@(CustomProjects,'\**\*.*;$(ModuleSourceDirectory)')\**\*.*;</ProjectFoldersIncludeString>
    </PropertyGroup>
    <Message Text="&#xA;ProjectFoldersIncludeString = $(ProjectFoldersIncludeString)&#xA;"/>

    
    <!--Create CommonBuild Dir-->
    
    <MakeDir
      Directories="$(CustomBuildFilesDirectory)"/>

    <ItemGroup>
      <CommonBuildFiles Include="$(BuildScriptsDirectory)\**\*.*"/>
    </ItemGroup>
    
    <!--Copy Build scripts to CustomBuildFilesDirectory -->    
    <Copy
      SourceFiles="@(CommonBuildFiles)"
      DestinationFolder="$(CustomBuildFilesDirectory)"
        />    
    
    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>

      <ZipSourceFiles
        Include="
                      $(SolutionDirectoryPath)\**\*.Custom.sln;
  					          "/>

      <ZipSourceFiles
        Include="
  					          $(ProjectFoldersIncludeString)
  					          "
        Exclude="
                      $(ModuleSourceDirectory)\**\*.sln;
                      $(ModuleSourceDirectory)\**\*.vssscc;
                      $(ModuleSourceDirectory)\**\*.vspscc;
                      $(ModuleSourceDirectory)\**\*.sln.cache;
                      $(ModuleSourceDirectory)\**\*.vsmdi;
                      $(ModuleSourceDirectory)\**\*.testrunconfig;
                      $(ModuleSourceDirectory)\**\*.suo;
                      $(ModuleSourceDirectory)\**\*.sln.Debug.vsprops;
                      $(ModuleSourceDirectory)\**\bin\**;
                      $(ModuleSourceDirectory)\**\obj\**;
                      $(ModuleSourceDirectory)\**\UnitTest*\**;
                      $(ModuleSourceDirectory)\**\IntegrationTest*\**;
  			              $(ModuleSourceDirectory)\**\TestResults\**;
                      $(ModuleSourceDirectory)\**\Release.txt;
                      $(ModuleSourceDirectory)\**\Debug.txt;
                      $(ModuleSourceDirectory)\**\_Resharper*\**;
                      $(ModuleSourceDirectory)\**\*resharper.user;
  				    "/>      
      <ZipSourceFiles
        Include="
  					          $(ModuleBuildDirectory)\*.*;
  					          "
              />
      <ZipSourceFiles
        Include="
  					          $(CustomBuildFilesDirectory)\*.*;
  					          "
         />
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(SolutionDirectoryPath)"
            />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Unit Test 
    ==========================================================================================
  -->

  <Target Name="RunUnitTests"
          DependsOnTargets="Build">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Running Unit Tests"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <CreateItem
      Include="$(BinTestDirectory)\%2aUnitTest%2a.dll"
      Exclude="$(BinTestDirectory)\%2aHelpers%2a.dll"
      AdditionalMetadata="TestContainerPrefix=/testcontainer:"
          >
      <Output TaskParameter="Include"
              ItemName="TestAssemblies" />
    </CreateItem>

    <PropertyGroup>
      <UnitTestAssemblies>@(TestAssemblies->'%(TestContainerPrefix)%(FullPath)',' ')</UnitTestAssemblies>
      <ResultsFileSwitch>/resultsfile:$(BinTestDirectory)\UnitTestResults.trx</ResultsFileSwitch>
      <PublishBuildSwitch>/publishbuild:$(FileVersion)</PublishBuildSwitch>
      <ConfigurationSwitch>/flavor:%(ConfigurationToBuild.FlavorToBuild)</ConfigurationSwitch>
      <PlatformSwitch>/platform:%(ConfigurationToBuild.PlatformToBuild)</PlatformSwitch>
      <PublishSwitch>/publish:$(TeamFoundationServerUrl)</PublishSwitch>
      <TeamProjectSwitch>/teamproject:$(TeamProject)</TeamProjectSwitch>
      <PathToMSTest10>$(VS100COMNTOOLS)..\IDE\MSTest.exe</PathToMSTest10>
    </PropertyGroup>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Condition="('$(UnitTestAssemblies)' != '')"
          Command='"$(PathToMSTest10)" $(UnitTestAssemblies) $(ResultsFileSwitch) ' />

    <Message
      Condition="('$(UnitTestAssemblies)' == '')"
      Text="** NO UNIT TESTS ! ** (Your pay has been docked)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        Sign Files
    ==========================================================================================
  -->

  <PropertyGroup>
    <SignToolCommand>$(BuildScriptsDirectory)..\Build.Tools\signtool.exe</SignToolCommand>
  </PropertyGroup>

  <Target Name="SignFiles"
          DependsOnTargets="RunUnitTests"
          Condition="('$(FilesToSign)' !='')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Signing Files"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <ItemGroup>
      <FileToSign Include="$(FilesToSign)" />
    </ItemGroup>

    <Exec Command='"$(SignToolCommand)" sign /p "rugby ball" /f (BuildScriptsDirectory)\aderant.pfx $(BinModuleDirectory)%(FileToSign.Filename)%(FileToSign.Extension)' />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>


  <!--
    ==========================================================================================
        Copy Build to Drop Location 
    ==========================================================================================
  -->

  <Target Name="CopyToDrop"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Copy Output to $(DropLocation)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <!--We have differing ways of determining the drop location depending on the type of build. 
        The simplest way was to have a condition on whether we are build all modules of a single module.-->

    <Exec Condition="('$(BuildAll)'=='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1" -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath)-dropRootUNCPath $(DropLocation)\$(ModuleName)\$(AssemblyVersion) -assemblyFileVersion $(FileVersion)' />

    <Exec Condition="('$(BuildAll)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1"  -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation) -assemblyFileVersion $(FileVersion)' />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        NDepend post build analysis
    ==========================================================================================
  -->
  <PropertyGroup>
    <NDependPath>c:\Program Files (x86)\NDepend</NDependPath>
    <NDpendOutputDir>$(SolutionDirectoryPath)\bin\NDependOut</NDpendOutputDir>
    <NDependWarn>0</NDependWarn>
  </PropertyGroup>

  <Target Name="NDepend"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="NDepend"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
              >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                  />
    </BuildStep>

    <Message Text="*** NDepend " />
    <Message Text="NDependConsoleExePath : $(NDependPath)" />
    <Message Text="ProjectFilePath       : $(BuildScriptsDirectory)NDependFramework.xml" />

    <!-- Lets first remove the ld NDependOut directory -->
    <RemoveDir Directories="$(SolutionDirectoryPath)\NDependOut" />

    <NDependTask
      NDependConsoleExePath="$(NDependPath)"
      ProjectFilePath="$(BuildScriptsDirectory)NDependFramework.xml"
      OutDir="$(NDpendOutputDir)"
            />

    <!-- Scan the NDepend Report Files to see if a braking change has been identified -->

    <XmlRead ContinueOnError="True"
             XmlFileName="$(SolutionDirectoryPath)\NDependout\CQLResult.xml"
             XPath="string(count(//Group[@Status='Warn']))">
      <Output TaskParameter="Value"
              PropertyName="NDependWarn" />
    </XmlRead>


    <!-- If braking change identified then need to mark build step as Failed -->

    <Error Text="NDepend Breaking Change"
           Condition="$(NDependWarn) &gt; 0"/>

    <BuildStep
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->

  <Target Name="MarkBuildStepAsFailed">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Failed"
            />
    <SetBuildProperties
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      CompilationStatus="Failed"
            />
    <Error Condition="('$(IsDesktopBuild)'=='true')"/>
  </Target>

</Project>