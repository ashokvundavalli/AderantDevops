<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="4.0">

  <!-- 
    =========================================================================================================
        Team Build Script - Modularisation Prototype.
        Another Change.
        
        Maintained by Global DBA And Release Management.  DBARM monitors and approves all modifications.  
        Guidelines:
            * All Imports, Calls to external commands/tasks/tools/utilities must be approved by DBARM  
            * Retain structure and formatting for easier merge between Team Build project scripts 
            * Tabs converted to 4 spaces for easier reading outside of VS.
    =========================================================================================================
    -->

  <ProjectExtensions>
    <ProjectFileVersion>2</ProjectFileVersion>
  </ProjectExtensions>

  <PropertyGroup>
    <RunTest Condition="'$(RunTest)' == ''">true</RunTest>
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
    <RunCodeAnalysis>$(RunCodeAnalysisSetting)</RunCodeAnalysis>
    <BaseDropDirectory>$(DropLocation)</BaseDropDirectory>
    <!--Server Build for all modules-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\..\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Server build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)Build\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Desktop build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionRoot)\$(ModuleName)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>

    <BuildScriptsDirectory>$([System.IO.Path]::GetFullPath('$(BuildScriptsDirectory)'))</BuildScriptsDirectory>
    <SolutionDirectoryPath>$([System.IO.Path]::GetFullPath('$(SolutionDirectoryPath)'))</SolutionDirectoryPath>

    <!-- Detect VS 2010 or 2012 -->
    <VsCommonTools Condition="'$(VS100COMNTOOLS)' != ''">$(VS100COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS110COMNTOOLS)' != ''">$(VS110COMNTOOLS)</VsCommonTools>
    
    <rmBCItemTransformTemplatesEnabled>$(T4TransformEnabled)</rmBCItemTransformTemplatesEnabled>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <ModuleSourceDirectory>$(SolutionDirectoryPath)\src</ModuleSourceDirectory>
    <ModuleTestDirectory> $(SolutionDirectoryPath)\test</ModuleTestDirectory>
    <ModuleBuildDirectory> $(SolutionDirectoryPath)\build</ModuleBuildDirectory>
  </PropertyGroup>

  <Import Project="RM.TransformTemplates.Targets"/>

  <!--Copied from Aderant.Build.targets-->
  <UsingTask
    AssemblyFile="$(MSBuildExtensionsPath)\NDepend\NDepend.Build.MSBuild.dll"
    TaskName="NDependTask"
        />

  <!-- The Zip Custom Source inline task -->
    <UsingTask
      TaskName="SourceTransformationTask"
      TaskFactory="CodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
      <ParameterGroup >
        <SourcePath ParameterType="System.String" Required="true"/>
        <TransformsDefinitionFile ParameterType="System.String" Required="true"/>
      </ParameterGroup>
      <Task>
        <Reference Include="System.Core"/>
        <Reference Include="System.Xml"/>
        <Reference Include="System.Xml.Linq"/>
        <Using Namespace="System"/>
        <Using Namespace="System.IO"/>
        <Using Namespace="System.Linq"/>
        <Using Namespace="System.Xml.Linq"/>
        <Using Namespace="System.Text.RegularExpressions"/>
        <Code><![CDATA[
Log.LogMessage(string.Format("Starting transformation of source at {0} using {1}", SourcePath, TransformsDefinitionFile));

// Get the list of transformations
if(!File.Exists(TransformsDefinitionFile)){
  Log.LogError(string.Format("The transformations file {0} does not exist", TransformsDefinitionFile));
}

XDocument transformsDoc = XDocument.Load(TransformsDefinitionFile);
var replacements = from replacementDefinition in transformsDoc.Root.Descendants("Replacement")
                   from file in Directory.GetFiles(SourcePath, replacementDefinition.Attribute("FileFilter").Value, SearchOption.AllDirectories)
                   select new {
                    FilePath = file,
                    Regex = new Regex(replacementDefinition.Attribute("Pattern").Value),
                    ReplaceWith = replacementDefinition.Attribute("ReplaceWith").Value
                   };

Log.LogMessage(string.Format("Starting {0} replacement tasks", replacements.Count()));

foreach(var replacement in replacements){
  string fileContent = File.ReadAllText(replacement.FilePath);
  fileContent = replacement.Regex.Replace(fileContent, replacement.ReplaceWith);
  File.WriteAllText(replacement.FilePath, fileContent);
}


]]></Code>
      </Task>
    </UsingTask>
  <!-- 
    ==========================================================================================
        Build Configurations
    ==========================================================================================
    -->
  <ItemGroup>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Release'"
      Include="Release|Any CPU">
      <FlavorToBuild>Release</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Debug'"
      Include="Debug|Any CPU">
      <FlavorToBuild>Debug</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>

  <!--
    ==========================================================================================
        Team / Desktop Build Sequences - Begin
    ==========================================================================================
  -->

  <PropertyGroup>
    <OnBuildBreakDependsOn>
      BeforeOnBuildBreak;
      GetChangeSetsOnBuildBreak;
      DropBuild;
      AfterOnBuildBreak;
    </OnBuildBreakDependsOn>
  </PropertyGroup>

  <Target
    Name="OnBuildBreak"
    Condition="('$(IsDesktopBuild)'!='true')"
    DependsOnTargets="$(OnBuildBreakDependsOn)"
        >
  </Target>


  <Target Name="AfterCompile">
    <CallTarget Targets="ModuleBuild" />
  </Target>

  <!--
    ==========================================================================================
        Solutions To Build in the correct build order 
    ==========================================================================================
  -->
  <Target Name="ModuleBuild">
    <CallTarget Targets="CleanBin" />
    <CallTarget Targets="GetModuleDependencies" />
    <CallTarget Targets="ZipCustomSource" />
    <CallTarget Targets="SetBuildNumbers" />
    <CallTarget Targets="UpdateModuleFileVersion"/>
    <CallTarget Targets="Build" />
    <CallTarget Targets="CreateMSI" />
    <CallTarget Targets="ZipTemplateModule" />
    <CallTarget Targets="BuildHelpFiles" />
    <CallTarget Targets="NDepend" Condition="('$(BuildAll)'!='true')" />
    <CallTarget Targets="RunUnitTests" />
    <CallTarget Targets="PublishModule" />
    <CallTarget Targets="Testing" />
    <CallTarget Targets="PostBuild" Condition="('$(PostBuild)'=='true')" />
    <CallTarget Targets="CopyToDrop" />
  </Target>

  <Target Name="Testing">
    <Message Text="Solution Root = $(SolutionRoot)" />
    <Message Text="Solution Directory = $(SolutionDirectoryPath)" />
    <Message Text="Build Scripts Directory = $(BuildScriptsDirectory) " />
    <Message Text="Module Name = $(ModuleName) " />
    <Message Text="Drop Location = $(DropLocation) " />
    <Message Text="Create MSI? = $(CreateMSI) " />
    <Message Text="BuildType MSI? = $(BuildFlavor) " />
    <Message Text="Visual Studio Tools Path: $(VsCommonTools)" />
  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->

  <Target Name="SetBuildNumbers">
    <Version BuildType="Automatic"
             RevisionType="Automatic"
             Major="$(VersionMajor)"
             Minor="$(VersionMinor)" >
      <Output TaskParameter="Major"
              PropertyName="Major" />
      <Output TaskParameter="Minor"
              PropertyName="Minor" />
      <Output TaskParameter="Build"
              PropertyName="Build" />
      <Output TaskParameter="Revision"
              PropertyName="Revision" />
    </Version>

    <CreateProperty
      Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output
        TaskParameter="Value"
        PropertyName="FileVersion" />
    </CreateProperty>

    <CreateProperty
      Value="$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)">
      <Output
        TaskParameter="Value"
        PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!--
  ==========================================================================================
  Override drop location
  ==========================================================================================
  -->
  <Target Name="BuildNumberOverrideTarget"
          DependsOnTargets="SetBuildNumbers">
    <PropertyGroup>
      <BuildNumber>$(FileVersion)</BuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="BeforeEndToEndIteration"
          DependsOnTargets="SetBuildNumbers">
    <CreateProperty Value="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\" >
      <Output TaskParameter="Value"
              PropertyName="DropLocation"/>
    </CreateProperty>
  </Target>

  <!--
    ==========================================================================================
        Clean
    ==========================================================================================
  -->
  <Target Name="CleanBin" >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Clean Module Bin"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>
    
    <ItemGroup>
      <Files Include="$(SolutionDirectoryPath)Bin\**\*.trx" />
      <Files Condition="'$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false'" 
             Include="$(SolutionDirectoryPath)Bin\**\*" />
      <Files Condition="'$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false'" 
             Include="$(SolutionDirectoryPath)src\**\obj\**\*" />
    </ItemGroup>

    <ItemGroup>
        <!-- Must trim trailing slash as GetDirectories does not return results with trailing slashes -->
        <Folders Condition="Exists('$(SolutionDirectoryPath)Bin\') And ('$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false')"
                 Include="$([System.IO.Directory]::GetDirectories('$(SolutionDirectoryPath)Bin\', '*', System.IO.SearchOption.AllDirectories))"
                 Exclude="$(BinTestDirectory.TrimEnd('\'));$(BinModuleDirectory.TrimEnd('\'))" />
    </ItemGroup>

    <Message Text="Cleaning module bin: $(CleanBin)" />

    <Delete Files="@(Files)" />
    <RemoveDir Directories="@(Folders)" />

    <MakeDir Directories="$(BinModuleDirectory)" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================
        Get Module Dependencies
    ==========================================================================================
  -->

  <Target Name ="GetModuleDependencies"
          Condition="('$(DropLocation)'!='')">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Getting Module Dependencies"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)LoadDependancies.ps1" -modulesRootPath $(SolutionDirectoryPath) -moduleName $(ModuleName) -dropPath $(BaseDropDirectory) -buildScriptsDirectory $(BuildScriptsDirectory)'>
    </Exec>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!-- 
    ==========================================================================================
    T4 Template Transformation
    ========================================================================================== 
    -->
  <Target Name="rmBeforeTransformTemplates" >

    <PropertyGroup>
      <rmT4AssemblyReferencePaths>
        $(OutDir);
        $(SolutionDirectoryPath)\Dependencies;
      </rmT4AssemblyReferencePaths>
    </PropertyGroup>

    <ItemGroup>
      <rmT4TextTemplates Condition="('$(ModuleName)'=='Libraries.SoftwareFactory')"
                         Include="
                    $(ModuleSourceDirectory)\**\Dsl\GeneratedCode\**\*.tt;
                    $(ModuleSourceDirectory)\**\Dsl\Integration\**\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\GeneratedCode\**\*.tt;
                    $(ModuleSourceDirectory)\**\DslPackage\ProjectItemTemplates\*.tt;
                    $(ModuleSourceDirectory)\Setup\SoftwareFactorySetup\*.tt;
                    "
                         Exclude="
                    $(ModuleSourceDirectory)\**\Templates\*.tt;
                    ">
        <Generator>TextTemplatingFileGenerator</Generator>
      </rmT4TextTemplates>
      <rmT4TextTemplates Condition="('$(ModuleName)'!='Libraries.SoftwareFactory')"
                         Include="
                    $(ModuleSourceDirectory)\**\*.tt;
                    $(ModuleTestDirectory)\**\*.tt;
                    ">
        <Generator>TextTemplatingFileGenerator</Generator>
      </rmT4TextTemplates>
    </ItemGroup>

    <Message Text="IsDesktopBuild: $(IsDesktopBuild)"/>
    <Message Text="SolutionDirectoryPathForMSBuild4: $(SolutionDirectoryPathForMSBuild4)"/>
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)"/>
    <Message Text="ModuleSourceDirectory: $(ModuleSourceDirectory)"/>
    <Message Text="ModuleTestDirectory: $(ModuleTestDirectory)"/>

    <Message Text="" />
    <Message Text="DSLDirectiveLoadMethod: $(DSLDirectiveLoadMethod)" />
    <Message Text="AderantBuildClientTasksV100Lib-1_0_0_0: $(AderantBuildClientTasksV100Lib-1_0_0_0)"/>
    <Message Text="rmT4AssemblyReferencePaths: $(rmT4AssemblyReferencePaths)"/>
    <Message Text="rmT4TextTemplates: $(rmT4TextTemplates)"/>
  </Target>

  <!--
    ==========================================================================================
        Versioning 
    ==========================================================================================
  -->

  <Target Name="UpdateModuleFileVersion"
          Condition="('$(IsDesktopBuild)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Updating file version in CommonAssemblyInfo.cs"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <CreateItem Include="$(ModuleBuildDirectory)\CommonAssemblyInfo.cs;">
      <Output TaskParameter="Include"
              ItemName="AssemblyInfoFile" />
    </CreateItem>

    <Attrib Files="@(AssemblyInfoFile)"
            ReadOnly="false" />

    <FileUpdate Files="@(AssemblyInfoFile)"
                IgnoreCase="true"
                Multiline="true"
                Singleline="false"
                Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
                ReplacementText="${section1}$(FileVersion)${section2}"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================================================
        Compile - rmTransformTemplates 
    ==========================================================================================================================
  -->
  <PropertyGroup>
    <BuildDependsOn>
      rmTransformTemplates;
    </BuildDependsOn>
    <SolutionFileName Condition="('$(IsCustomBuild)'=='true')">$(SolutionDirectoryPath)$(ModuleName).Custom.sln</SolutionFileName>
    <SolutionFileName Condition="('$(IsCustomBuild)'!='true')">$(SolutionDirectoryPath)$(ModuleName).sln</SolutionFileName>
  </PropertyGroup>
  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOn)">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Building Module $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Message Text="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"/>
    <Message Text="SolutionDirectoryPath = $(SolutionDirectoryPath)"/>

    <MSBuild Condition="'$(PackageWeb)'!='true'"
             Projects="$(SolutionFileName)"
             Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"
             Targets="Build"  />

    <!-- EnableExcludeFilesByExtension prevents Microsoft.Web.Publishing.targets from excluding .tt files -->
    <MSBuild Condition="'$(PackageWeb)'=='true'"
             Projects="$(SolutionFileName)"
             Properties="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild);DeployOnBuild=true;EnableExcludeFilesByExtension=false"
             Targets="Build"  />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================================================
        CreateMSI - target is called to create an MSI
    ==========================================================================================================================
  -->

  <PropertyGroup>
    <PathToDevEnv>$(VsCommonTools)..\IDE</PathToDevEnv>
    <MSILog>$(BinModuleDirectory)MCIBuild.log</MSILog>
  </PropertyGroup>

  <Target Name="CreateMSI"
          DependsOnTargets="Build"
          Condition="('$(CreateMSI)'=='true')">

    <Message Text="Solution to create MSI for [$(SolutionFileName)]"/>
    <Message Text="MSI BuildType [$(BuildFlavor)]"/>
    <Message Text="Devenv path [$(PathToDevEnv)]"/>
    <Message Text="MSI Log [$(MSILog)]"/>

    <!--
        Irritating issue here were as part of the msi creation there are error produced but the MSI is successfully created.
        Because of this error's and exit code are being ignored.
    -->

    <Exec
      ContinueOnError="true"
      IgnoreExitCode="true"
      WorkingDirectory="$(PathToDevEnv)"
      Command='devenv.com &quot;$(SolutionFileName)&quot; /build &quot;$(BuildFlavor)&quot; /out &quot;$(MSILog)&quot;'>
    </Exec>

  </Target>


  <!--
   ==========================================================================================
        Building helpfiles
    ==========================================================================================
  -->
  <ItemGroup>
    <HelpProjectFiles
      Include="$(SolutionDirectoryPath)\Src\*.shfbproj;"/>
  </ItemGroup>

  <Target Name="BuildHelpFiles"
          Condition="('$(BuildHelpFiles)'== 'true')">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Building help file %(HelpProjectFiles.Identity)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Message Text = "Building HelpProjectFile: %(HelpProjectFiles.Identity)"/>

    <MSBuild
      Projects="%(HelpProjectFiles.Identity)"
      Properties="Platform=%(ConfigurationToBuild.PlatformToBuild)"
      Targets="Build"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        Zip Source 
    ==========================================================================================
  -->

  <Target Name="ZipCustomSource"
          Condition="(Exists('$(SolutionDirectoryPath)\$(ModuleName).Custom.sln') and '$(IsCustomBuild)'!='true')"
          >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Zipping Source for $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Customization</ZipFileDirectory>
      <ZipFile>$(ZipFileDirectory)\$(ModuleName).Custom.zip</ZipFile>
      <TempSolutionDirectory>$(SolutionDirectoryPath)\TempTransform</TempSolutionDirectory>
      <TempModuleSourceDirectory>$(SolutionDirectoryPath)\TempTransform\src</TempModuleSourceDirectory>
      <TempModuleBuildDirectory>$(SolutionDirectoryPath)\TempTransform\build</TempModuleBuildDirectory>
      <CustomBuildFilesDirectory>$(SolutionDirectoryPath)\TempTransform\BuildScripts</CustomBuildFilesDirectory>
    </PropertyGroup>

    <Delete
      Files="$(ZipFile)"
      Condition="Exists('$(ZipFile)')" />

    <RemoveDir
      Condition="Exists('$(TempSolutionDirectory)')"
      Directories="$(TempSolutionDirectory)"/>

      <ItemGroup>
          <SourceFilesToCopyForTransform
              Include="$(SolutionDirectoryPath)**\*"
              Exclude="$(SolutionDirectoryPath)**\obj\**;                   
                       $(SolutionDirectoryPath)**\_Resharper*\**;                       
                       $(SolutionDirectoryPath)*ABT\**;                       
                       $(SolutionDirectoryPath)Bin\**\**;
                       $(SolutionDirectoryPath)Test\**\**;
                       $(SolutionDirectoryPath)TestResults\*\**;
                       $(SolutionDirectoryPath)Dependencies\**\**;
                       $(SolutionDirectoryPath)**\*.vssscc;
                       $(SolutionDirectoryPath)**\*.vspscc;" />
        </ItemGroup>

    <!-- Make a copy of the source files for the custom solution transformation and zip -->
    <MakeDir
      Directories="$(TempSolutionDirectory)"/>

    <Copy
      SourceFiles="@(SourceFilesToCopyForTransform)"
      DestinationFiles="@(SourceFilesToCopyForTransform->'$([System.IO.Path]::GetFullPath('$(TempSolutionDirectory)\%(RecursiveDir)%(Filename)%(Extension)'))')" />

      <!-- Read solution file so we can get the project source-->
    <ReadLinesFromFile File="$(TempSolutionDirectory)\$(ModuleName).Custom.sln">
      <Output TaskParameter="Lines"
              ItemName="LinesFromSlnFile"/>
    </ReadLinesFromFile>


    <!--  Extract the Project lines from the custom solution file.
          This will give lines in this format:
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexMatch Input="@(LinesFromSlnFile)"
                Expression="Project\(&quot;.+&quot;\) = &quot;(.+)&quot;, &quot;.+\.csproj">
      <Output ItemName="ProjectLines"
              TaskParameter="Output"/>
    </RegexMatch>
    <Message Text="&#xA;Project lines in custom solution:&#xA;@(ProjectLines, '&#xA;')"/>


    <!--  Remove text before custom project name
          This will leave us with:
          Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexReplace Input="@(ProjectLines)"
                  Expression="Project\(&quot;.+&quot;\) = &quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="SlnProjects"
              TaskParameter="Output" />
    </RegexReplace>


    <!-- Remove text after custom project name
          This will leave us with the project name:
          Aderant.BusinessEntity
    -->
    <RegexReplace Input="@(SlnProjects)"
                  Expression="&quot;, &quot;.+\.csproj&quot;, &quot;.+&quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="CustomProjects"
              TaskParameter="Output" />
    </RegexReplace>
    <Message Text="&#xA;Projects in custom solution:&#xA;@(CustomProjects, '&#xA;')"/>


    <!-- Create property that lists the project folders as an MSBuild include string-->
    <PropertyGroup>
      <ProjectFoldersIncludeString>$(TempModuleSourceDirectory)\@(CustomProjects,'\**\*.*;$(TempModuleSourceDirectory)\')\**\*.*;</ProjectFoldersIncludeString>
    </PropertyGroup>
    <Message Text="&#xA;ProjectFoldersIncludeString = $(ProjectFoldersIncludeString)&#xA;"/>

    <!-- Update the source with the specified transformations file -->
    <SourceTransformationTask
      Condition="($(CustomSolutionTransformsFile) != '')"
      SourcePath="$(TempSolutionDirectory)"
      TransformsDefinitionFile="$(SolutionDirectoryPath)\Build\$(CustomSolutionTransformsFile)"
      />

    <!--Create CommonBuild Dir-->

    <MakeDir
      Directories="$(CustomBuildFilesDirectory)"/>

    <ItemGroup>
      <CommonBuildFiles Include="$(BuildScriptsDirectory)\**\*.*"/>
    </ItemGroup>

    <!--Copy Build scripts to CustomBuildFilesDirectory -->
    <Copy
      SourceFiles="@(CommonBuildFiles)"
      DestinationFolder="$(CustomBuildFilesDirectory)"
        />

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>

      <ZipSourceFiles
        Include="
                      $(TempSolutionDirectory)\**\*.Custom.sln;
                              "/>

      <ZipSourceFiles
        Include="
                              $(ProjectFoldersIncludeString)
                              "
        Exclude="
                      $(TempModuleSourceDirectory)\**\*.sln;
                      $(TempModuleSourceDirectory)\**\*.vssscc;
                      $(TempModuleSourceDirectory)\**\*.vspscc;
                      $(TempModuleSourceDirectory)\**\*.sln.cache;
                      $(TempModuleSourceDirectory)\**\*.vsmdi;
                      $(TempModuleSourceDirectory)\**\*.testrunconfig;
                      $(TempModuleSourceDirectory)\**\*.suo;
                      $(TempModuleSourceDirectory)\**\*.sln.Debug.vsprops;
                      $(TempModuleSourceDirectory)\**\bin\**;
                      $(TempModuleSourceDirectory)\**\obj\**;
                      $(TempModuleSourceDirectory)\**\UnitTest*\**;
                      $(TempModuleSourceDirectory)\**\IntegrationTest*\**;
                          $(TempModuleSourceDirectory)\**\TestResults\**;
                      $(TempModuleSourceDirectory)\**\Release.txt;
                      $(TempModuleSourceDirectory)\**\Debug.txt;
                      $(TempModuleSourceDirectory)\**\_Resharper*\**;
                      $(TempModuleSourceDirectory)\**\*resharper.user;
                    "/>
      <ZipSourceFiles
        Include="
                              $(TempModuleBuildDirectory)\*.*;
                              "
              />
      <ZipSourceFiles
        Include="
                              $(CustomBuildFilesDirectory)\*.*;
                              "
        Exclude="
                    $(CustomBuildFilesDirectory)\**\*.pfx;
                    "
         />
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(TempSolutionDirectory)"
            />

    <RemoveDir
      Directories="$(TempSolutionDirectory)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Unit Test 
    ==========================================================================================
  -->
  <Target Name="RunUnitTests"
          DependsOnTargets="Build"
          Condition="('$(RunTest)'!='false')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Running Unit Tests"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <CreateItem
      Include="$(BinTestDirectory)\%2aUnitTest%2a.dll"
      Exclude="$(BinTestDirectory)\%2aHelpers%2a.dll"
      AdditionalMetadata="TestContainerPrefix=/testcontainer:"
          >
      <Output TaskParameter="Include"
              ItemName="TestAssemblies" />
    </CreateItem>

    <PropertyGroup>
      <UnitTestAssemblies>@(TestAssemblies->'%(TestContainerPrefix)%(FullPath)',' ')</UnitTestAssemblies>
      <ResultsFileSwitch>/resultsfile:$(BinTestDirectory)\UnitTestResults.trx</ResultsFileSwitch>

      <!-- Test Result Publishing -->
      <PublishBuildSwitch>/publishbuild:"$(BuildUri)"</PublishBuildSwitch>
      <ConfigurationSwitch>/flavor:"%(ConfigurationToBuild.FlavorToBuild)"</ConfigurationSwitch> <!-- e.g Debug -->
      <PlatformSwitch>/platform:"%(ConfigurationToBuild.PlatformToBuild)"</PlatformSwitch> <!-- e.g Any CPU -->
      <PublishSwitch>/publish:"$(TeamFoundationServerUrl)"</PublishSwitch>
      <TeamProjectSwitch>/teamproject:"$(TeamProject)"</TeamProjectSwitch>
      <PublishCommand Condition="'$(IsDesktopBuild)' != 'true'">$(PublishSwitch) $(PublishBuildSwitch) $(PlatformSwitch) $(ConfigurationSwitch) $(TeamProjectSwitch)</PublishCommand>
      <PathToMSTest>$(VsCommonTools)..\IDE\MSTest.exe</PathToMSTest>
    </PropertyGroup>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Condition="('$(UnitTestAssemblies)' != '' And '$(RunTestAssembliesSeperately)' == 'true')"
          Command='"$(PathToMSTest)" /nologo /usestderr %(TestAssemblies.TestContainerPrefix)%(TestAssemblies.FullPath) /resultsfile:$(BinTestDirectory)\UnitTestResults_%(TestAssemblies.Filename).trx' />

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Condition="('$(UnitTestAssemblies)' != '' And '$(RunTestAssembliesSeperately)' != 'true')"
          Command='"$(PathToMSTest)" /nologo /usestderr $(UnitTestAssemblies) $(ResultsFileSwitch)' />


    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="CopyToDropOnTestFailure;MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        Create the modules package to be Published
    ==========================================================================================
  -->

  <Target Name="PublishModule"
          DependsOnTargets="RunUnitTests"
          Condition="('$(PublishModule)' == 'true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Create Package to publish"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <Message Condition="('$(IsDesktopBuild)'=='true')"
             Text="Create package to publish" />
    <Message Text="## Publish as version $(FileVersion)" />

    <MSBuild Projects="$(SolutionFileName)"
             Properties="ApplicationVersion=$(FileVersion)"
             Targets="Publish"  />

    <Message Condition="('$(IsDesktopBuild)'=='true')"
             Text="Zip package" />

    <PropertyGroup>
      <ClickOnceZipFileDirectory>$(BinModuleDirectory)\$(ModuleName).ClickOnce</ClickOnceZipFileDirectory>
      <ClickOnceZipFile>$(ClickOnceZipFileDirectory)\ClickOnce.zip</ClickOnceZipFile>
      <PublishDirectory>$(BinModuleDirectory)\app.publish</PublishDirectory>
    </PropertyGroup>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <ZipSourceFiles
        Include="$(PublishDirectory)\**; "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ClickOnceZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ClickOnceZipFile)"
      WorkingDirectory="$(PublishDirectory)"
            />

    <RemoveDir Directories="$(PublishDirectory)"/>

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>


  <!--
    ==========================================================================================
        Zip Sample Module 
    ==========================================================================================
  -->

  <Target Name="ZipTemplateModule"
          Condition="('$(IsTemplateModule)'=='true')"
          >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Zipping Source for $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)\Workflow\Templates</ZipFileDirectory>
      <ZipFile>$(ZipFileDirectory)\$(ModuleName).Template.zip</ZipFile>
    </PropertyGroup>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <ZipSourceFiles
        Include="
            $(SolutionDirectoryPath)\**;
        "
        Exclude="
        $(BinTestDirectory)\**;
        $(BinModuleDirectory)\**;                
        $(ModuleBuildDirectory)\**;
        $(ModuleSourceDirectory)\**\*.csproj.user;        
        $(ModuleSourceDirectory)\**\obj\**;
        $(ModuleSourceDirectory)\**\bin\**;
        $(SolutionDirectoryPath)\$(ModuleName).sln;
        $(SolutionDirectoryPath)\CommonBuild\**;
        $(SolutionDirectoryPath)\Dependencies\**;
        $(SolutionDirectoryPath)\**\*.vssscc;
        $(SolutionDirectoryPath)\**\*.vspscc;        
        $(SolutionDirectoryPath)\**\*.sln.cache;
        $(SolutionDirectoryPath)\**\*.vsmdi;        
        $(SolutionDirectoryPath)\**\*.testrunconfig;
        $(SolutionDirectoryPath)\**\*.suo;
        $(SolutionDirectoryPath)\**\*.sln.Debug.vsprops;
        $(SolutionDirectoryPath)\**\TestResults\**;
        $(SolutionDirectoryPath)\**\Release.txt;
        $(SolutionDirectoryPath)\**\Debug.txt;
        $(SolutionDirectoryPath)\**\_Resharper*\**;
        $(SolutionDirectoryPath)\**\*resharper.user;
        "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(SolutionDirectoryPath)"
            />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Copy Build to Drop Location for unit test failure
    ==========================================================================================
  -->
  <Target Name="CopyToDropOnTestFailure"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Copy Output to $(DropLocation)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <!--We have differing ways of determining the drop location depending on the type of build. 
        The simplest way was to have a condition on whether we are build all modules of a single module.-->

    <Exec Condition="('$(BuildAll)'=='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1" -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation)\$(ModuleName)\$(AssemblyVersion) -assemblyFileVersion $(FileVersion) -copyTestDirectory' />

    <Exec Condition="('$(BuildAll)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1"  -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation) -assemblyFileVersion $(FileVersion) -copyTestDirectory' />

      <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        Copy Build to Drop Location 
    ==========================================================================================
  -->
    <Target Name="CopyToDrop"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="Copy Output to $(DropLocation)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <!--We have differing ways of determining the drop location depending on the type of build. 
        The simplest way was to have a condition on whether we are build all modules of a single module.-->

    <Exec Condition="('$(BuildAll)'=='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1" -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation)\$(ModuleName)\$(AssemblyVersion) -assemblyFileVersion $(FileVersion)' />

    <Exec Condition="('$(BuildAll)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1"  -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation) -assemblyFileVersion $(FileVersion)' />

    <!-- Gather any files created as part of a Web project build. These are typically zip files -->
    <ItemGroup>
        <WebPackageFiles Include="$(SolutionDirectoryPath)Src\**\bin\_PublishedWebsites\**\*.*" />
    </ItemGroup>
    <Message Text="WebPackageFiles: @(WebPackageFiles)" />
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)\Src\**\bin\_PublishedWebsites\**\*.*" />

    <Copy Condition="('$(PackageWeb)'=='true' And '$(BuildAll)'=='true')"
          SourceFiles="@(WebPackageFiles)"
          DestinationFolder="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\$(FileVersion)\Bin\Module" />

    <Copy Condition="('$(PackageWeb)'=='true' And '$(BuildAll)'!='true')"
          SourceFiles="@(WebPackageFiles)"
          DestinationFolder="$(DropLocation)\$(FileVersion)\Bin\Module" />

        <!--At the moment we check for successful builds in the build logs where there are 0 Error(s). The BuildAll only has one build log
        so if we get this far we can assume the build is successfull so we create a dummy BuildLog   
    -->
    <WriteLinesToFile
      Condition ="('$(BuildAll)'=='true')"
      File="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\$(FileVersion)\BuildLog.txt"
      Lines="Build succeeded via BuildAll - 0 Error(s)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        NDepend post build analysis
    ==========================================================================================
  -->
  <PropertyGroup>
    <NDependPath>c:\Program Files (x86)\NDepend</NDependPath>
    <NDependOutputDir>$(SolutionDirectoryPath)\bin\NDependOut</NDependOutputDir>
    <NDependWarn>0</NDependWarn>
  </PropertyGroup>

  <Target Name="NDepend"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      Message="NDepend"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
              >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                  />
    </BuildStep>

    <Message Text="*** NDepend " />
    <Message Text="NDependConsoleExePath : $(NDependPath)" />
    <Message Text="ProjectFilePath       : $(BuildScriptsDirectory)NDependFramework.xml" />

    <!-- Lets first remove the ld NDependOut directory -->
    <RemoveDir Directories="$(SolutionDirectoryPath)\NDependOut" />

    <NDependTask
      NDependConsoleExePath="$(NDependPath)"
      ProjectFilePath="$(BuildScriptsDirectory)NDependFramework.xml"
      OutDir="$(NDependOutputDir)" />

    <!-- Scan the NDepend Report Files to see if a braking change has been identified -->

    <XmlRead ContinueOnError="True"
             XmlFileName="$(SolutionDirectoryPath)\NDependout\CQLResult.xml"
             XPath="string(count(//Group[@Status='Warn']))">
      <Output TaskParameter="Value"
              PropertyName="NDependWarn" />
    </XmlRead>


    <!-- If braking change identified then need to mark build step as Failed -->

    <Error Text="NDepend Breaking Change"
           Condition="$(NDependWarn) &gt; 0"/>

    <BuildStep
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->

  <Target Name="MarkBuildStepAsFailed">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Failed"
            />
    <SetBuildProperties
      Condition="('$(IsDesktopBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      CompilationStatus="Failed"
            />
    <Error Condition="('$(IsDesktopBuild)'=='true')"/>
  </Target>

</Project>