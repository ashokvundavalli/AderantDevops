<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="4.0">

  <!-- 
    =========================================================================================================
        Team Build Script        
        
        Guidelines:            
            * Retain structure and formatting for easier merge between Team Build project scripts 
            * Tabs converted to 4 spaces for easier reading outside of VS.
    =========================================================================================================
    -->

  <ProjectExtensions>
    <ProjectFileVersion>3</ProjectFileVersion>
  </ProjectExtensions>

  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\TeamBuild\Microsoft.TeamFoundation.Build.targets" Condition="'$(TeamBuildVersion)' == ''" />

  <PropertyGroup>
    <RunTest Condition="'$(RunTest)' == ''">true</RunTest>
    <RunTest Condition="'$(IsCustomBuild)' == 'true'">false</RunTest>

    <RunCodeAnalysis>$(RunCodeAnalysisSetting)</RunCodeAnalysis>
    <RunCodeAnalysis Condition="'$(IsCustomBuild)' == 'true'">false</RunCodeAnalysis>

    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
    <BaseDropDirectory>$(DropLocation)</BaseDropDirectory>
    <!--Server Build for all modules-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\..\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'=='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Server build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionRoot)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'!='true')">$(SolutionDirectoryPath)Build\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Desktop build for a module-->
    <SolutionDirectoryPath Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionRoot)\$(ModuleName)\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(BuildAll)'!='true') And ('$(IsDesktopBuild)'=='true')">$(SolutionDirectoryPath)..\Build.Infrastructure\Src\Build\</BuildScriptsDirectory>
    <!--Custom build for a module-->
    <SolutionDirectoryPath Condition="('$(IsCustomBuild)' == 'true')">$(MSBuildProjectDirectory)\..\</SolutionDirectoryPath>
    <BuildScriptsDirectory Condition="('$(IsCustomBuild)' == 'true')">$(SolutionDirectoryPath)BuildScripts\</BuildScriptsDirectory>

    <BuildScriptsDirectory>$([System.IO.Path]::GetFullPath('$(BuildScriptsDirectory)'))</BuildScriptsDirectory>
    <SolutionDirectoryPath>$([System.IO.Path]::GetFullPath('$(SolutionDirectoryPath)'))</SolutionDirectoryPath>

    <!-- Detect VS 2010 or 2012 -->
    <VsCommonTools Condition="'$(VS100COMNTOOLS)' != ''">$(VS100COMNTOOLS)</VsCommonTools>

    <!-- 
      If we have VisualStudioVersion specified then we won't overwrite the tools version even if a newer version is available 
      This is used by CRM builds which need to build MSIs under the Visual Studio 2010 as the project type they use is not supported under 2012+.
    -->
    <VsCommonTools Condition="'$(VS110COMNTOOLS)' != '' And ('$(VisualStudioVersion)' != '10.0' Or '$(IsDesktopBuild)' == 'True')">$(VS120COMNTOOLS)</VsCommonTools>

    <rmBCItemTransformTemplatesEnabled>$(T4TransformEnabled)</rmBCItemTransformTemplatesEnabled>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <ModuleSourceDirectory>$(SolutionDirectoryPath)src\</ModuleSourceDirectory>
    <ModuleTestDirectory>$(SolutionDirectoryPath)test\</ModuleTestDirectory>
    <ModuleBuildDirectory>$(SolutionDirectoryPath)build\</ModuleBuildDirectory>
    <BuildToolsDirectory>$(MSBuildThisFileDirectory)..\Build.Tools\</BuildToolsDirectory>
    <SignApplications Condition="'$(SignApplications)' == '' And Exists('$(MSBuildThisFileDirectory)\Aderant.CodeSigning.targets')">true</SignApplications>
  </PropertyGroup>

  <Import Project="RM.TransformTemplates.Targets" />
  <Import Project="Aderant.CodeSigning.targets" Condition="'$(SignApplications)' == 'true'" />
  <Import Project="Aderant.Product.targets" Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask
    AssemblyFile="$(MSBuildExtensionsPath)\NDepend\NDepend.Build.MSBuild.dll"
    TaskName="NDependTask" />

  <!-- The Zip Custom Source inline task -->
  <UsingTask
    TaskName="SourceTransformationTask"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup >
      <SourcePath ParameterType="System.String" Required="true"/>
      <TransformsDefinitionFile ParameterType="System.String" Required="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core"/>
      <Reference Include="System.Xml"/>
      <Reference Include="System.Xml.Linq"/>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Linq"/>
      <Using Namespace="System.Xml.Linq"/>
      <Using Namespace="System.Text.RegularExpressions"/>
      <Code>
        <![CDATA[
Log.LogMessage(string.Format("Starting transformation of source at {0} using {1}", SourcePath, TransformsDefinitionFile));

// Get the list of transformations
if(!File.Exists(TransformsDefinitionFile)){
  Log.LogError(string.Format("The transformations file {0} does not exist", TransformsDefinitionFile));
}

XDocument transformsDoc = XDocument.Load(TransformsDefinitionFile);
var replacements = from replacementDefinition in transformsDoc.Root.Descendants("Replacement")
                   from file in Directory.GetFiles(SourcePath, replacementDefinition.Attribute("FileFilter").Value, SearchOption.AllDirectories)
                   select new {
                    FilePath = file,
                    Regex = new Regex(replacementDefinition.Attribute("Pattern").Value),
                    ReplaceWith = replacementDefinition.Attribute("ReplaceWith").Value
                   };

Log.LogMessage(string.Format("Starting {0} replacement tasks", replacements.Count()));

foreach(var replacement in replacements){
  string fileContent = File.ReadAllText(replacement.FilePath);
  fileContent = replacement.Regex.Replace(fileContent, replacement.ReplaceWith);
  File.WriteAllText(replacement.FilePath, fileContent);
}


]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Gets the platform of an assembly (e.g. x86, x64 or AnyCPU) -->
  <UsingTask TaskName="GetAssemblyPlatform"
             AssemblyFile="$(BuildToolsDirectory)\Aderant.Build.dll"
             Condition="'$(IsCustomBuild)' != 'true'" />
  <!-- 
    ==========================================================================================
        Build Configurations
    ==========================================================================================
    -->
  <ItemGroup>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Release'"
      Include="Release|Any CPU">
      <FlavorToBuild>Release</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)'=='Debug'"
      Include="Debug|Any CPU">
      <FlavorToBuild>Debug</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>

  <!--
    ==========================================================================================
        Team / Desktop Build Sequences - Begin
    ==========================================================================================
  -->

  <PropertyGroup>
    <OnBuildBreakDependsOn>
      BeforeOnBuildBreak;
      GetChangeSetsOnBuildBreak;
      BeforeDropBuild;
      DropBuild;
      AfterOnBuildBreak;
    </OnBuildBreakDependsOn>
  </PropertyGroup>

  <Target
    Name="OnBuildBreak"
    Condition="('$(IsDesktopBuild)'!='true')"
    DependsOnTargets="$(OnBuildBreakDependsOn)">
  </Target>

  <Target Name="AfterCompile">
    <CallTarget Targets="ModuleBuild" />
  </Target>

  <!--
    ==========================================================================================
        Solutions To Build in the correct build order 
    ==========================================================================================
  -->
  <Target Name="ModuleBuild">
    <CallTarget Targets="PrepareBuildTools" />
    <CallTarget Targets="CleanBin" />
    <CallTarget Targets="GetModuleDependencies" />
    <CallTarget Targets="ZipCustomSource" />
    <CallTarget Targets="SetBuildNumbers" />
    <CallTarget Targets="UpdateModuleFileVersion"/>
    <CallTarget Targets="Build" />
    <CallTarget Targets="CreateMSI" />
    <CallTarget Targets="ZipTemplateModule" />
    <CallTarget Targets="NDepend" Condition="('$(BuildAll)'!='true')" />
    <CallTarget Targets="RunUnitTests" />
    <CallTarget Targets="PublishModule" />
    <CallTarget Targets="Testing" />
    <CallTarget Targets="PostBuild" Condition="('$(PostBuild)'=='true')" />
    <CallTarget Targets="SignApplications" Condition="'$(SignApplications)' == 'true' And '$(IsCustomBuild)' != 'true'" />
    <CallTarget Targets="CopyToDrop" />
  </Target>

  <Target Name="Testing">
    <Message Text="Solution Root = $(SolutionRoot)" />
    <Message Text="Solution Directory = $(SolutionDirectoryPath)" />
    <Message Text="Build Scripts Directory = $(BuildScriptsDirectory) " />
    <Message Text="Module Name = $(ModuleName) " />
    <Message Text="Drop Location = $(DropLocation) " />
    <Message Text="Create MSI? = $(CreateMSI) " />
    <Message Text="BuildType MSI? = $(BuildFlavor) " />
    <Message Text="Visual Studio Tools Path: $(VsCommonTools)" />
  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->

  <Target Name="SetBuildNumbers"
          Condition="'$(IsDesktopBuild)' != 'true'">
    <Version BuildType="Automatic"
             RevisionType="Automatic"
             Major="$(VersionMajor)"
             Minor="$(VersionMinor)" >
      <Output TaskParameter="Major"
              PropertyName="Major" />
      <Output TaskParameter="Minor"
              PropertyName="Minor" />
      <Output TaskParameter="Build"
              PropertyName="Build" />
      <Output TaskParameter="Revision"
              PropertyName="Revision" />
    </Version>

    <PropertyGroup>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
      <AssemblyVersion>$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)</AssemblyVersion>
    </PropertyGroup>

    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!--
  ==========================================================================================
  Override drop location
  ==========================================================================================
  -->
  <Target Name="BuildNumberOverrideTarget"
          DependsOnTargets="SetBuildNumbers">
    <PropertyGroup>
      <!-- 
           For a module build, append the name of the module.
           If two builds are started at the same time they get the same BuildNumber which breaks the test run as we don't know which build to publish against
      -->
      <BuildNumber Condition="'$(BuildAll)' != 'true'">$(FileVersion) ($(ModuleName))</BuildNumber>
      <BuildNumber Condition="'$(BuildAll)' == 'true'">$(FileVersion)</BuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="BeforeEndToEndIteration"
          DependsOnTargets="SetBuildNumbers">
    <CreateProperty Value="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\" >
      <Output TaskParameter="Value"
              PropertyName="DropLocation"/>
    </CreateProperty>
  </Target>

  <Target Name="BeforeDropBuild"
          Condition="'$(BuildAll)' != 'true' And '$(IsDesktopBuild)' != 'true'" BeforeTargets="DropBuild">

    <RemoveDir Condition="'$(DropLocation)' != ''"
               Directories="$(DropLocation)\$(BuildNumber)"
               ContinueOnError="true" />

    <!-- Set the drop location back to the FileVersion so the log file goes to the right place -->
    <UpdateBuildNumberDropLocation
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      BuildNumber="$(BuildNumber)"
      DropLocation="$(DropLocation)\$(FileVersion)" />
  </Target>


  <!--
    ==========================================================================================
        PrepareBuildTools
        Builds the Build.Infrastructure assemblies and tools required by the build process
    ==========================================================================================
  -->
  <Target Name="PrepareBuildTools" Condition="'$(IsDesktopBuild)' == 'true' and '$(IsCustomBuild)' != 'true'">
    <ItemGroup>
      <Projects Include="$(BuildScriptsDirectory)..\Sources\FxCopCmd\FxCopCmd.csproj"></Projects>
      <Projects Include="$(BuildScriptsDirectory)..\Sources\Aderant.Build\Aderant.Build.csproj"></Projects>
    </ItemGroup>

    <MSBuild
      Projects="@(Projects)"
      BuildInParallel="true"
      UnloadProjectsOnCompletion="true" />
  </Target>
  

  <!--
    ==========================================================================================
        Clean
    ==========================================================================================
  -->
  <Target Name="CleanBin">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="$(ModuleName) - Clean Module Bin"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <RemoveDir Directories="$(ModuleBuildDirectory)\TestResults" />

    <ItemGroup>
      <Files Include="$(SolutionDirectoryPath)Bin\**\*.trx" />
      <Files Condition="'$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false'"
             Include="$(SolutionDirectoryPath)Bin\**\*" />
      <Files Condition="'$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false'"
             Include="$(SolutionDirectoryPath)src\**\obj\**\*" />
    </ItemGroup>

    <ItemGroup>
      <!-- Must trim trailing slash as GetDirectories does not return results with trailing slashes -->
      <Folders Condition="Exists('$(SolutionDirectoryPath)Bin\') And ('$(CleanBin)' != '' Or '$(IsDesktopBuild)' == 'false')"
               Include="$([System.IO.Directory]::GetDirectories('$(SolutionDirectoryPath)Bin\', '*', System.IO.SearchOption.AllDirectories))"
               Exclude="$(BinTestDirectory.TrimEnd('\'));$(BinModuleDirectory.TrimEnd('\'))" />
    </ItemGroup>

    <Message Text="Cleaning module bin: $(CleanBin)" />

    <Delete Files="@(Files)" />
    <RemoveDir Directories="@(Folders)" />

    <MakeDir Directories="$(BinModuleDirectory)" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================
        Get Module Dependencies
    ==========================================================================================
  -->
  <Target Name ="GetModuleDependencies"
          Condition="('$(DropLocation)'!='')">
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Getting Module Dependencies"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)LoadDependencies.ps1" -modulesRootPath $(SolutionDirectoryPath) -moduleName $(ModuleName) -dropPath $(BaseDropDirectory) -buildScriptsDirectory $(BuildScriptsDirectory)'>
    </Exec>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!-- 
    ==========================================================================================
    T4 Template Transformation
    ========================================================================================== 
  -->
  <Target Name="rmBeforeTransformTemplates">
    <PropertyGroup>
      <rmT4AssemblyReferencePaths>$(SolutionDirectoryPath)\Dependencies</rmT4AssemblyReferencePaths>
      <rmT4AssemblyReferencePaths Condition="Exists('$(OutDir)')">$(rmT4AssemblyReferencePaths);$(OutDir);</rmT4AssemblyReferencePaths>
    </PropertyGroup>

    <ItemGroup>
      <rmT4TextTemplates Condition="('$(ModuleName)' != 'Libraries.SoftwareFactory')"
                         Include="$(ModuleSourceDirectory)\**\*.tt;$(ModuleTestDirectory)\**\*.tt;"
                         Exclude="$(ModuleSourceDirectory)\**\__*.tt">
        <Generator>TextTemplatingFileGenerator</Generator>
      </rmT4TextTemplates>
    </ItemGroup>

    <Message Text="IsDesktopBuild: $(IsDesktopBuild)" />
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)" />
    <Message Text="ModuleSourceDirectory: $(ModuleSourceDirectory)" />
    <Message Text="ModuleTestDirectory: $(ModuleTestDirectory)" />

    <Message Text="" />
    <Message Text="DSLDirectiveLoadMethod: $(DSLDirectiveLoadMethod)" />
    <Message Text="AderantBuildClientTasksV100Lib-1_0_0_0: $(AderantBuildClientTasksV100Lib-1_0_0_0)" />
    <Message Text="rmT4AssemblyReferencePaths: $(rmT4AssemblyReferencePaths)" />
    <Message Text="rmT4TextTemplates: @(rmT4TextTemplates)" />
  </Target>

  <!--
    ==========================================================================================
        Versioning 
    ==========================================================================================
  -->
  <Target Name="UpdateModuleFileVersion"
          Condition="('$(IsDesktopBuild)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Updating file version in CommonAssemblyInfo.cs"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <CreateItem Include="$(ModuleBuildDirectory)\CommonAssemblyInfo.cs;">
      <Output TaskParameter="Include"
              ItemName="AssemblyInfoFile" />
    </CreateItem>

    <Attrib Files="@(AssemblyInfoFile)"
            ReadOnly="false" />

    <FileUpdate Files="@(AssemblyInfoFile)"
                IgnoreCase="true"
                Multiline="true"
                Singleline="false"
                Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
                ReplacementText="${section1}$(FileVersion)${section2}"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================================================
        Compile - rmTransformTemplates 
    ==========================================================================================================================
  -->
  <PropertyGroup>
    <BuildDependsOn>
      rmTransformTemplates;
    </BuildDependsOn>
    <SolutionFileName Condition="('$(IsCustomBuild)'=='true')">$(SolutionDirectoryPath)$(ModuleName).Custom.sln</SolutionFileName>
    <SolutionFileName Condition="('$(IsCustomBuild)'!='true')">$(SolutionDirectoryPath)$(ModuleName).sln</SolutionFileName>
  </PropertyGroup>

  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOn)">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Building Module $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"/>
    </BuildStep>

    <Message Text="Starting build for: $(ModuleName)"/>
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)" />
    <!--<Message Text="Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"/>-->

    <ItemGroup>
      <!-- Isolate projects with COM references to prevent them from including COM typelibs in the MSBuild process -->
      <IsolatedProjects Include="Applications.Marketing" />
      <IsolatedProjects Include="Installs.Marketing" />
      <IsolatedProjects Include="Libraries.Time" />
      <IsolatedProjects Include="Applications.Collection" />
      <IsolatedProjects Include="Applications.PrebillEditor" />
    </ItemGroup>

    <PropertyGroup>
      <CodeAnalysisTarget Condition="'$(IsCustomBuild)' != 'true'">$(MSBuildThisFileDirectory)Aderant.CodeAnalysis.targets</CodeAnalysisTarget>
      <BuildProperties>Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild);CodeAnalysisTargets=$(CodeAnalysisTarget);$(TeamBuildProperties)</BuildProperties>

      <!-- Determine if we can build in process -->
      <RunInNewProcess Condition="'$(RunInNewProcess)' == '' And '%(IsolatedProjects.Identity)' == '$(ModuleName)' And '$(IsDesktopBuild)' == 'false'">true</RunInNewProcess>
    </PropertyGroup>

    <!-- Start a new MSBuild process to build modules which use COM dependencies TFS #103474 -->
    <Message Text="Starting new MSBuild process for build" Condition="'$(RunInNewProcess)' == 'true'" />
    <Exec Condition="'$(RunInNewProcess)' == 'true' And '$(IsolatedBuild)' != 'true'"
          ConsoleToMSBuild="true"
          Command='"$(MSBuildToolsPath)\MSBuild.exe" "$(SolutionFileName)" "/p:Configuration=%(ConfigurationToBuild.FlavorToBuild);Platform=%(ConfigurationToBuild.PlatformToBuild)"' />

    <!-- For web projects we want to copy in a special target file that controls the packaging steps -->
    <ItemGroup>
      <Projects Include="$(SolutionDirectoryPath)\Src\**\*.csproj" />
    </ItemGroup>

    <PropertyGroup>
      <_ContainsWebProject Condition="$([System.String]::new('%(Projects.Filename)').Contains('Web.'))">true</_ContainsWebProject>

      <ProjectToolsVersion>4.0</ProjectToolsVersion>
      <ProjectToolsVersion Condition="'$(PackageWeb)' == 'true'">12.0</ProjectToolsVersion>

      <BuildProperties  Condition="'$(PackageWeb)' != 'true'">$(BuildProperties);VisualStudioVersion=11.0</BuildProperties>
    </PropertyGroup>

    <Copy Condition="$(ModuleName.Contains('Web.')) Or '$(PackageWeb)' == 'true' Or '$(_ContainsWebProject)' == 'true'"
          SourceFiles="$(MSBuildThisFileDirectory)\Aderant.wpp.targets"
          DestinationFiles="%(Projects.RelativeDir)\Aderant.wpp.targets"
          SkipUnchangedFiles="true"
          ContinueOnError="true" />

    <MSBuild Condition="'$(RunInNewProcess)' != 'true'"
             Projects="$(SolutionFileName)"
             Properties="$(BuildProperties)"
             Targets="Build"
             ToolsVersion="$(ProjectToolsVersion)">
      <Output ItemName="BuildOutput" 
              TaskParameter="TargetOutputs" />
    </MSBuild>

    <ItemGroup>
      <!-- If an isolated build we need to populate the BuildOutput item group with the bin folder contents -->
      <BuildOutput Condition="'$(RunInNewProcess)' == 'true'"
                   Include="$(BinModuleDirectory)**\*.dll;$(BinModuleDirectory)**\*.exe" />
    </ItemGroup>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================================================
        CreateMSI - target is called to create an MSI
    ==========================================================================================================================
  -->

  <PropertyGroup>
    <PathToDevEnv>$(VsCommonTools)..\IDE</PathToDevEnv>
    <MSILog>$(BinModuleDirectory)MCIBuild.log</MSILog>
  </PropertyGroup>

  <Target Name="CreateMSI"
          DependsOnTargets="Build"
          Condition="('$(CreateMSI)'=='true')">

    <Message Text="Solution to create MSI for [$(SolutionFileName)]"/>
    <Message Text="MSI BuildType [$(BuildFlavor)]"/>
    <Message Text="Devenv path [$(PathToDevEnv)]"/>
    <Message Text="MSI Log [$(MSILog)]"/>

    <!--
        Irritating issue here were as part of the msi creation there are error produced but the MSI is successfully created.
        Because of this error's and exit code are being ignored.
    -->

    <Exec
      ContinueOnError="true"
      IgnoreExitCode="true"
      WorkingDirectory="$(PathToDevEnv)"
      Command='devenv.com &quot;$(SolutionFileName)&quot; /build &quot;$(BuildFlavor)&quot; /out &quot;$(MSILog)&quot;'>
    </Exec>

  </Target>


  <!--
    ==========================================================================================
        Zip Source 
    ==========================================================================================
  -->

  <Target Name="ZipCustomSource"
          Condition="(Exists('$(SolutionDirectoryPath)\$(ModuleName).Custom.sln') and '$(IsCustomBuild)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Zipping Source for $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Customization</ZipFileDirectory>
      <ZipFile>$(ZipFileDirectory)\$(ModuleName).Custom.zip</ZipFile>
      <TempSolutionDirectory>$(SolutionDirectoryPath)\TempTransform</TempSolutionDirectory>
      <TempModuleSourceDirectory>$(SolutionDirectoryPath)\TempTransform\src</TempModuleSourceDirectory>
      <TempModuleBuildDirectory>$(SolutionDirectoryPath)\TempTransform\build</TempModuleBuildDirectory>
      <CustomBuildFilesDirectory>$(SolutionDirectoryPath)\TempTransform\BuildScripts</CustomBuildFilesDirectory>
    </PropertyGroup>

    <Delete
      Files="$(ZipFile)"
      Condition="Exists('$(ZipFile)')" />

    <RemoveDir
      Condition="Exists('$(TempSolutionDirectory)')"
      Directories="$(TempSolutionDirectory)"/>

    <ItemGroup>
      <SourceFilesToCopyForTransform
          Include="$(SolutionDirectoryPath)**\*"
          Exclude="$(SolutionDirectoryPath)**\obj\**;                   
                       $(SolutionDirectoryPath)**\_Resharper*\**;                       
                       $(SolutionDirectoryPath)*ABT\**;                       
                       $(SolutionDirectoryPath)Bin\**\**;
                       $(SolutionDirectoryPath)Test\**\**;
                       $(SolutionDirectoryPath)IntegrationTest*\**;
                       $(SolutionDirectoryPath)UnitTest*\**;
                       $(SolutionDirectoryPath)TestResults\**\**;
                       $(SolutionDirectoryPath)Dependencies\**\**;
                       $(SolutionDirectoryPath)**\*.vssscc;
                       $(SolutionDirectoryPath)**\*.vspscc;
                       $(SolutionDirectoryPath)**\*.DotSettings;" />
    </ItemGroup>

    <!-- Make a copy of the source files for the custom solution transformation and zip -->
    <MakeDir
      Directories="$(TempSolutionDirectory)"/>

    <Copy
      SourceFiles="@(SourceFilesToCopyForTransform)"
      DestinationFiles="@(SourceFilesToCopyForTransform->'$([System.IO.Path]::GetFullPath('$(TempSolutionDirectory)\%(RecursiveDir)%(Filename)%(Extension)'))')" />

    <!-- Read solution file so we can get the project source-->
    <ReadLinesFromFile File="$(TempSolutionDirectory)\$(ModuleName).Custom.sln">
      <Output TaskParameter="Lines"
              ItemName="LinesFromSlnFile"/>
    </ReadLinesFromFile>


    <!--  Extract the Project lines from the custom solution file.
          This will give lines in this format:
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexMatch Input="@(LinesFromSlnFile)"
                Expression="Project\(&quot;.+&quot;\) = &quot;(.+)&quot;, &quot;.+\.csproj">
      <Output ItemName="ProjectLines"
              TaskParameter="Output"/>
    </RegexMatch>
    <Message Text="&#xA;Project lines in custom solution:&#xA;@(ProjectLines, '&#xA;')"/>


    <!--  Remove text before custom project name
          This will leave us with:
          Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexReplace Input="@(ProjectLines)"
                  Expression="Project\(&quot;.+&quot;\) = &quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="SlnProjects"
              TaskParameter="Output" />
    </RegexReplace>


    <!-- Remove text after custom project name
          This will leave us with the project name:
          Aderant.BusinessEntity
    -->
    <RegexReplace Input="@(SlnProjects)"
                  Expression="&quot;, &quot;.+\.csproj&quot;, &quot;.+&quot;"
                  Replacement=""
                  Count="1">
      <Output ItemName ="CustomProjects"
              TaskParameter="Output" />
    </RegexReplace>
    <Message Text="&#xA;Projects in custom solution:&#xA;@(CustomProjects, '&#xA;')"/>


    <!-- Create property that lists the project folders as an MSBuild include string-->
    <PropertyGroup>
      <ProjectFoldersIncludeString>$(TempModuleSourceDirectory)\@(CustomProjects,'\**\*.*;$(TempModuleSourceDirectory)\')\**\*.*;</ProjectFoldersIncludeString>
    </PropertyGroup>
    <Message Text="&#xA;ProjectFoldersIncludeString = $(ProjectFoldersIncludeString)&#xA;"/>

    <!-- Update the source with the specified transformations file -->
    <SourceTransformationTask
      Condition="($(CustomSolutionTransformsFile) != '')"
      SourcePath="$(TempSolutionDirectory)"
      TransformsDefinitionFile="$(SolutionDirectoryPath)\Build\$(CustomSolutionTransformsFile)"
      />

    <!--Create CommonBuild Dir-->

    <MakeDir
      Directories="$(CustomBuildFilesDirectory)"/>

    <ItemGroup>
      <CommonBuildFiles Include="$(BuildScriptsDirectory)\**\*.*"/>
    </ItemGroup>

    <!--Copy Build scripts to CustomBuildFilesDirectory -->
    <Copy
      SourceFiles="@(CommonBuildFiles)"
      DestinationFolder="$(CustomBuildFilesDirectory)"
        />

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>

      <ZipSourceFiles
        Include="$(TempSolutionDirectory)\**\*.Custom.sln;"/>

      <ZipSourceFiles
        Include="$(ProjectFoldersIncludeString)"
        Exclude="$(TempModuleSourceDirectory)\**\*.sln;
                 $(TempModuleSourceDirectory)\**\*.vssscc;
                 $(TempModuleSourceDirectory)\**\*.vspscc;
                 $(TempModuleSourceDirectory)\**\*.sln.cache;
                 $(TempModuleSourceDirectory)\**\*.vsmdi;
                 $(TempModuleSourceDirectory)\**\*.testrunconfig;
                 $(TempModuleSourceDirectory)\**\*.suo;
                 $(TempModuleSourceDirectory)\**\*.sln.Debug.vsprops;
                 $(TempModuleSourceDirectory)\**\bin\**;
                 $(TempModuleSourceDirectory)\**\obj\**;
                 $(TempModuleSourceDirectory)\**\UnitTest*\**;
                 $(TempModuleSourceDirectory)\**\IntegrationTest*\**;
                 $(TempModuleSourceDirectory)\**\TestResults\**;
                 $(TempModuleSourceDirectory)\**\Release.txt;
                 $(TempModuleSourceDirectory)\**\Debug.txt;
                 $(TempModuleSourceDirectory)\**\_Resharper*\**;
                 $(TempModuleSourceDirectory)\**\*resharper.user;
                 $(TempModuleSourceDirectory)**\*.DotSettings;" />
      <ZipSourceFiles
        Include="$(TempModuleBuildDirectory)\*.*;" />
      <ZipSourceFiles
        Include="$(CustomBuildFilesDirectory)\*.*;"
        Exclude="$(CustomBuildFilesDirectory)\**\*.pfx; $(CustomBuildFilesDirectory)\**\Aderant.CodeSigning*; "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(TempSolutionDirectory)"
            />

    <RemoveDir
      Directories="$(TempSolutionDirectory)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Unit Test 
    ==========================================================================================
  -->
  <Target Name="RunUnitTests"
          DependsOnTargets="Build"
          Condition="('$(RunTest)'!='false') And ('$(IsCustomBuild)'!='true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Running Unit Tests"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <CreateItem
      Include="$(BinTestDirectory)\%2aUnitTest%2a.dll"
      Exclude="$(BinTestDirectory)\%2aHelpers%2a.dll">
      <Output TaskParameter="Include"
              ItemName="TestAssemblies" />
    </CreateItem>

    <GetAssemblyPlatform Assemblies="@(BuildOutput)">
      <Output ItemName="AssemblyList" TaskParameter="Assemblies" />
      <Output PropertyName="MustRun32Bit" TaskParameter="MustRun32Bit" />
    </GetAssemblyPlatform>

    <PropertyGroup>
      <UseMsTest>false</UseMsTest>
      <UseMsTest Condition="'$(ModuleName.StartsWith(`Web`))' == 'true'">true</UseMsTest>
      <UnitTestAssemblies>@(TestAssemblies->'%(FullPath)',' ')</UnitTestAssemblies>

      <!-- VSTest Setup -->
      <VsTestDirectory>$(VsCommonTools)..\IDE\CommonExtensions\Microsoft\TestWindow</VsTestDirectory>
      <PathToTestTool>$(VsTestDirectory)\vstest.console.exe</PathToTestTool>
      <PathToTfsLogger>$(VsTestDirectory)\Extensions\Microsoft.VisualStudio.TestPlatform.Extensions.TfsLogger.dll</PathToTfsLogger>
      <IsolationSwitch>/InIsolation</IsolationSwitch>
      <PlatformSwitch Condition="'$(MustRun32Bit)' != 'true'">/Platform:x64</PlatformSwitch>

      <!-- Test Result Publishing -->
      <PublishName Condition="'$(BuildNumber)' != ''">$(BuildNumber)</PublishName>
      <PublishName Condition="'$(BuildAll)' == 'true'">$(OriginalBuildNumber)</PublishName>
      <ResultsFileSwitch>/Logger:trx</ResultsFileSwitch>

      <!-- Test result publishing requires Visual Studio Update 1 or higher -->
      <ResultsFileSwitch Condition="'$(IsDesktopBuild)' != 'true' And Exists('$(PathToTfsLogger)')">/Logger:TfsPublisher;Collection=$(TeamFoundationServerUrl);BuildName=$(PublishName);TeamProject=ExpertSuite;Platform=%(ConfigurationToBuild.PlatformToBuild);Flavor=%(ConfigurationToBuild.FlavorToBuild)</ResultsFileSwitch>
    </PropertyGroup>

    <Message Text="Assembly: %(AssemblyList.FileName) [Platform: %(AssemblyList.Platform)]" />
    <Message Condition="'$(MustRun32Bit)' And !'$(UseMsTest)'" Text="Must run tests in 32-bit mode as at least one build output assembly has a platform of x86." />

    <!--Run With VSTest -->
    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Condition="'$(UnitTestAssemblies)' != '' And !'$(UseMsTest)'"
          Command='"$(PathToTestTool)" $(UnitTestAssemblies) "$(ResultsFileSwitch)" $(PlatformSwitch) $(IsolationSwitch)' />

    <!-- Now prepare for MSTest run (legacy) -->
    <PropertyGroup>
      <PathToMsTest>$(VsCommonTools)..\IDE\MSTest.exe</PathToMsTest>
      <MsTestResultsFileSwitch>/resultsfile:"$(BinTestDirectory)\UnitTestResults.trx"</MsTestResultsFileSwitch>
      <UnitTestAssemblies>@(TestAssemblies->'/testcontainer:%(FullPath)',' ')</UnitTestAssemblies>
    </PropertyGroup>

    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Condition="'$(UnitTestAssemblies)' != '' And '$(UseMsTest)'"
          Command='"$(PathToMsTest)" /nologo /usestderr $(UnitTestAssemblies) $(MsTestResultsFileSwitch)' />

    <CallTarget Targets="CopyTrxFile" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="CopyTrxFile;CopyToDropOnTestFailure;MarkBuildStepAsFailed" />
  </Target>

  <Target Name="CopyTrxFile">
    <ItemGroup>
      <TestResults Condition="'$(IsDesktopBuild)' == 'true'" Include="$(ModuleBuildDirectory)\**\*.trx" />
      <TestResults Condition="'$(BuildDirectory)' != '' And Exists('$(BuildDirectory)\BuildType')" Include="$(BuildDirectory)\BuildType\**\*.trx" />
    </ItemGroup>

    <Copy Condition="@(TestResults) != ''" SourceFiles="@(TestResults)" DestinationFiles="$(BinTestDirectory)\UnitTestResults.trx" />
  </Target>

  <!--
    ==========================================================================================
        Create the modules package to be Published
    ==========================================================================================
  -->

  <Target Name="PublishModule"
          DependsOnTargets="RunUnitTests"
          Condition="('$(PublishModule)' == 'true')">

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Create Package to publish"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <Message Condition="('$(IsDesktopBuild)'=='true')"
             Text="Create package to publish" />
    <Message Text="## Publish as version $(FileVersion)" />

    <MSBuild Projects="$(SolutionFileName)"
             Properties="ApplicationVersion=$(FileVersion)"
             Targets="Publish"  />

    <Message Condition="('$(IsDesktopBuild)'=='true')"
             Text="Zip package" />

    <PropertyGroup>
      <ClickOnceZipFileDirectory>$(BinModuleDirectory)\$(ModuleName).ClickOnce</ClickOnceZipFileDirectory>
      <ClickOnceZipFile>$(ClickOnceZipFileDirectory)\ClickOnce.zip</ClickOnceZipFile>
      <PublishDirectory>$(BinModuleDirectory)\app.publish</PublishDirectory>
    </PropertyGroup>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <ZipSourceFiles
        Include="$(PublishDirectory)\**; "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ClickOnceZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ClickOnceZipFile)"
      WorkingDirectory="$(PublishDirectory)" />

    <RemoveDir Directories="$(PublishDirectory)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================
        Zip Sample Module 
    ==========================================================================================
  -->

  <Target Name="ZipTemplateModule"
          Condition="('$(IsTemplateModule)'=='true')"
          >
    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Zipping Source for $(ModuleName)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Workflow\Templates</ZipFileDirectory>
      <ZipFile>$(ZipFileDirectory)\$(ModuleName).Template.zip</ZipFile>
    </PropertyGroup>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <ZipSourceFiles
        Include="$(SolutionDirectoryPath)**;"
        Exclude="$(BinTestDirectory)**\**;        
                 $(BinModuleDirectory)**\**;                
                 $(ModuleBuildDirectory)**;
                 $(ModuleSourceDirectory)**\*.csproj.user;        
                 $(ModuleSourceDirectory)**\obj\**;
                 $(ModuleSourceDirectory)**\bin\**;      
                 $(SolutionDirectoryPath)$(ModuleName).sln;
                 $(SolutionDirectoryPath)CommonBuild\**;
                 $(SolutionDirectoryPath)Dependencies\**;
                 $(SolutionDirectoryPath)**\*.vssscc;
                 $(SolutionDirectoryPath)**\*.vspscc;        
                 $(SolutionDirectoryPath)**\*.sln.cache;
                 $(SolutionDirectoryPath)**\*.vsmdi;        
                 $(SolutionDirectoryPath)**\*.testrunconfig;
                 $(SolutionDirectoryPath)**\*.suo;
                 $(SolutionDirectoryPath)**\*.sln.Debug.vsprops;
                 $(SolutionDirectoryPath)**\TestResults\**;
                 $(SolutionDirectoryPath)**\Release.txt;
                 $(SolutionDirectoryPath)**\Debug.txt;
                 $(SolutionDirectoryPath)**\_Resharper*\**;
                 $(SolutionDirectoryPath)**\*resharper.user;
                 $(SolutionDirectoryPath)**\*.DotSettings; "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <Delete
      Files="$(ZipFile)" ContinueOnError="true" />

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="$(ZipFile)"
      WorkingDirectory="$(SolutionDirectoryPath)" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Copy Build to Drop Location for unit test failure
    ==========================================================================================
  -->
  <Target Name="CopyToDropOnTestFailure"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Copy Output to $(DropLocation)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <!--We have differing ways of determining the drop location depending on the type of build. 
        The simplest way was to have a condition on whether we are build all modules of a single module.-->

    <Exec Condition="('$(BuildAll)'=='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1" -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation)\$(ModuleName)\$(AssemblyVersion) -assemblyFileVersion $(FileVersion) -copyTestDirectory' />

    <Exec Condition="('$(BuildAll)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1"  -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation) -assemblyFileVersion $(FileVersion) -copyTestDirectory' />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Copy Build to Drop Location 
    ==========================================================================================
  -->
  <Target Name="CopyToDrop"
        Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="Copy Output to $(DropLocation)"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
            >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                />
    </BuildStep>

    <!--We have differing ways of determining the drop location depending on the type of build. 
        The simplest way was to have a condition on whether we are build all modules of a single module.-->

    <Exec Condition="('$(BuildAll)'=='true') And ('$(IsCustomBuild)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1" -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation)\$(ModuleName)\$(AssemblyVersion) -assemblyFileVersion $(FileVersion)' />

    <Exec Condition="('$(BuildAll)'!='true') And ('$(IsCustomBuild)'!='true')"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)CopyToDrop.ps1"  -moduleName $(ModuleName) -moduleRootPath $(SolutionDirectoryPath) -dropRootUNCPath $(DropLocation) -assemblyFileVersion $(FileVersion)' />

    <!-- Gather any files created as part of a Web project build. These are typically zip files -->
    <ItemGroup>
      <WebPackageFiles Include="$(SolutionDirectoryPath)Src\**\bin\_PublishedWebsites\**\*.*" />
    </ItemGroup>
    <Message Text="WebPackageFiles: @(WebPackageFiles)" />
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)\Src\**\bin\_PublishedWebsites\**\*.*" />

    <Copy Condition="('$(PackageWeb)'=='true' And '$(BuildAll)'=='true')"
          SourceFiles="@(WebPackageFiles)"
          DestinationFolder="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\$(FileVersion)\Bin\Module" />

    <Copy Condition="('$(PackageWeb)'=='true' And '$(BuildAll)'!='true')"
          SourceFiles="@(WebPackageFiles)"
          DestinationFolder="$(DropLocation)\$(FileVersion)\Bin\Module" />

    <!--At the moment we check for successful builds in the build logs where there are 0 Error(s). The BuildAll only has one build log
        so if we get this far we can assume the build is successfull so we create a dummy BuildLog   
    -->
    <WriteLinesToFile
      Condition ="('$(BuildAll)'=='true')"
      File="$(DropLocation)\$(ModuleName)\$(AssemblyVersion)\$(FileVersion)\BuildLog.txt"
      Lines="Build succeeded via BuildAll - 0 Error(s)"/>

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        NDepend post build analysis
    ==========================================================================================
  -->
  <PropertyGroup>
    <NDependPath>c:\Program Files (x86)\NDepend</NDependPath>
    <NDependOutputDir>$(SolutionDirectoryPath)\bin\NDependOut</NDependOutputDir>
    <NDependWarn>0</NDependWarn>
  </PropertyGroup>

  <Target Name="NDepend"
          Condition="('$(IsDesktopBuild)'!='true')" >

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      Message="NDepend"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildURI)"
              >
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId"
                  />
    </BuildStep>

    <Message Text="*** NDepend " />
    <Message Text="NDependConsoleExePath : $(NDependPath)" />
    <Message Text="ProjectFilePath       : $(BuildScriptsDirectory)NDependFramework.xml" />

    <!-- Lets first remove the ld NDependOut directory -->
    <RemoveDir Directories="$(SolutionDirectoryPath)\NDependOut" />

    <NDependTask
      Condition="('$(IsCustomBuild)'!='true')"
      NDependConsoleExePath="$(NDependPath)"
      ProjectFilePath="$(BuildScriptsDirectory)NDependFramework.xml"
      OutDir="$(NDependOutputDir)" />

    <!-- Scan the NDepend Report Files to see if a braking change has been identified -->

    <XmlRead ContinueOnError="True"
             XmlFileName="$(SolutionDirectoryPath)\NDependout\CQLResult.xml"
             XPath="string(count(//Group[@Status='Warn']))">
      <Output TaskParameter="Value"
              PropertyName="NDependWarn" />
    </XmlRead>


    <!-- If braking change identified then need to mark build step as Failed -->

    <Error Text="NDepend Breaking Change"
           Condition="$(NDependWarn) &gt; 0"/>

    <BuildStep
      Condition="('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->
  <Target Name="MarkBuildStepAsFailed"
          Condition="'$(IsDesktopBuild)' != 'true' And '$(IsCustomBuild)' != 'true'"
          DependsOnTargets="BeforeDropBuild">

    <Message Text="Marking build as failed" />

    <BuildStep
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Failed" />

    <SetBuildProperties
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      CompilationStatus="Failed" />

  </Target>

</Project>
