<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->
    <!-- Beware that if you name your task the same as one provided by the engine, the engine may bind to your task instead which can cause problems
         if it task signature and behaviour does not meet the expectation of the calling target. -->

    <!-- Gets the platform of an assembly (e.g. x86, x64 or AnyCPU) -->
    <UsingTask TaskName="Aderant.Build.Tasks.GetAssemblyPlatform"                                 AssemblyFile="$(BuildAssembly)" />

    <!-- Gets the dependencies for a given module -->
    <UsingTask TaskName="Aderant.Build.Tasks.GetDependencies"                                     AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.MakeSymlink"                                         AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.ExtractWebModule"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ReplaceProjectReferences"                            AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CompileLess"                                         AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetCopyLocalItemsToRemove"                           AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.GenerateBuildPlan"                                   AssemblyFile="$(BuildAssembly)" />

    <UsingTask Condition="'$(TFVC_TASK_SUPPORT)' == 'true'"
               TaskName="Aderant.Build.Tasks.FilterModules"                                       AssemblyFile="$(BuildAssembly)" />

    <!-- Creates "fakes" builds in TFS -->
    <UsingTask Condition="'$(TFVC_TASK_SUPPORT)' == 'true'"
               TaskName="Aderant.Build.Tasks.PublishBuild"                                        AssemblyFile="$(BuildAssembly)" />

    <!-- Closes and finalizes a build -->
    <UsingTask Condition="'$(TFVC_TASK_SUPPORT)' == 'true'"
               TaskName="Aderant.Build.Tasks.FinalizeBuild"                                       AssemblyFile="$(BuildAssembly)" />

    <!-- Converts dotCover XML report to Cobertura XML format -->
    <UsingTask TaskName="Aderant.Build.Tasks.CoberturaReportConverter"                            AssemblyFile="$(BuildAssembly)" />

    <!-- Adds solution build details into TFS so the build can track warnings etc -->
    <UsingTask TaskName="Aderant.Build.Tasks.CheckCertificate"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ThirdPartyPackager"                                  AssemblyFile="$(BuildAssembly)" />

    <!-- For zip seed packages. -->
    <UsingTask TaskName="Aderant.Build.Tasks.GenerateArchives"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.SeedPackagePacking"                                  AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CopyRelatedFiles"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CopyCustomSolution"                                  AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetAssembliesWithTraits"                             AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetFileVersionInfo"                                  AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CheckFreeSpace"                                      AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GitVersion"                                          AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetNodeId"                                           AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.WriteLinesToFile"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ReadAssemblyInfo"                                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.PrintBanner"                                         AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.SetProgress"                                         AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.PowerShell.PowerShellScript"                         AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CheckForDoubleWrites"                                AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.StringCache"                                         AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.WaitForDebugger"                                     AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetPropertiesFromContext"                            AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetOrPutContextVariable"                             AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.ArtifactHandling.CreateArtifacts"                    AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ArtifactHandling.CollectArtifactsForPublishing"      AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ArtifactHandling.RetrieveArtifacts"                  AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.ArtifactHandling.GetArtifactPaths"                   AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.WriteBuildStateFile"                                 AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.RecordProjectOutputs"                                AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GetBuildOutputs"                                     AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.CopyFiles"                                           AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GatherProjectsToBuild"                               AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.Testing.BuildTestRunParametersXml"                   AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.ZipBuildScripts"                                     AssemblyFile="$(BuildAssembly)" />

    <!-- For integration testing -->
    <UsingTask TaskName="Aderant.Build.Tasks.RoleManifestPackageIdentifier"                       AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.GeneratePaketDependencies"                           AssemblyFile="$(BuildAssembly)" />

    <!-- Debugging task -->
    <UsingTask TaskName="Aderant.Build.Tasks.InspectItemGroup"                                    AssemblyFile="$(BuildAssembly)" />

    <UsingTask TaskName="Aderant.Build.Tasks.UpdateSplashScreenImage"                             AssemblyFile="$(BuildAssembly)"
               Condition="'$(IsCustomBuild)' != 'true'" />

    <UsingTask TaskName="Aderant.Build.Tasks.OrmMappingValidator"                                 AssemblyFile="$(BuildAssembly)"
               Condition="'$(IsCustomBuild)' != 'true'" />

    <UsingTask TaskName="Aderant.Build.Tasks.TextTemplating.TextTemplatingPathResolver"           AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.TextTemplating.TextTemplatingAssemblyResolver"       AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.HappyCat"                                            AssemblyFile="$(BuildAssembly)" />
    <UsingTask TaskName="Aderant.Build.Tasks.SourceTransformationTask"                            AssemblyFile="$(BuildAssembly)" />

    <!-- Code to handle project references in Customization build. -->
    <UsingTask TaskName="SmartReference" Condition="'$(IsCustomBuild)' == 'true'"                 AssemblyFile="$(BuildAssembly)" />

    <PropertyGroup>
      <TargetTaskFactory Condition="'$(TargetTaskFactory)' == ''">RoslynCodeTaskFactory</TargetTaskFactory>
      <TargetTaskFactory Condition="'$(IsVisualStudio2019OrHigher)' != 'true'">CodeTaskFactory</TargetTaskFactory>
    </PropertyGroup>

    <UsingTask
      Condition="$(CodeTaskFactoryAssembly) != ''"
      TaskName="LoadAssembly"
      TaskFactory="$(TargetTaskFactory)"
      AssemblyFile="$(CodeTaskFactoryAssembly)" >
      <ParameterGroup>
        <AssemblyFile ParameterType="System.String" Required="true"/>
      </ParameterGroup>
      <Task>
        <Using Namespace="System"/>
        <Using Namespace="System.IO"/>
        <Code>
          <![CDATA[
  if (!string.IsNullOrEmpty(AssemblyFile) && File.Exists(AssemblyFile)) {
      System.Reflection.Assembly.LoadFrom(AssemblyFile);
  }
]]>
        </Code>
      </Task>
    </UsingTask>

    <UsingTask
    TaskName="XDocumentPoke"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Query ParameterType="System.String" Required="true" />
      <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code>
        <![CDATA[
var doc = XDocument.Load(File);

var root = doc.Root;

var parts = Query.Split('/');

// Skip(1) is a bit of a hack - assumes the XPath includes the root element
foreach (string element in parts.Skip(1)) {
    var descendant = root.Descendants(element).FirstOrDefault();
    if (descendant == null) {
        descendant = new XElement(element);
        root.Add(descendant);
    }
    root = descendant;
}

var contentToAdd = XElement.Parse(Value);

if (!root.Descendants(contentToAdd.Name).Any()) {
  root.Add(contentToAdd);
}

doc.Save(File);
]]>
      </Code>
    </Task>
  </UsingTask>

</Project>