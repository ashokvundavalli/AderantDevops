<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="14.0">

  <PropertyGroup>
    <DependenciesDirectory Condition="'$(DependenciesDirectory)' == ''">$(MSBuildThisFileDirectory)</DependenciesDirectory>
    <DependenciesDirectory>$([System.IO.Path]::GetFullPath('$(DependenciesDirectory)'))</DependenciesDirectory>
    <DependenciesDirectory Condition="!HasTrailingSlash('$(DependenciesDirectory)')">$(DependenciesDirectory)\</DependenciesDirectory>
    <PackagesDirectory>$([System.IO.Path]::GetFullPath('$(DependenciesDirectory)..\packages\'))</PackagesDirectory>
    <ModulesDirectory Condition="'$(ModulesDirectory)' == ''">$([System.IO.Path]::GetFullPath('$(DependenciesDirectory)..\..\'))</ModulesDirectory>
    <!-- only works for TFS modules right now -->
    <IsGitRepo>$([System.IO.File]::Exists('$(DependenciesDirectory)..\.gitignore'))</IsGitRepo>
    <ResponseFile>$(SolutionDir)\Build\TFSBuild.rsp</ResponseFile>

  </PropertyGroup>

  <PropertyGroup>
    <IncludeFoundationDirectly Condition="Exists('$(SolutionDir)\LINK_TO_WEB_FOUNDATION') And '$(LinkedBuild)' != 'true' And '$(IsDesktopBuild)' != 'false'">true</IncludeFoundationDirectly>
    <IncludePresentationDirectly Condition="Exists('$(SolutionDir)\LINK_TO_WEB_PRESENTATION') And '$(LinkedBuild)' != 'true' And '$(IsDesktopBuild)' != 'false'">true</IncludePresentationDirectly>
    <IncludeOTGDirectly Condition="Exists('$(SolutionDir)\LINK_TO_WEB_OTG') And '$(LinkedBuild)' != 'true' And '$(IsDesktopBuild)' != 'false'">true</IncludeOTGDirectly>
  </PropertyGroup>

  <!-- 
    We need to share JavaScript, CSS or images files amongst several web applications.
    
    This target takes care of including the shared content from the dependency directory into the project and importantly maintaining 
    the F5 experience by virtue of the CopyLinkedContentFiles target  
  -->

  <!--ExternalContent item group defines the unprocessed content provided by dependency modules or by the file system in the module dependency directory

    Wildcards don't get expanded when you use the MS Build item selector (@->) so we stuck with a hardcoded list of folders to process.
    Ideally this syntax would work @(Modules->'$(DependenciesDirectory)Web.*\%(Identity\*.js') ... but it doesn't expand the * item unless it passes
    through a target which we cannot do here as this file is included by Visual Studio and cannot call into a target
  -->
  <PropertyGroup>
    <UnitTestProjectGuid>3AC096D0-A1C2-E12C-1390-A8335801FDAB</UnitTestProjectGuid>
    <EnableContentLink Condition="'$(EnableContentLink)' == ''">true</EnableContentLink>
    <EnableContentLink Condition="'$(ProjectTypeGuids.ToUpper().Contains($(UnitTestProjectGuid)))' == 'true'">false</EnableContentLink>

    <DependencyManifest>$(ProjectDir)..\..\Build\DependencyManifest.xml</DependencyManifest>
    <DependencyManifestContent>$([System.IO.File]::ReadAllText('$(DependencyManifest)'))</DependencyManifestContent>
    <Pattern>="((Web|Mobile)\..*?)"</Pattern>
    <!-- 
      Extract the web modules referenced in the dependency manifest
      The extracted result looks like ="Web.Foundation"
    -->
    <WebModuleText>$([System.Text.RegularExpressions.Regex]::Matches($(DependencyManifestContent), $(Pattern)))</WebModuleText>
    <WebModuleText>$(WebModuleText.Replace('=', '').Replace('"', ''))</WebModuleText>

    <WebModuleText Condition="'$(IncludeFoundationDirectly)' == 'true'">$(WebModuleText.Replace('Web.Foundation', ''))</WebModuleText>
    <WebModuleText Condition="'$(IncludePresentationDirectly)' == 'true'">$(WebModuleText.Replace('Web.Presentation', ''))</WebModuleText>
    <WebModuleText Condition="'$(IncludeOTGDirectly)' == 'true'">$(WebModuleText.Replace('Web.OTG', ''))</WebModuleText>

    <RegexEscapedDependencyPath>$([System.Text.RegularExpressions.Regex]::Escape('$(DependenciesDirectory)'))</RegexEscapedDependencyPath>
  </PropertyGroup>



  <ItemGroup>
    <!-- This section controls what modules will be linked to directly in your workspace -->
    <LinkTo Include="Web.Foundation"
            Condition="'$(IncludeFoundationDirectly)' == 'true'">
      <RelativePath>$(ModulesDirectory)%(Identity)\Src\%(Identity)</RelativePath>
    </LinkTo>
    <LinkTo Include="Web.Presentation"
            Condition="'$(IncludePresentationDirectly)' == 'true'">
      <RelativePath>$(ModulesDirectory)%(Identity)\Src\%(Identity)</RelativePath>
    </LinkTo>
    <LinkTo Include="Web.OTG"
            Condition="'$(IncludeOTGDirectly)' == 'true'">
      <RelativePath>$(ModulesDirectory)%(Identity)\Src\%(Identity)</RelativePath>
    </LinkTo>
  </ItemGroup>

  <Choose>
    <When Condition=" '$(IncludeFoundationDirectly)' == 'true' ">
      <ItemGroup>
        <Reference Include="Web.Foundation">
          <HintPath>$(ModulesDirectory)Web.Foundation\Src\Web.Foundation\bin\Web.Foundation.dll</HintPath>
        </Reference>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <Reference Include="Web.Foundation"
                   Condition="'$(AssemblyName)' != 'Web.Foundation'">
          <HintPath>..\..\Dependencies\Web.Foundation.dll</HintPath>
        </Reference>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <Choose>
    <When Condition=" '$(IncludePresentationDirectly)' == 'true' ">
      <ItemGroup>
        <Reference Include="Web.Presentation">
          <HintPath>$(ModulesDirectory)Web.Presentation\Src\Web.Presentation\bin\Web.Presentation.dll</HintPath>
        </Reference>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <Reference Include="Web.Presentation"
                   Condition="'$(AssemblyName)' != 'Web.Presentation'">
          <HintPath>..\..\Dependencies\Web.Presentation.dll</HintPath>
        </Reference>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <Choose>
    <When Condition=" '$(IncludeOTGDirectly)' == 'true' And Exists('$(ModulesDirectory)Web.OTG\Src\Web.OTG\bin\Web.OTG.dll')">
      <ItemGroup>
        <Reference Include="Web.OTG">
          <HintPath>$(ModulesDirectory)Web.OTG\Src\Web.OTG\bin\Web.OTG.dll</HintPath>
        </Reference>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <Reference Include="Web.OTG"
                   Condition="'$(AssemblyName)' != 'Web.OTG' And Exists('..\..\Dependencies\Web.OTG.dll')">
          <HintPath>..\..\Dependencies\Web.OTG.dll</HintPath>
        </Reference>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <!--
      Creates the list of modules from the dependency manifest like Web.Foundation, Web.Presentation etc
      Extend this collection to extend the content inclusion pipeline from the depenedencies folder
  -->
    <ReferencedWebModules Include="$(WebModuleText.Split(';'))" />
  </ItemGroup>

  <!--
  ******************************************************************************** Content from workspace ********************************************************************************
  -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <LinkedProjectContent Include="@(LinkTo)">
      <Items>$([System.IO.Directory]::GetFiles('%(RelativePath)\Scripts\%(Identity)', '*.js', System.IO.SearchOption.AllDirectories))</Items>
      <Type>Content</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items>$([System.IO.Directory]::GetFiles('%(RelativePath)\Scripts\%(Identity)', '*.d.ts', System.IO.SearchOption.AllDirectories))</Items>
      <Type>TypeScript</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items>$([System.IO.Directory]::GetFiles('%(RelativePath)\Scripts\%(Identity)', '*.html', System.IO.SearchOption.AllDirectories))</Items>
      <Type>Content</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items Condition="Exists('%(RelativePath)\Content\%(Identity)')">$([System.IO.Directory]::GetFiles('%(RelativePath)\Content\%(Identity)', '*.*', System.IO.SearchOption.AllDirectories))</Items>
      <Type>Content</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items Condition="Exists('%(RelativePath)\ViewModels\%(Identity)')">$([System.IO.Directory]::GetFiles('%(RelativePath)\ViewModels\%(Identity)', '*.js', System.IO.SearchOption.AllDirectories))</Items>
      <Type>Content</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items Condition="Exists('%(RelativePath)\ViewModels\%(Identity)')">$([System.IO.Directory]::GetFiles('%(RelativePath)\ViewModels\%(Identity)', '*.d.ts', System.IO.SearchOption.AllDirectories))</Items>
      <Type>TypeScript</Type>
    </LinkedProjectContent>

    <LinkedProjectContent Include="@(LinkTo)">
      <Items>$([System.IO.Directory]::GetFiles('%(RelativePath)\Views\Shared\%(Identity)', '*.cshtml', System.IO.SearchOption.AllDirectories))</Items>
      <Type>Content</Type>
    </LinkedProjectContent>

    <LinkedAspxContent Include="@(LinkTo)">
      <Items Condition="Exists('%(RelativePath)\Authentication\%(Identity)')">$([System.IO.Directory]::GetFiles('%(RelativePath)\Authentication\%(Identity)', '*.aspx', System.IO.SearchOption.AllDirectories))</Items>
      <RelativePath>Authentication\%(Identity)</RelativePath>
    </LinkedAspxContent>

    <LinkedAspxContent Include="@(LinkTo)">
      <Items Condition="Exists('%(RelativePath)\ManualLogOn\%(Identity)')">$([System.IO.Directory]::GetFiles('%(RelativePath)\ManualLogOn\%(Identity)', '*.aspx', System.IO.SearchOption.AllDirectories))</Items>
      <RelativePath>ManualLogOn</RelativePath>
    </LinkedAspxContent>
  </ItemGroup>

  <ItemGroup>
    <AllLinkedContent Include="@(LinkedProjectContent->Metadata('Items'))">
      <!--Save some memory and null out the items array-->
      <Items />
    </AllLinkedContent>

    <AspxContent Include="@(LinkedAspxContent->Metadata('Items'))">
      <Items />
    </AspxContent>
  </ItemGroup>

  <!--
  ******************************************************************************** Content from dependencies ********************************************************************************
  -->
  <!-- Scripts -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <ExternalContent Include="$(DependenciesDirectory)Web.*\Scripts\Web.*\**\*.js;
                              $(DependenciesDirectory)Web.*\Scripts\Web.*\**\*.html;
                              $(DependenciesDirectory)Web.*\Scripts\*.js;
                              $(DependenciesDirectory)Mobile.*\Scripts\*.js;
                              $(DependenciesDirectory)Mobile.*\Scripts\Mobile.*\**\*.js"
                     Exclude="$(DependenciesDirectory)Web.*\Scripts\ThirdParty.*\**\*.js">
      <RelativePath>Scripts</RelativePath>
      <Type>Content</Type>
    </ExternalContent>

    <ExternalContent Condition="'$(IsGitRepo)' != 'True'" Include="$(DependenciesDirectory)Web.*\Scripts\Web.*\**\*.d.ts"
                     Exclude="$(DependenciesDirectory)Web.*\Scripts\ThirdParty.*\**\*.d.ts">
      <Type>TypeScript</Type>
    </ExternalContent>

    <ThirdPartyContent Include="$(DependenciesDirectory)ThirdParty.*\**\*.js">
      <RelativePath>Scripts\%(RecursiveDir)</RelativePath>
      <Type>Content</Type>
    </ThirdPartyContent>

    <ThirdPartyContent Include="$(PackagesDirectory)javascript\ThirdParty.*\lib\**\*.js">
      <RelativePath>Scripts\$([System.String]::Copy('%(RecursiveDir)').Replace('\lib', ''))</RelativePath>
      <Type>Content</Type>
    </ThirdPartyContent>

    <ThirdPartyContent Condition="'$(IsGitRepo)' != 'True'" Include="$(DependenciesDirectory)ThirdParty.*\**\*.d.ts">
      <RelativePath>Scripts\%(RecursiveDir)</RelativePath>
      <Type>TypeScript</Type>
    </ThirdPartyContent>
  </ItemGroup>

  <!-- Content -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">

    <ExternalContent Include="$(DependenciesDirectory)Web.*\Content\**\*;
                              $(DependenciesDirectory)Mobile.*\Content\**\*"
                     Exclude="$(DependenciesDirectory)Web.*\Content\Web.*\**\*.js;
                              $(DependenciesDirectory)Web.*\Content\Web.*\**\*.d.ts;
                              $(DependenciesDirectory)Web.*\Content\Web.*\Web.*\**;
                              $(DependenciesDirectory)Web.*\Content\ThirdParty.*\**\*;
                              $(DependenciesDirectory)Mobile.*\Content\**\*.js;
                              $(DependenciesDirectory)Mobile.*\Content\**\*.d.ts;
                              $(DependenciesDirectory)Mobile.*\Content\Web.*\**;
                              $(DependenciesDirectory)Mobile.*\Content\Mobile.*\**">
      <RelativePath>Content</RelativePath>
      <Type>Content</Type>
    </ExternalContent>

    <ThirdPartyContent Include="$(DependenciesDirectory)ThirdParty.*\**\*"
                       Exclude="$(DependenciesDirectory)ThirdParty.*\**\*.js;
                                $(DependenciesDirectory)ThirdParty.*\**\*.d.ts">
      <RelativePath>Content\Includes\%(RecursiveDir)</RelativePath>
      <Type>Content</Type>
    </ThirdPartyContent>

    <ThirdPartyContent Include="$(PackagesDirectory)javascript\ThirdParty.*\lib\**\*"
                       Exclude="$(PackagesDirectory)javascript\ThirdParty.*\lib\**\*.js;
                                $(PackagesDirectory)javascript\ThirdParty.*\lib\**\*.d.ts">
      <RelativePath>Content\Includes\$([System.String]::Copy('%(RecursiveDir)').Replace('\lib', ''))</RelativePath>
      <Type>Content</Type>
    </ThirdPartyContent>

  </ItemGroup>

  <!-- ViewModels -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <ExternalContent Include="$(DependenciesDirectory)Web.*\ViewModels\**\*.js;
                              $(DependenciesDirectory)Mobile.*\ViewModels\**\*.js"
                     Exclude="$(DependenciesDirectory)Mobile.*\ViewModels\Web.*\**;
                              $(DependenciesDirectory)Mobile.*\ViewModels\Mobile.*\**">
      <RelativePath>ViewModels</RelativePath>
      <Type>Content</Type>
    </ExternalContent>

    <ExternalContent Condition="'$(IsGitRepo)' != 'True'" Include="$(DependenciesDirectory)Web.*\ViewModels\**\*.d.ts"
                     Exclude="$(DependenciesDirectory)Web.*\ViewModels\Web.SMB\**\*.d.ts">
      <Type>TypeScript</Type>
    </ExternalContent>
  
  </ItemGroup>

  <!-- Views -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <ExternalContent Include="$(DependenciesDirectory)Web.*\Views\**\Shared\**\*.cshtml">
      <RelativePath>Views/Shared</RelativePath>
      <Type>Content</Type>
    </ExternalContent>
  </ItemGroup>

  <!-- Helpers -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <ExternalContent Include="$(DependenciesDirectory)Web.*\Helpers\**\*.xml;
                              $(DependenciesDirectory)Mobile.*\Helpers\**\*.xml">
      <RelativePath>Helpers</RelativePath>
      <Type>Content</Type>
    </ExternalContent>
  </ItemGroup>

  <!-- Authentication -->
  <ItemGroup Condition=" '$(IncludeFoundationDirectly)' != 'true' And '$(EnableContentLink)' == 'true' ">
    <AspxContent Include="$(DependenciesDirectory)Web.*\Authentication\**\*.aspx">
      <RelativePath>Authentication\$([System.IO.Directory]::GetParent(%(FullPath)).Name)\</RelativePath>
    </AspxContent>
    <AspxContent Include="$(DependenciesDirectory)Mobile.*\Authentication\**\*.aspx"
                 Exclude="$(DependenciesDirectory)Mobile.*\Authentication\Web.*\**">
      <RelativePath>Authentication\$([System.String]::Copy('%(RecursiveDir)').Replace('Authentication\', ''))</RelativePath>
    </AspxContent>

    <AspxContent Include="$(DependenciesDirectory)Web.*\ManualLogOn\**\*.aspx">
      <RelativePath>ManualLogOn\</RelativePath>
    </AspxContent>
    <AspxContent Include="$(DependenciesDirectory)Mobile.*\ManualLogOn\*.aspx"
                 Exclude="$(DependenciesDirectory)Mobile.*\ManualLogOn\Web.*\**">
      <RelativePath>ManualLogOn\$([System.String]::Copy('%(RecursiveDir)').Replace('%(RecursiveDir)', ''))</RelativePath>
    </AspxContent>
  </ItemGroup>
  
  
  <ItemGroup>
    <Content Include="$(DependenciesDirectory)Web.Foundation\Authentication\web.config" Condition="Exists('$(DependenciesDirectory)Web.Foundation\Authentication\web.config')">
      <Link>Authentication\%(FileName)%(Extension)</Link>
      <Visible>true</Visible>
    </Content>
  </ItemGroup>
  

  <!-- 
    Content Processing 
    
    Assign relative project path
    Exclude content not referenced by the dependency manifest
  -->
  <ItemGroup Condition=" '$(EnableContentLink)' == 'true' ">
    <AllDependencyContent Include="@(ExternalContent)">
      <!-- 
        DependenciesRelativePath returns a path with the path up to the module in the dependency folder removed        
      -->
      <DependenciesRelativePath>$([System.String]::Copy(%(FullPath)).Replace($(DependenciesDirectory), ''))</DependenciesRelativePath>

      <DependencyModule>$([System.Text.RegularExpressions.Regex]::Match('%(DependenciesRelativePath)', '((Web|Mobile)\.\w*?\\)'))</DependencyModule>
      <Module>$([System.String]::Copy(%(DependencyModule)).TrimEnd('\\'))</Module>

      <RegexEscapedIdentity>$([System.Text.RegularExpressions.Regex]::Escape('%(Module)'))</RegexEscapedIdentity>
      <RegexContentPattern>%(RegexEscapedIdentity)(.*)%(RegexEscapedIdentity)</RegexContentPattern>

      <!-- Test if this is direct or transitive content like Modules\Web.SMB\Dependencies\Web.Presentation\Scripts\Web.Foundation\add2home.js -->
      <ContentIsNonTransitive>$([System.Text.RegularExpressions.Regex]::IsMatch('%(DependenciesRelativePath)', '%(RegexContentPattern)'))</ContentIsNonTransitive>


      <RegexNestedWebPattern>%(RegexEscapedIdentity)(.*)(Web|Mobile|Thirdparty|ThirdParty)\.\w*?\\</RegexNestedWebPattern>
      <!-- Test if this is nested content like Modules\Web.SMB\Dependencies\Web.Presentation\Scripts\Web.Foundation\add2home.js -->
      <ContentIsNestedWeb>$([System.Text.RegularExpressions.Regex]::IsMatch('%(DependenciesRelativePath)', '%(RegexNestedWebPattern)'))</ContentIsNestedWeb>

      <!-- Test if the content is from any known modules from the dependency manifest -->
      <IsReferenced>$(WebModuleText.Contains(%(Module)))</IsReferenced>
      
      <!--Can be removed once Mobile.* modules are in git-->
      <IsReferenced Condition="'%(IsReferenced)' == 'false'">$(MSBuildProjectName.Contains('Mobile.'))</IsReferenced>
    </AllDependencyContent>

    <AllDirectContent Include="@(AllDependencyContent->WithMetadataValue('ContentIsNonTransitive', 'True'))" />

    <AllDirectNotNestedContent Include="@(AllDependencyContent->WithMetadataValue('ContentIsNestedWeb', 'False'))" />

    <!-- 
      During the build all there might be more Web modules in the dependency folder than those referenced by directly by this module.
      This transform takes care of ensuring only paths that contain referenced module content are included in the project and thus zipped package
    -->
    <DependencyContent Include="@(AllDirectContent->WithMetadataValue('IsReferenced', 'True'))">
      <!--         
        ProjectRelativePath returns a path that represents the relative include path within the project eg Scripts\Web.Foundation\foo.js
      -->
      <ProjectRelativePath>$([System.Text.RegularExpressions.Regex]::Replace(%(DependenciesRelativePath), '^(.*?\\.*?)', ''))</ProjectRelativePath>

    </DependencyContent>



    <DependencyContent Include="@(AllDirectNotNestedContent->WithMetadataValue('IsReferenced', 'True'))">
      <!--         
        ProjectRelativePath returns a path that represents the relative include path within the project eg Scripts\Web.Foundation\foo.js
      -->
      <Path>$([System.Text.RegularExpressions.Regex]::Replace(%(DependenciesRelativePath), '^(.*?\\.*?)', ''))</Path>
      <ProjectRelativePath Condition="%(RelativePath) != ''">%(RelativePath)\%(Module)\%(Filename)%(Extension)</ProjectRelativePath>
    </DependencyContent>


    <!-- 
    Developer Experience: Start
    Content coming from the linked project directly
    -->
    <Content Include="@(AllLinkedContent->WithMetadataValue('Type', 'Content'))">
      <Link>$([System.String]::Copy(%(FullPath)).Replace("%(RelativePath)\", ""))</Link>
      <Visible>true</Visible>
    </Content>

    <TypeScriptCompile Include="@(AllLinkedContent->WithMetadataValue('Type', 'TypeScript'))">
      <Link>$([System.String]::Copy(%(FullPath)).Replace("%(RelativePath)\", ""))</Link>
      <Visible>true</Visible>
    </TypeScriptCompile>
    <!-- 
    Developer Experience: End
    -->



    <Content  Include="@(DependencyContent->WithMetadataValue('Type', 'Content'))">
      <Link Condition="%(ProjectRelativePath) != ''">%(ProjectRelativePath)</Link>
      <Visible Condition="%(ProjectRelativePath) != ''">true</Visible>
    </Content>

    <!-- Include all external content marked as TypeScript as TypeScriptCompile -->
    <TypeScriptCompile Include="@(DependencyContent->WithMetadataValue('Type', 'TypeScript'))">
      <Link>%(ProjectRelativePath)</Link>
      <Visible>true</Visible>
    </TypeScriptCompile>

    <!-- And now for our third party library friends! Enter! Stage left! -->
    <Content Include="@(ThirdPartyContent->WithMetadataValue('Type', 'Content'))">
      <Link>%(RelativePath)%(Filename)%(Extension)</Link>
      <Visible>true</Visible>
    </Content>

    <TypeScriptCompile Include="@(ThirdPartyContent->WithMetadataValue('Type', 'TypeScript'))">
      <Link>%(RelativePath)%(Filename)%(Extension)</Link>
      <Visible>true</Visible>
    </TypeScriptCompile>
  </ItemGroup>


  <Choose>
    <When Condition=" ('$(AssemblyName)' == 'Web.Foundation' Or '$(AssemblyName)' == 'Web.Presentation') And '$(EnableContentLink)' == 'true' ">
      <!-- We don't need to include Logon.aspx inside Web.Foundation as it provides this file -->
      <ItemGroup />
    </When>
    <When Condition=" ('$(AssemblyName)' != 'Web.Foundation') And '$(EnableContentLink)' == 'true' ">
      <ItemGroup>
        <!-- We always want these file to appear in Solution Explorer to make it obvious when you haven't run get-dependencies -->
        <Content Include="Authentication\Web.Foundation\LogOn.aspx;Authentication\Web.Foundation\LogOff.aspx;ManualLogOn\default.aspx;" >
          <Visible>true</Visible>
        </Content>

        <Content Include="Authentication\**\*"
                 Exclude="Authentication\**\LogOn.aspx;Authentication\**\LogOff.aspx;Authentication\**\Web.config">
          <Visible>true</Visible>
        </Content>

        <Content Include="ManualLogOn\**\*"
                 Exclude="ManualLogOn\**\default.aspx">
          <Visible>true</Visible>
        </Content>
      </ItemGroup>
    </When>
  </Choose>


  
    
  <Target Name="CollectLinkedContentFiles" BeforeTargets="CopyLinkedContentFiles">

    <ItemGroup>
      <ContentToCopy Include="@(Content->HasMetadata('Link'))">
        <OriginalItemSpec>%(FullPath)</OriginalItemSpec>
      </ContentToCopy>

      <ContentToCopy Include="@(TypeScriptCompile->HasMetadata('Link'))">
        <OriginalItemSpec>%(FullPath)</OriginalItemSpec>
      </ContentToCopy>
    </ItemGroup>

  </Target>


  <!-- Maintains the
  F5 experience -->
  <Target Name="CopyLinkedContentFiles"
          DependsOnTargets="CollectLinkedContentFiles"
          Condition="'$(LinkedBuild)' != 'true' And '$(EnableContentLink)' == 'true'"
          BeforeTargets="PreComputeCompileTypeScript;Build;CopyAllFilesToSingleFolderForMsdeploy;PreAutoParameterizationWebConfigConnectionStrings"
          Inputs="@(ContentToCopy)"
          Outputs="@(ContentToCopy->'$(ProjectDir)%(Link)')">

    <!-- Only copy files with the Link attribute set -->
    <Copy SourceFiles="%(ContentToCopy.OriginalItemSpec)"
          DestinationFiles="@(ContentToCopy->'$(ProjectDir)%(Link)')"
          SkipUnchangedFiles="true"
          OverwriteReadOnlyFiles="true"
          UseHardlinksIfPossible="true" />

  </Target>

  <Target Name="AfterCopyLinkedContentFiles" AfterTargets="CopyLinkedContentFiles">
    <!--
       Aspx content hangs Visual studio if you attempt to add a breakpoint to an ASPX file and the file is actually a link (very annoying). 
       So we need to copy the file instead 
    -->
    <Copy SourceFiles="@(AspxContent)"
          DestinationFiles="@(AspxContent->'%(RelativePath)\%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          OverwriteReadOnlyFiles="true" />

    <PropertyGroup>
      <EmptyProperty></EmptyProperty>
    </PropertyGroup>

    <!-- Build the dll from any linked projects. This project will reference the output assembly of the linked project directly (i.e. we won't use the DLL from 
    the dependencies directory) -->
    <MSBuild Projects="@(LinkTo->'%(RelativePath)\%(Identity).csproj')"
             Condition="'$(IsDesktopBuild)' != 'false'"
             Targets="Build"
             Properties="Configuration=Debug;Platform=AnyCPU;
                         LinkedBuild=true;
                         PackageAsSingleFile=False;
                         FilesToIncludeForPublish=$(EmptyProperty);
                         DeployDefaultTarget=$(EmptyProperty);
                         FilesToIncludeTargetFile=$(EmptyProperty);
                         DeployTarget=$(EmptyProperty)" />
  </Target>

  <Target Name="CompileLess"
          AfterTargets="CopyLinkedContentFiles"
          Condition="'$(EnableLESSCompile)' == 'True'">
    <ItemGroup>
      
      <!--Exclude any .less files beginning with an '_' from being compiled as a convention, also exclude all less files from the obj directories -->
      <LessFiles Include="$(ProjectDir)\Content\*.less"
                 Exclude="$(ProjectDir)\Content\_*.less" />
    </ItemGroup>

    <CompileLess
      LessFiles="@(LessFiles)" />
  </Target>

  <!-- Suppress the TypeScript compile phase if we are building a linked project -->
  <!--<Target Name="CompileTypeScript" Condition="'$(LinkedBuild)' == 'true'" />-->

  <!-- 
    Debugging   
    msbuild Web.Foundation.csproj /target:_ItemGroupDebug
  -->
  <Target Name="_ItemGroupDebug">
    <Message Text="AssemblyName: $(AssemblyName) (Enable content link: $(EnableContentLink))" />
    <Message Text="$([System.IO.Path]::GetFullPath('$(DependenciesDirectory)'))" />
    <Message Text="$([System.IO.Path]::GetFullPath('$(ProjectDir)'))" />
    <Message Text="Referenced web module: %(ReferencedWebModules.Identity)" />
     <!--<Message  Text="
Identity:                 %(AllReferencedContent.Identity) 
RecursiveDir:             %(AllReferencedContent.RecursiveDir) 
FullPath:                 %(AllReferencedContent.FullPath) 
DependenciesRelativePath: %(AllReferencedContent.DependenciesRelativePath)
ProjectRelativePath:      %(AllReferencedContent.ProjectRelativePath)            
Link:                     %(AllReferencedContent.Link)
Type:                     %(AllReferencedContent.Type)" />-->

    
    
    
    <Message Text="ExternalTypeScript: %(ExternalTypeScript.RelativePath)%(Filename)%(Extension)" />    
    <Message Text="AspxContent: %(AspxContent.RelativePath)%(Filename)%(Extension)" />    
  </Target>
</Project>



