<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
        TaskName="WriteSharedContentFile"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFile ParameterType="System.String" Required="true" />
      <PathPropertyName ParameterType="System.String" Required="true" />
      <ProjectRootDirectory ParameterType="System.String" Required="true" />
      <MSBuildProjectName ParameterType="System.String" Required="true" />
      <ProjectItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>

    <Task>
      <Reference Include="System.Xml" />
      <Using Namespace="System" />
      <Using Namespace="System.Xml" />
      <Code Type="Fragment" Language="cs">
<![CDATA[
        if (ProjectItems == null || ProjectItems.Length == 0) {
          throw new ArgumentException("No items provided to content writer");
        }

        var ns = "http://schemas.microsoft.com/developer/msbuild/2003";

        XmlWriterSettings settings = new XmlWriterSettings
        {
          Indent = true
        };

        string pathVariable = @"(" + PathPropertyName + ")";

        using (var w = XmlWriter.Create(OutputFile, settings)) {
            w.WriteStartElement("Project", ns);

            w.WriteStartElement("PropertyGroup");
            w.WriteStartElement(PathPropertyName);
            w.WriteAttributeString("Condition", string.Format("'$" + "({0})' == ''", PathPropertyName));
            w.WriteString(string.Format("$" + "({0})\\", "MSBuildThisFileDirectory"));
            w.WriteEndElement();
            w.WriteEndElement();

            w.WriteStartElement("ItemGroup");

            foreach (var file in ProjectItems) {
              var type = file.GetMetadata("Type");
              var includeProjectName = file.GetMetadata("IncludeProjectName");

              string fileAndExtension = file.GetMetadata("Filename") + file.GetMetadata("Extension");
              string fileRelativePath = file.GetMetadata("RelativeDir").Replace(ProjectRootDirectory, "") + fileAndExtension;

              var linkPath = fileRelativePath;
              if (string.Equals("false", includeProjectName, StringComparison.OrdinalIgnoreCase)) {
                linkPath = linkPath.Replace(MSBuildProjectName, "");
              }
              linkPath = linkPath.Replace(@"\\", @"\");

              w.WriteStartElement(type);
              w.WriteAttributeString("Include", "$" + pathVariable + fileRelativePath);

              w.WriteStartElement("Link");
              w.WriteString(linkPath);
              w.WriteEndElement();

              w.WriteStartElement("Visible");
              w.WriteString("true");
              w.WriteEndElement();

              w.WriteEndElement();
            }

            w.WriteEndElement();

            w.WriteEndElement();
        }
]]>
      </Code>
    </Task>
  </UsingTask>


  <Target Name="CollectProjectContentItems">
    <PropertyGroup>
      <ScriptsDirectory>$(MSBuildProjectDirectory)\</ScriptsDirectory>
      <ScriptsDirectory Condition="'$(ScriptsDirectory)' != '' and !HasTrailingSlash('$(ScriptsDirectory)')">$(ScriptsDirectory)\</ScriptsDirectory>
      <OptionalNameFilter Condition="'$(OptionalNameFilter)' == ''">*</OptionalNameFilter>
      <OptionalNameFilter Condition="'$(UseProjectNameWhenCollectingSharedContent)' == ''">$(MSBuildProjectName)</OptionalNameFilter>
    </PropertyGroup>

    <!--Scripts-->
    <ItemGroup>
      <ProjectItems Include="$(ScriptsDirectory)Scripts\$(OptionalNameFilter)\**\*.js"
                    Exclude="$(ScriptsDirectory)Scripts\**\ThirdParty.*\**">
        <Type>Content</Type>
      </ProjectItems>
      <ProjectItems Include="$(ScriptsDirectory)Scripts\$(OptionalNameFilter)\**\*.html">
        <Type>Content</Type>
      </ProjectItems>

      <ProjectItems Include="$(ScriptsDirectory)Scripts\$(OptionalNameFilter)\**\*.d.ts"
                    Exclude="$(ScriptsDirectory)Scripts\**\ThirdParty.*\**">
        <Type>TypeScriptCompile</Type>
      </ProjectItems>
    </ItemGroup>

    <!-- Content -->
    <ItemGroup>
      <ProjectItems Include="$(ScriptsDirectory)Content\$(OptionalNameFilter)\**\*"
                    Exclude="$(ScriptsDirectory)Content\**\ThirdParty.*\**">
        <Type>Content</Type>
      </ProjectItems>
    </ItemGroup>

    <!--ViewModels-->
    <ItemGroup>
      <ProjectItems Include="$(ScriptsDirectory)ViewModels\$(OptionalNameFilter)\**\*.js"
                    Exclude="$(ScriptsDirectory)ViewModels\**\ThirdParty.*\**">
        <Type>Content</Type>
      </ProjectItems>
      <ProjectItems Include="$(ScriptsDirectory)ViewModels\$(OptionalNameFilter)\**\*.d.ts"
                    Exclude="$(ScriptsDirectory)ViewModels\**\ThirdParty.*\**">
        <Type>TypeScriptCompile</Type>
      </ProjectItems>
    </ItemGroup>

    <!-- Helpers -->
    <ItemGroup>
      <ProjectItems Include="$(ScriptsDirectory)Helpers\$(OptionalNameFilter)\**\*.xml;
                             $(ScriptsDirectory)Helpers\$(OptionalNameFilter)\**\*.xml">
        <RelativePath>Helpers</RelativePath>
        <Type>Content</Type>
      </ProjectItems>
    </ItemGroup>

    <ItemGroup>
      <ProjectItems Include="$(ScriptsDirectory)Views\Shared\$(OptionalNameFilter)\**\*.cshtml">
        <Type>Content</Type>
      </ProjectItems>
    </ItemGroup>

    <!--Authentication-->
    <ItemGroup Condition="'$(IncludeAuthenticationFiles)' == 'true'">
      <ProjectItems Include="$(ScriptsDirectory)Authentication\**\*">
        <RelativePath>Authentication</RelativePath>
        <Type>Content</Type>
      </ProjectItems>

      <ProjectItems Include="$(ScriptsDirectory)ManualLogOn\$(OptionalNameFilter)\**\*">
        <RelativePath>ManualLogOn</RelativePath>
        <IncludeProjectName>false</IncludeProjectName>
        <Type>Content</Type>
      </ProjectItems>
    </ItemGroup>

  </Target>


  <Target Name="WriteContentFile" AfterTargets="AfterBuild" DependsOnTargets="CollectProjectContentItems">

    <WriteSharedContentFile
      OutputFile="$(MSBuildProjectFullPath).shared"
      PathPropertyName="$(MSBuildProjectName.Replace('.', ''))Path"
      ProjectRootDirectory="$(ScriptsDirectory)"
      MSBuildProjectName="$(MSBuildProjectName)"
      ProjectItems="@(ProjectItems)" />

  </Target>

</Project>