<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="DispatchToInnerBuild">

  <Import Project="$(BuildPlanFile)" />
  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' != 'true'" />

  <PropertyGroup>
    <HappyCat>😸</HappyCat>
    <Icecream>🍦</Icecream>

    <DispatchToInnerBuildDependsOn>
      $(DispatchToInnerBuildDependsOn);
      GetContextVariables;
      AssignProjectProperties
    </DispatchToInnerBuildDependsOn>

    <TemporaryDirectoryKey>$(BuildPlanId)</TemporaryDirectoryKey>
    <TemporaryDirectoryKey Condition="'$(TemporaryDirectoryKey)' == ''" >$([System.Guid]::NewGuid())</TemporaryDirectoryKey>
  </PropertyGroup>

  <!--
  This project file exists to provide an appropriate seam for adding new properties to the group without having to
  modify the project generator itself.
  -->
  <Target Name="DispatchToInnerBuild" DependsOnTargets="$(DispatchToInnerBuildDependsOn)">

    <HappyCat
      Condition="'$(IsDesktopBuild)' == 'true'"
      BuildGroupId="$(BuildGroupId)"
      TotalNumberOfBuildGroups="$(TotalNumberOfBuildGroups)">
      <Output TaskParameter="PadLeft" PropertyName="PadLeft" />
      <Output TaskParameter="PadRight" PropertyName="PadRight" />
    </HappyCat>

    <PropertyGroup>
      <LogId>$([System.Guid]::NewGuid())</LogId>
    </PropertyGroup>

    <PrintBanner Text="Group $(BuildGroupId) / $(TotalNumberOfBuildGroups)" />

    <SetProgress
      Condition="'$(IsDesktopBuild)' == 'true'"
      CurrentOperation="Building Group"
      Activity="$(LogId)"
      StatusDescription="$(BuildGroupId) / $(TotalNumberOfBuildGroups) [$(PadLeft) $(HappyCat) $(PadRight) $(Icecream)]" />

    <Warning Text="Skipping compile!" Condition="'$(switch-skip-compile)' == 'true'" />

    <Message Text="##vso[task.logdetail id=$(LogId);name=Group $(BuildGroupId) of $(TotalNumberOfBuildGroups);type=build;state=InProgress;progress=0]Build group $(BuildGroupId) started"
             Condition="'$(IsDesktopBuild)' != 'true'" />

    <TextTemplatingAssemblyResolver />

    <PropertyGroup>
      <PropertiesToRemove>
        TotalNumberOfBuildGroups;
        AgentPool;
        BuildGroupId;
        ProjectInstanceId
        ExpertDevBranchFolder;
        ForceRestoreDatabase;
        TFSPowerToolDir;
        GIT_REDIRECT_STDERR;
        PAKET_REQUEST_TIMEOUT
        PAKET_RESPONSE_STREAM_TIMEOUT;
        PAKET_SKIP_RESTORE_TARGETS ;
        PAKET_STREAMREADWRITE_TIMEOUT;
        SKIP_BUILD_SYSTEM_COMPILE
      </PropertiesToRemove>
    </PropertyGroup>

    <!--
      netstandard projectes require project.assets.json to exist. This is created by msbuild /t:restore
      Restore cannot be used during a build due to these WONT FIX items
      https://github.com/dotnet/msbuild/issues/2811
      https://github.com/dotnet/msbuild/issues/3000
      To work around this we shell out to another build instance for any Sdk style projects to perform the restore - this will be slow.
      Once this stops scaling this will need to move this to a higher level to perform a single restore for all SDK projets in the graph.
    -->
    <Exec Condition="'%(ProjectsInGroup.IsSdkStyeProject)' == 'true'" Command="dotnet restore %(ProjectsInGroup.Identity)" />

    <MSBuild Projects="@(ProjectsInGroup)"
             Targets="%(ProjectsInGroup.Targets)"
             UnloadProjectsOnCompletion="true"
             RemoveProperties="$(PropertiesToRemove)"
             BuildInParallel="$(BuildInParallel)">
    </MSBuild>

    <SetProgress
      Condition="'$(BuildGroupId)' == '$(TotalNumberOfBuildGroups)'"
      CurrentOperation="Building Group"
      Activity="$(LogId)"
      StatusDescription="$(BuildGroupId) / $(TotalNumberOfBuildGroups) $(PadLeft) $(HappyCat)" />

    <Message Text="##vso[task.logdetail id=$(LogId);progress=100;state=Completed;Result=Succeeded]Build group $(BuildGroupId) finished"
             Condition="'$(IsDesktopBuild)' != 'true'" />

    <OnError ExecuteTargets="SetResumePoint" />
  </Target>


  <Target Name="GetContextVariables">
    <GetOrPutContextVariable
      AllowInProcLookup="true"
      VariableName="_GitDir">
      <Output TaskParameter="Value" PropertyName="_GitDir" />
    </GetOrPutContextVariable>

    <GetOrPutContextVariable
      AllowInProcLookup="true"
      VariableName="IsBuildCacheEnabled">
      <Output TaskParameter="Value" PropertyName="IsBuildCacheEnabled" />
    </GetOrPutContextVariable>
  </Target>


  <Target Name="CreateProjectGroup">
    <ItemGroup>
      <ProjectGroupWithoutGlobals Include="@(ProjectsToBuild->WithMetadataValue('BuildGroupId', '$(BuildGroupId)'))" />
    </ItemGroup>

    <!-- Properties available to both projects files and orchestration participants -->
    <PropertyGroup>
      <PropertiesCommonToAllProjects>
        BuildProjectReferences=false;
        BuildToolsDirectory=$(BuildToolsDirectory);
        BuildScriptsDirectory=$(BuildScriptsDirectory);
        CustomAfterMicrosoftCSharpTargets=$(CustomAfterMicrosoftCSharpTargets);
        CustomAfterMicrosoftCommonTargets=$(CustomAfterMicrosoftCommonTargets);
        CustomAfterWixTargets=$(CustomAfterWixTargets);
        AlternativeOutputDirectory=$(SharedDependencyDirectory);
        ArtifactStagingDirectory=$(ArtifactStagingDirectory);
        RunCodeAnalysisOnThisProject=false;
        _GitDir=$(_GitDir);
        IsBuildCacheEnabled=$(IsBuildCacheEnabled);
        TemporaryDirectoryKey=$(TemporaryDirectoryKey);
        Deterministic=true
      </PropertiesCommonToAllProjects>
    </PropertyGroup>

    <PropertyGroup>
      <PropertiesCommonToAllProjects Condition="'$(AGENT_BUILDDIRECTORY)' != ''">
        $(PropertiesCommonToAllProjects);
        PathMap=$(AGENT_BUILDDIRECTORY)=D:\
      </PropertiesCommonToAllProjects>
    </PropertyGroup>

    <PropertyGroup>
      <WixProperties Condition="'$(UseWixShim)' == 'true'">
        WixTargetsPath=$(WixTargetsPath);
        WixCATargetsPath=$([System.IO.Path]::ChangeExtension($(WixTargetsPath), '.ca.targets'))
      </WixProperties>
    </PropertyGroup>
  </Target>


  <Target Name="AssignProjectProperties" Inputs="%(ProjectGroupWithoutGlobals.ProjectInstanceId)" Outputs="%(Identity)._" DependsOnTargets="CreateProjectGroup">
    <!--Parse the scalar property list into an item group-->
    <CreateItem Include="_"
                AdditionalMetadata="%(ProjectGroupWithoutGlobals.AdditionalProperties)"
                PreserveExistingMetadata="true">
      <Output TaskParameter="Include" ItemName="AdditionalPropertiesForProject" />
    </CreateItem>

    <!-- Extract a few key values e.g solution root value -->
    <PropertyGroup>
      <ProjectSolutionRoot>%(AdditionalPropertiesForProject.SolutionRoot)</ProjectSolutionRoot>
    </PropertyGroup>

    <PropertyGroup>
      <ProjectTargets Condition="'$(switch-clean)' == 'true'">Clean</ProjectTargets>
    </PropertyGroup>

    <ItemGroup>
      <ProjectGroupWithoutGlobals>
        <Properties>%(ProjectGroupWithoutGlobals.Properties);$(PropertiesCommonToAllProjects)</Properties>
        <!-- Include global (non-project specific) properties -->
        <AdditionalProperties>
          %(AdditionalProperties); <!-- Include the original properties list -->
          SolutionRoot=$(ProjectSolutionRoot); <!-- Merge in build system properties that hang off SolutionRoot -->
          BinModuleDirectory=$(ProjectSolutionRoot)\Bin\Module\;
          BinTestDirectory=$(ProjectSolutionRoot)\Bin\Test\;
          ModuleSourceDirectory=$(ProjectSolutionRoot)\Src\;
          ModuleTestDirectory=$(ProjectSolutionRoot)\Test\;
          ModuleBuildDirectory=$(ProjectSolutionRoot)\Build\;
          VariableScopeId=$(ProjectSolutionRoot)
        </AdditionalProperties>

        <!-- If it's a build system project default to the EndToEnd target -->
        <Targets Condition="'%(IsProjectFile)' != 'true'">EndToEnd</Targets>
        <!-- Otherwise, restore and then build -->
        <Targets Condition="'%(IsProjectFile)' == 'true'">$(ProjectTargets)</Targets>
      </ProjectGroupWithoutGlobals>
    </ItemGroup>

    <ItemGroup>
      <ProjectGroupWithoutGlobals Condition="'%(IsProjectFile)' == 'true'">
        <Properties>%(ProjectGroupWithoutGlobals.Properties);$(WixProperties)</Properties>
      </ProjectGroupWithoutGlobals>
    </ItemGroup>

    <!-- Expand AdditionalProperties into separate metadata items -->
    <CreateItem Include="@(ProjectGroupWithoutGlobals)"
                AdditionalMetadata="@(ProjectGroupWithoutGlobals->Metadata('AdditionalProperties'))"
                PreserveExistingMetadata="true">
      <Output TaskParameter="Include" ItemName="ProjectsInGroupExpanded" />
    </CreateItem>

    <ItemGroup>
      <ProjectsInGroup Include="@(ProjectsInGroupExpanded)"
                       Condition="('$(switch-skip-compile)' == 'true' And '%(IsProjectFile)' != 'true') or '$(switch-skip-compile)' != 'true'"
                       KeepMetadata="AdditionalProperties;Properties;BuildGroupId;RunUserTargets;Targets;IsProjectFile;IsSdkStyeProject" />
    </ItemGroup>

  </Target>


  <Target Name="SetResumePoint">

    <Message Text="Setting resume point to group $(BuildGroupId)" />

    <Message Text="##vso[task.logdetail id=$(LogId);progress=100;state=Completed;Result=Failed]Build group $(BuildGroupId) failed. @(ProjectsInGroup)"
             Condition="'$(IsDesktopBuild)' != 'true'" />

    <XmlPoke XmlInputPath="$(BuildPlanFile)"
             Namespaces="&lt;Namespace Prefix='n' Uri='http://schemas.microsoft.com/developer/msbuild/2003' Name='_' /&gt;"
             Query="/n:Project/n:PropertyGroup/n:ResumeGroupId"
             Value="$(BuildGroupId)"/>

  </Target>

</Project>