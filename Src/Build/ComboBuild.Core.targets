<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="DispatchToInnerBuild"
         ToolsVersion="14.0">

  <Import Project="$(BuildPlanFile)" />
  <Import Project="Aderant.Build.Common.targets" Condition="'$(AderantCommonTargetsImported)' != 'true'" />

  <PropertyGroup>
    <DispatchToInnerBuildDependsOn>
      AssignProjectProperties
    </DispatchToInnerBuildDependsOn>
  </PropertyGroup>
    
  <!-- 
  This project file exists to provide an appropriate seam for adding new properties to the group without having to 
  modify the project generator itself.
  -->
  <Target Name="DispatchToInnerBuild" DependsOnTargets="$(DispatchToInnerBuildDependsOn)">

    <PrintBanner Text="Group $(BuildGroupId) / $(TotalNumberOfBuildGroups)" />

    <PropertyGroup>
      <BuildAction>Build</BuildAction>
      <LogId>$([System.Guid]::NewGuid())</LogId>
    </PropertyGroup>

    <ItemGroup>
      <_ProjectsInGroup Include="@(ProjectsInGroup)" Condition="'$(Switches_SkipCompile)' == 'true' And '%(ProjectsInGroup.IsProjectFile)' != 'true'" />
      <_ProjectsInGroup Include="@(ProjectsInGroup)" Condition="'$(Switches_SkipCompile)' != 'true'" />
    </ItemGroup>

    <Warning Text="Skipping compile!" Condition="'$(switch-skip-compile)' == 'true'" />

    <Message Text="##vso[task.logdetail id=$(LogId);name=Group $(BuildGroupId) of $(TotalNumberOfBuildGroups);type=build;state=InProgress;progress=0]Build group $(BuildGroupId) started"
             Condition="'$(IsDesktopBuild)' != 'true'" />

    <MSBuild Projects="@(_ProjectsInGroup)"
             StopOnFirstFailure="true"
             Targets="$(BuildAction)"
             BuildInParallel="$(BuildInParallel)" >
    </MSBuild>

    <Message Text="##vso[task.logdetail id=$(LogId);progress=100;state=Succeeded;Result=Succeeded]Build group $(BuildGroupId) finished"
             Condition="'$(IsDesktopBuild)' != 'true'" />
 
    <OnError ExecuteTargets="SetResumePoint" />
  </Target>


  <Target Name="CreateProjectGroup" Returns="@(ProjectsInGroup)">
    <ItemGroup>
      <ProjectsInGroup Include="@(ProjectsToBuild->WithMetadataValue('BuildGroupId', '$(BuildGroupId)'))" />
    </ItemGroup>

    <!-- Properties available to both projects files and orchestration participants -->
    <PropertyGroup>
      <!--
        ShouldUnsetParentConfigurationAndPlatform        
        Simulates building a solution and controls whether the Configuration and Platform metadata will be unset, allowing the 
        child project to build in its default configuration / platform if the one specified from the solution file doesn't actually exist in the project.
        This is a janky hack and should be removed but removing will trigger trigger a missing configuration/platform error for many projects in the tree
        -->
      <BuildProperties>
        ShouldUnsetParentConfigurationAndPlatform=true;
        BuildProjectReferences=false;

        BuildToolsDirectory=$(BuildToolsDirectory);
        BuildScriptsDirectory=$(BuildScriptsDirectory);

        CustomAfterMicrosoftCSharpTargets=$(CustomAfterMicrosoftCSharpTargets);
        CustomAfterMicrosoftCommonTargets=$(CustomAfterMicrosoftCommonTargets);

        AlternativeOutputDirectory=$(SharedDependencyDirectory);
        ArtifactStagingDirectory=$(ArtifactStagingDirectory);
        <!-- Opt into C# deterministic compiles... TODO: needs PATHMAP to be configured -->
        Deterministic=true
      </BuildProperties>
    </PropertyGroup>

  </Target>


  <Target Name="AssignProjectProperties" Inputs="%(ProjectsInGroup.Properties)" Outputs="%(Identity)._" DependsOnTargets="CreateProjectGroup">

    <!-- Parse the scalar property list into an item group -->
    <CreateItem Include="_ParsedPropertyList" AdditionalMetadata="%(ProjectsInGroup.Properties)">
      <Output TaskParameter="Include" ItemName="_ParsedPropertyList" />
    </CreateItem>

    <PropertyGroup>
      <_SolutionRoot>%(_ParsedPropertyList.SolutionRoot)</_SolutionRoot>
    </PropertyGroup>

    <ItemGroup>
      <ProjectsInGroup>
        <Properties>
          %(ProjectsInGroup.Properties);    <!-- Include the original properties list -->
          $(BuildProperties);               <!-- Include global (non-project specific) properties -->
          SolutionRoot=$(_SolutionRoot);    <!-- Merge in build system properties that hang off SolutionRoot -->
          BinModuleDirectory=$(_SolutionRoot)\Bin\Module\;
          BinTestDirectory=$(_SolutionRoot)\Bin\Test\;
          ModuleSourceDirectory=$(_SolutionRoot)\Src\;
          ModuleTestDirectory=$(_SolutionRoot)\Test\;
          ModuleBuildDirectory=$(_SolutionRoot)\Build\;
          _GitDir=$(_GitDir);
          VariableScopeId=$(_SolutionRoot);
        </Properties>
      </ProjectsInGroup>
    </ItemGroup>

  </Target>


  <Target Name="SetResumePoint">

    <Message Text="Setting resume point to group $(BuildGroupId)" />

    <XmlPoke XmlInputPath="$(BuildPlanFile)"
             Namespaces="&lt;Namespace Prefix='n' Uri='http://schemas.microsoft.com/developer/msbuild/2003' Name='_' /&gt;"
             Query="/n:Project/n:PropertyGroup/n:ResumeGroupId"
             Value="$(BuildGroupId)"/>

  </Target>
  
</Project>