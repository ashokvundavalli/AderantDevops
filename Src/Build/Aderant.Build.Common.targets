<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="14.0"
  DefaultTargets="PrepareBuildEnvironment"
  TreatAsLocalProperty="BuildScriptsDirectory;BuildToolsDirectory;BuildNumber">

  <PropertyGroup>
    <IsDesktopBuild Condition="'$(IsDesktopBuild)' == ''">true</IsDesktopBuild>

    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' == ''">$(MSBuildThisFileDirectory)\</BuildScriptsDirectory>
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' != ''">$([System.IO.Path]::GetFullPath('$(BuildScriptsDirectory)'))</BuildScriptsDirectory>
    <!-- Ensures the ending '\' -->
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' != '' and !HasTrailingSlash('$(BuildScriptsDirectory)')">$(BuildScriptsDirectory)\</BuildScriptsDirectory>

    <!-- Inject per CSharp project overrides. This target is imported once for each CSharp project and allows us access to project level variables -->
    <CustomBeforeMicrosoftCommonTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.CustomBeforeMicrosoftCommon.targets</CustomBeforeMicrosoftCommonTargets>
    <CustomAfterMicrosoftCommonTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.CustomAfterMicrosoftCommon.targets</CustomAfterMicrosoftCommonTargets>
    <CustomAfterMicrosoftCSharpTargets>$(BuildScriptsDirectory)Aderant.CSharp.targets</CustomAfterMicrosoftCSharpTargets>
    <CustomAfterWixTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.Wix.Extensions.targets</CustomAfterWixTargets>

    <BuildToolsDirectory Condition="'$(BuildToolsDirectory)' == ''">$(BuildScriptsDirectory)..\Build.Tools\</BuildToolsDirectory>
    <BuildSourcesDirectory Condition="'$(BuildSourcesDirectory)' == ''">$(BuildScriptsDirectory)..\Sources\</BuildSourcesDirectory>

    <BuildToolsDirectory>$([System.IO.Path]::GetFullPath('$(BuildToolsDirectory)'))</BuildToolsDirectory>
    <BuildSourcesDirectory>$([System.IO.Path]::GetFullPath('$(BuildSourcesDirectory)'))</BuildSourcesDirectory>

    <BuildToolsDirectory Condition="'$(BuildToolsDirectory)' != '' and !HasTrailingSlash('$(BuildToolsDirectory)')">$(BuildToolsDirectory)\</BuildToolsDirectory>

    <BuildAssembly Condition="'$(BuildAssembly)' == ''">$(BuildToolsDirectory)Aderant.Build.dll</BuildAssembly>
    <BuildAssembly>$([MSBuild]::Unescape($(BuildAssembly)))</BuildAssembly>

    <IsVisualStudio2019OrHigher Condition="'$([Microsoft.Build.Utilities.ToolLocationHelper]::CurrentToolsVersion)' == 'Current'">true</IsVisualStudio2019OrHigher>

    <PrepareBuildEnvironmentTargetImported>true</PrepareBuildEnvironmentTargetImported>
    <AderantCommonTargetsImported>true</AderantCommonTargetsImported>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Visual Studio Environment-->
    <VsCommonTools Condition="'$(VS100COMNTOOLS)' != ''">$(VS100COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS110COMNTOOLS)' != ''">$(VS110COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS120COMNTOOLS)' != ''">$(VS120COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS140COMNTOOLS)' != ''">$(VS140COMNTOOLS)</VsCommonTools>

    <!-- Depends on VsVars being run! -->
    <VsCommonTools Condition="'$(VS150COMNTOOLS)' != ''">$(VS150COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS160COMNTOOLS)' != ''">$(VS160COMNTOOLS)</VsCommonTools>

    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '12.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' &gt; 12.0">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>

    <MSBuildCommunityTasksPath Condition="'$(MSBuildCommunityTasksPath)' == ''">$(MSBuildThisFileDirectory)\Tasks\MSBuild.Community.Tasks\</MSBuildCommunityTasksPath>

    <CompileBuildSystem Condition="'$(SKIP_BUILD_SYSTEM_COMPILE)' != ''">false</CompileBuildSystem>
  </PropertyGroup>

  <Import Project="Aderant.Build.tasks" Condition="'$(IsCustomBuild)' != 'true'" />
  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" Condition="'$(NoMSBuildCommunityTasks)' != 'true'" />
  <Import Project="Aderant.Build.Versioning.targets" />

  <!--
    ==========================================================================================
      Prepare Build Environment
      Builds the Build.Infrastructure assemblies and tools required by the build process
    ==========================================================================================
  -->
  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' == 'true'">
    <!-- This is just a stub -->
  </Target>

  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' != 'true' And '$(CompileBuildSystem)' != 'false'">
    <Error Condition="'$(BuildScriptsDirectory)' == ''" Text="No value specified for BuildScriptsDirectory" />

    <Message Text="Setting up build environment from: $(BuildScriptsDirectory) in project $(MSBuildThisFileFullPath)" />

    <Exec Condition="'$(IsDesktopBuild)' == 'false'"
          Command="$(BuildScriptsDirectory)\paket.exe restore"
          WorkingDirectory="$(BuildScriptsDirectory)..\..\" />

    <ItemGroup>
      <!-- Desktop/Common projects -->
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build\Aderant.Build.csproj" />
      <Projects Include="$(BuildSourcesDirectory)FxCopCmd\FxCopCmd.csproj" Condition="'$(project-set)' != 'minimal'" />
      <Projects Include="$(BuildSourcesDirectory)TrxerConsole\TrxerConsole.csproj" Condition="'$(project-set)' != 'minimal'" />

      <!-- Server/CI projects -->
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build.Tasks\Aderant.Build.Tasks.csproj" Condition="'$(IsDesktopBuild)' == 'false'" />
      <Projects Include="$(BuildSourcesDirectory)WarningRatchet\WarningRatchet.csproj" Condition="'$(IsDesktopBuild)' == 'false'" />
    </ItemGroup>

    <PropertyGroup>
      <PrepareBuildEnvironmentProperties>ResolveAssemblyReferencesSilent=true;DoNotCopyLocalIfInGac=true</PrepareBuildEnvironmentProperties>
    </PropertyGroup>

    <PropertyGroup Condition="'$(BUILD_BUILDID)' != ''">
      <PrepareBuildEnvironmentProperties>$(PrepareBuildEnvironmentProperties);Configuration=Debug</PrepareBuildEnvironmentProperties>
    </PropertyGroup>

    <MSBuild
      Projects="@(Projects)"
      BuildInParallel="true"
      UnloadProjectsOnCompletion="true"
      Properties="$(PrepareBuildEnvironmentProperties)" />

    <CheckFreeSpace Condition="'$(IsDesktopBuild)' != 'true'"
      FreeSpace="10"
      Units="GB" />
  </Target>


  <Target Name="EnsureWixToolsetInstalled" AfterTargets="PrepareBuildEnvironment">
    <!-- With Build 15.0 MSBuildExtensionsPath32 now looks in the VS directory like this: Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\
         Lots of software does not place objects here - eg WiX.
         Traditionally WiX has been a global install and so lives in the legacy MSBuildExtensionsPath32 location 'Program Files (x86)\MSBuild'
         To prevent build breaks we detect if we can shim WixTargetsPath to use the global install for Build 15.0 if we cannot find a local install.
    -->
    <PropertyGroup>
      <LocalWixInstallLocation Condition=" '$(WixTargetsPath)' == '' AND Exists('$(MSBuildExtensionsPath32)\Microsoft\WiX\v3.x\wix.targets') ">true</LocalWixInstallLocation>
    </PropertyGroup>

    <ItemGroup>
      <GlobalWixInstallLocation Condition=" '$(WixTargetsPath)' == '' " Include="$(MSBuildProgramFiles32)\MSBuild\Microsoft\WiX\v3.x\wix.targets" />
    </ItemGroup>

    <PropertyGroup>
      <UseWixShim Condition="'$(LocalWixInstallLocation)' != 'true' And @(GlobalWixInstallLocation->Count()) != 0">true</UseWixShim>
      <WixTargetsPath Condition="'$(UseWixShim)' == 'true'">@(GlobalWixInstallLocation)</WixTargetsPath>
      <ToDownload>To download the WiX Toolset, see http://wixtoolset.org/releases/</ToDownload>
    </PropertyGroup>

    <Error Condition="'$(LocalWixInstallLocation)' != 'true' And @(GlobalWixInstallLocation->Count()) == 0"
           Text="The WiX Toolset v3.11 (or newer) build tools must be installed to build. $(ToDownload)" />

    <Warning Condition="'$(UseWixShim)' == 'true'"
             Text="!!! We had to shim the The WiX Toolset to use the global install as WiX was not found under $(MSBuildExtensionsPath32). Please install the WiX extension for Visual Studio to resolve this. $(ToDownload)" />

    <MSBuild.Community.Tasks.Prompt
      Condition=" '$(NoMSBuildCommunityTasks)' != 'true' And '$(IsDesktopBuild)' == 'true' And '$(UseWixShim)' == 'true' And '$(project-set)' != 'minimal'" />
  </Target>

  <!--
    Import the users project into our project space if they supplied a project to call back into
    This makes all of the properties and tasks loaded here available to ProjectToBuild natively
  -->
  <Import Project="$(ProjectToBuild)" Condition="'$(ProjectToBuild)' != ''" />


  <Target Name="FindProductManifest"
    AfterTargets="PrepareBuildEnvironment"
    Condition="'$(IsDesktopBuild)' != 'true' And '$(ProductManifestPath)' == '' And '$(BUILD_REPOSITORY_PROVIDER)' != 'TfsGit'">

    <GetBranchRootFromServerPath
      BuildProjectFolderPath="$(BuildProjectFolderPath)">
      <Output PropertyName="BranchRoot"
        TaskParameter="BranchRoot" />
    </GetBranchRootFromServerPath>

    <PropertyGroup>
      <ProductManifestServerPath>$(BranchRoot)Modules/ExpertManifest.xml</ProductManifestServerPath>
      <ProductManifestPath>$(BuildScriptsDirectory)\ExpertManifest.xml</ProductManifestPath>
    </PropertyGroup>

    <Exec Command="TF.exe vc view /collection:$(TeamFoundationServerUrl) $(ProductManifestServerPath) /output:$(ProductManifestPath)"
      WorkingDirectory="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\..\IDE" />

  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->
  <Target Name="SetBuildNumbers"
          Condition="('$(IsDesktopBuild)' != 'true' Or '$(IsCustomBuild)' == 'true')">

    <PropertyGroup>
      <VersionMajor Condition="'$(VersionMajor)' == ''">1</VersionMajor>
      <VersionMinor Condition="'$(VersionMinor)' == ''">8</VersionMinor>
      <VersionBuild Condition="'$(VersionBuild)' == ''">0</VersionBuild>
      <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    </PropertyGroup>

    <Version
      BuildType="Automatic"
      RevisionType="Automatic"
      Major="$(VersionMajor)"
      Minor="$(VersionMinor)" >
      <Output TaskParameter="Major" PropertyName="Major" />
      <Output TaskParameter="Minor" PropertyName="Minor" />
      <Output TaskParameter="Build" PropertyName="Build" />
      <Output TaskParameter="Revision" PropertyName="Revision" />
    </Version>

    <PropertyGroup>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
      <AssemblyVersion>$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)</AssemblyVersion>
    </PropertyGroup>

    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!--
    ===========================================================
    Source Indexing properties
    ===========================================================
  -->
  <PropertyGroup>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' == 'true'">C:\Temp\SymbolStore</SymbolStore>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' != 'true'">\\dfs.aderant.com\expert-symbols\</SymbolStore>

    <SymbolStoreLock Condition="'$(SymbolStoreLock)' == ''">$(SymbolStore)symstore.lock</SymbolStoreLock>

    <SymStorePath Condition="'$(WindowsSdkDir)' != '' And Exists('$(WindowsSdkDir)')">$(WindowsSdkDir)</SymStorePath>
    <SymStorePath Condition="'$(WindowsSDK80Path)' != '' And Exists('$(WindowsSDK80Path)')">$(WindowsSDK80Path)</SymStorePath>
    <SymStorePath Condition="'$(SymStorePath)' != ''">$(SymStorePath)Debuggers\x64\</SymStorePath>

    <TeamProject Condition="'$(TeamProject)' == ''">ExpertSuite</TeamProject>

    <!-- Default to the production TFS server -->
    <TeamFoundationServerUrl Condition="'$(TeamFoundationServerUrl)' == ''">http://tfs:8080/tfs/aderant</TeamFoundationServerUrl>

    <SymbolPublishFile Condition="'$(SymbolPublishFile)' == ''">$(SolutionDirectoryPath)SymbolsToPublish.txt</SymbolPublishFile>
  </PropertyGroup>

  <Target Name="IndexSourcesAndPublishSymbolsCore" Condition="'$(BUILD_REPOSITORY_PROVIDER)' != 'TfsGit'">
    <Error Condition="'@(CompiledAssemblies)' == ''" Text="There are no outputs from the build" />

    <ItemGroup>
      <!-- Transform all compiled outputs into a matching pdb -->
      <Symbols Include="@(ModuleBuildOutput->'%(RootDir)%(Directory)%(Filename).pdb')"
        Condition="'%(ModuleBuildOutput.OutputType)' == 'Module'" />

      <!-- Check if the pdb exists -->
      <AllSymbolFiles Include="@(Symbols)"
        Condition="Exists(%(Symbols.FullPath))" />
    </ItemGroup>

    <ItemGroup>
      <SymbolFiles Include="@(AllSymbolFiles->Distinct())" />
    </ItemGroup>

    <SourceIndex
      SymbolFiles="@(SymbolFiles)"
      TeamProjectRootDirectory="-"
      TeamProjectName="$(TeamProject)"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      WorkspaceName="$(WorkspaceName)"
      WorkspaceOwner="$(WorkspaceOwner)"
      FailOnNoSourceInformationFound="false"
      KeepTempFileForDebugging="false" />

    <Message Text="Using SymStore: $(SymStorePath)" />
    <Error Condition="!Exists('$(SymStorePath)')" Text="Cannot find SymStore.exe at $(SymStorePath)" />

    <WriteLinesToFile File="$(SymbolPublishFile)"
      Lines="@(SymbolFiles)"
      Overwrite="true" />

    <CallTarget Targets="PublishSymbols" />
  </Target>


  <Target Name="PublishSymbols" Condition="false">
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(BranchName)</ProductName>
      <BuildToAssociateWith Condition="'$(BuildAll)' != 'true'">$(BuildUri)</BuildToAssociateWith>
      <BuildToAssociateWith Condition="'$(BuildAll)' == 'true'">$(PublishedBuildUri)</BuildToAssociateWith>
      <ProductName>$(ProductName)[$(BuildToAssociateWith)]</ProductName>
    </PropertyGroup>

    <Error Condition="'$(BuildToAssociateWith)' == ''" Text="The build system is unsure what build to associate the symbols with" />

    <!-- @ before the variable as we want @Symbols.txt so it is treated as a response file -->
    <PublishSymbols
      Condition="Exists('$(SymbolPublishFile)')"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildToAssociateWith)"
      Product="$(ProductName)"
      Version="$(FileVersion)"
      LockFile="$(SymbolStoreLock)"
      WindowsSdkPath="$(SymStorePath)"
      Command="add"
      Files="@$(SymbolPublishFile)"
      Store="$(SymbolStore)"
      LogStandardErrorAsError="false"
      YieldDuringToolExecution="true" />
  </Target>

  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->
  <Target Name="MarkBuildStepAsFailed"
    Condition="'$(IsDesktopBuild)' != 'true' And '$(IsCustomBuild)' != 'true'">
    <Message Text="Marking build as failed" />

    <CallTarget Targets="FinalizeBuild" />

  </Target>

</Project>