<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="14.0"
  DefaultTargets="PrepareBuildEnvironment"
  TreatAsLocalProperty="BuildScriptsDirectory;BuildToolsDirectory;BuildNumber">

  <PropertyGroup Label="TeamBuild">
    <SkipWorkItemCreation>true</SkipWorkItemCreation>
    <!-- We need a custom task for this as this will associate all work items to a build even if the build doesn't relate to the work item -->
    <UpdateAssociatedWorkItems>false</UpdateAssociatedWorkItems>
    <StopOnFirstFailure>true</StopOnFirstFailure>
    <StopOnTestFailure>true</StopOnTestFailure>
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
  </PropertyGroup>

  <PropertyGroup>
    <IsDesktopBuild Condition="'$(IsDesktopBuild)' == ''">true</IsDesktopBuild>

    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' == ''">$(MSBuildThisFileDirectory)\</BuildScriptsDirectory>
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' != ''">$([System.IO.Path]::GetFullPath('$(BuildScriptsDirectory)'))</BuildScriptsDirectory>
    <!-- Ensures the ending '\' -->
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' != '' and !HasTrailingSlash('$(BuildScriptsDirectory)')">$(BuildScriptsDirectory)\</BuildScriptsDirectory>

    <!-- Inject per CSharp project overrides. This target is imported once for each CSharp project and allows us access to project level variables -->
    <CustomAfterMicrosoftCSharpTargets>$(BuildScriptsDirectory)Aderant.CSharp.targets</CustomAfterMicrosoftCSharpTargets>
    <CustomAfterMicrosoftCommonTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.CustomAfterMicrosoftCommon.targets</CustomAfterMicrosoftCommonTargets>

    <BuildToolsDirectory Condition="'$(BuildToolsDirectory)' == ''">$(BuildScriptsDirectory)..\Build.Tools\</BuildToolsDirectory>
    <BuildSourcesDirectory Condition="'$(BuildSourcesDirectory)' == ''">$(BuildScriptsDirectory)..\Sources\</BuildSourcesDirectory>

    <BuildToolsDirectory>$([System.IO.Path]::GetFullPath('$(BuildToolsDirectory)'))</BuildToolsDirectory>
    <BuildSourcesDirectory>$([System.IO.Path]::GetFullPath('$(BuildSourcesDirectory)'))</BuildSourcesDirectory>

    <BuildToolsDirectory Condition="'$(BuildToolsDirectory)' != '' and !HasTrailingSlash('$(BuildToolsDirectory)')">$(BuildToolsDirectory)\</BuildToolsDirectory>

    <BuildAssembly Condition="'$(BuildAssembly)' == ''">$(BuildToolsDirectory)Aderant.Build.dll</BuildAssembly>

    <PrepareBuildEnvironmentTargetImported>true</PrepareBuildEnvironmentTargetImported>
    <AderantCommonTargetsImported>true</AderantCommonTargetsImported>
  </PropertyGroup>


  <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->

  <!-- Gets the platform of an assembly (e.g. x86, x64 or AnyCPU) -->
  <UsingTask TaskName="Aderant.Build.Tasks.GetAssemblyPlatform"                                 AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Gets the dependencies for a given module -->
  <UsingTask TaskName="Aderant.Build.Tasks.GetDependencies"                                     AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.MakeSymlink"                                         AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.DependencyChecker"                                   AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.BuildConfigurationCheck"                             AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.FilterModules"                                       AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.ExtractWebModule"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.ReplaceProjectReferences"                            AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.CompileLess"                                         AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GetCopyLocalItemsToRemove"                           AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.ParallelBuildProjectFactory"                         AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Adds SCC information into the pdb files for the symbol server -->
  <UsingTask TaskName="Aderant.Build.Tasks.SourceIndex"                                         AssemblyFile="$(BuildToolsDirectory)\Aderant.Build.Tasks.dll" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Publishes pdb files to the symbol server -->
  <UsingTask TaskName="Aderant.Build.Tasks.PublishSymbols"                                      AssemblyFile="$(BuildToolsDirectory)\Aderant.Build.Tasks.dll" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Creates "fakes" builds in TFS -->
  <UsingTask TaskName="Aderant.Build.Tasks.PublishBuild"                                        AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Closes and finalizes a build -->
  <UsingTask TaskName="Aderant.Build.Tasks.FinalizeBuild"                                       AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Converts dotCover XML report to Cobertura XML format -->
  <UsingTask TaskName="Aderant.Build.Tasks.CoberturaReportConverter"                            AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Adds solution build details into TFS so the build can track warnings etc -->
  <UsingTask TaskName="Aderant.Build.Tasks.AddBuildProjectNode"                                 AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.CheckCertificate"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.ThirdPartyPackager"                                  AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- For zip seed packages. -->
  <UsingTask TaskName="Aderant.Build.Tasks.SeedPackagePacking"                                  AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GetAssembliesWithTraits"                             AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GetFileVersionInfo"                                  AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.CheckFreeSpace"                                      AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.FilterItemGroup"                                     AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GitVersion"                                          AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.Hash"                                                AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.WriteLinesToFile"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.ReadAssemblyInfo"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.PrintBanner"                                         AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="Aderant.Build.Tasks.WaitForDebugger"                                     AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GetPropertiesFromContext"                            AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.GetOrPutContextVariable"                             AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.PublishArtifacts"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.RetrieveArtifacts"                                   AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.WriteBuildStateFile"                                 AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  <UsingTask TaskName="Aderant.Build.Tasks.TrackProjectOutputs"                                 AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />
  

  <!-- Debugging task -->
  <UsingTask TaskName="Aderant.Build.Tasks.InspectItemGroup"                                    AssemblyFile="$(BuildAssembly)" Condition="'$(IsCustomBuild)' != 'true'" />

  <PropertyGroup>
    <!-- Visual Studio Environment-->
    <VsCommonTools Condition="'$(VS100COMNTOOLS)' != ''">$(VS100COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS110COMNTOOLS)' != ''">$(VS110COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS120COMNTOOLS)' != ''">$(VS120COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS140COMNTOOLS)' != ''">$(VS140COMNTOOLS)</VsCommonTools>

    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '12.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '15.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>

    <MSBuildCommunityTasksPath Condition="'$(MSBuildCommunityTasksPath)' == ''">$(MSBuildThisFileDirectory)\Tasks\MSBuild.Community.Tasks\</MSBuildCommunityTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" Condition="'$(NoMSBuildCommunityTasks)' != 'true'" />
  <Import Project="Aderant.Build.Versioning.targets" />

  <!--
    ==========================================================================================
      Prepare Build Environment
      Builds the Build.Infrastructure assemblies and tools required by the build process
    ==========================================================================================
  -->
  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' == 'true'">
    <!-- This is just a stub -->
  </Target>

  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' != 'true' And '$(CompileBuildSystem)' != 'false'">
    <Error Condition="'$(BuildScriptsDirectory)' == ''" Text="No value specified for BuildScriptsDirectory" />

    <Message Text="Setting up build environment from: $(BuildScriptsDirectory) in project $(MSBuildThisFileFullPath)" />

    <Exec Condition="'$(IsDesktopBuild)' == 'false'"
      Command="$(BuildScriptsDirectory)\paket.exe restore" WorkingDirectory="$(BuildScriptsDirectory)..\..\" />

    <ItemGroup>
      <!-- Desktop/Common projects -->
      <Projects Include="$(BuildSourcesDirectory)FxCopCmd\FxCopCmd.csproj" />
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build\Aderant.Build.csproj" />

      <!-- Server/CI projects -->
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build.Tasks\Aderant.Build.Tasks.csproj"
        Condition="'$(IsDesktopBuild)' == 'false'" />
      <Projects Include="$(BuildSourcesDirectory)WarningRatchet\WarningRatchet.csproj"
        Condition="'$(IsDesktopBuild)' == 'false'" />
    </ItemGroup>

    <PropertyGroup>
      <PrepareBuildEnvironmentProperties>ResolveAssemblyReferencesSilent=true;DoNotCopyLocalIfInGac=true</PrepareBuildEnvironmentProperties>
    </PropertyGroup>

    <MSBuild
      Projects="@(Projects)"
      BuildInParallel="true"
      UnloadProjectsOnCompletion="true"
      Properties="$(PrepareBuildEnvironmentProperties)"
      Condition="'$(Rebuild)' != 'true'" />

    <MSBuild
      Projects="@(Projects)"
      BuildInParallel="true"
      UnloadProjectsOnCompletion="true"
      Properties="$(PrepareBuildEnvironmentProperties)"
      Targets="Rebuild"
      Condition="'$(Rebuild)' == 'true'" />

    <CheckFreeSpace Condition="'$(IsDesktopBuild)' != 'true'"
      FreeSpace="10"
      Units="GB" />
  </Target>

  <UsingTask
    TaskName="GetBranchRootFromServerPath"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)">
    <ParameterGroup>
      <BuildProjectFolderPath ParameterType="System.String" Required="true" />
      <BranchRoot ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
        int pos = BuildProjectFolderPath.IndexOf("Modules/", StringComparison.OrdinalIgnoreCase);
        BranchRoot = BuildProjectFolderPath.Substring(0, pos);
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="XDocumentPoke"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Query ParameterType="System.String" Required="true" />
      <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code>
        <![CDATA[
var doc = XDocument.Load(File);

var root = doc.Root;

var parts = Query.Split('/');

// Skip(1) is a bit of a hack - assumes the XPath includes the root element
foreach (string element in parts.Skip(1)) {
    var descendant = root.Descendants(element).FirstOrDefault();
    if (descendant == null) {
        descendant = new XElement(element);
        root.Add(descendant);
    }
    root = descendant;
}

var contentToAdd = XElement.Parse(Value);

if (!root.Descendants(contentToAdd.Name).Any()) {
  root.Add(contentToAdd);
}

doc.Save(File);
]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- 
    Import the users project into our project space if they supplied a project to call back into 
    This makes all of the properties and tasks loaded here available to ProjectToBuild natively
  -->
  <Import Project="$(ProjectToBuild)" Condition="'$(ProjectToBuild)' != ''" />


  <Target Name="FindProductManifest"
    AfterTargets="PrepareBuildEnvironment"
    Condition="'$(IsDesktopBuild)' != 'true' And '$(ProductManifestPath)' == '' And '$(BUILD_REPOSITORY_PROVIDER)' != 'TfsGit'">

    <GetBranchRootFromServerPath
      BuildProjectFolderPath="$(BuildProjectFolderPath)">
      <Output PropertyName="BranchRoot"
        TaskParameter="BranchRoot" />
    </GetBranchRootFromServerPath>

    <PropertyGroup>
      <ProductManifestServerPath>$(BranchRoot)Modules/ExpertManifest.xml</ProductManifestServerPath>
      <ProductManifestPath>$(BuildScriptsDirectory)\ExpertManifest.xml</ProductManifestPath>
    </PropertyGroup>

    <Exec Command="TF.exe vc view /collection:$(TeamFoundationServerUrl) $(ProductManifestServerPath) /output:$(ProductManifestPath)"
      WorkingDirectory="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\..\IDE" />

  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->
  <Target Name="SetBuildNumbers"
    Condition="('$(IsDesktopBuild)' != 'true' Or '$(IsCustomBuild)' == 'true')">

    <PropertyGroup>
      <VersionMajor Condition="'$(VersionMajor)' == ''">1</VersionMajor>
      <VersionMinor Condition="'$(VersionMinor)' == ''">8</VersionMinor>
      <VersionBuild Condition="'$(VersionBuild)' == ''">0</VersionBuild>
      <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    </PropertyGroup>

    <Version
      BuildType="Automatic"
      RevisionType="Automatic"
      Major="$(VersionMajor)"
      Minor="$(VersionMinor)" >
      <Output TaskParameter="Major" PropertyName="Major" />
      <Output TaskParameter="Minor" PropertyName="Minor" />
      <Output TaskParameter="Build" PropertyName="Build" />
      <Output TaskParameter="Revision" PropertyName="Revision" />
    </Version>

    <PropertyGroup>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
      <AssemblyVersion>$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)</AssemblyVersion>
    </PropertyGroup>

    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!-- 
    ===========================================================
    Source Indexing properties 
    ===========================================================
  -->
  <PropertyGroup>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' == 'true'">C:\Temp\SymbolStore</SymbolStore>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' != 'true'">\\SVFP312\ExpertSuite\Symbols\</SymbolStore>

    <SymbolStoreLock Condition="'$(SymbolStoreLock)' == ''">$(SymbolStore)symstore.lock</SymbolStoreLock>

    <SymStorePath Condition="'$(WindowsSdkDir)' != '' And Exists('$(WindowsSdkDir)')">$(WindowsSdkDir)</SymStorePath>
    <SymStorePath Condition="'$(WindowsSDK80Path)' != '' And Exists('$(WindowsSDK80Path)')">$(WindowsSDK80Path)</SymStorePath>
    <SymStorePath Condition="'$(SymStorePath)' != ''">$(SymStorePath)Debuggers\x64\</SymStorePath>

    <TeamProject Condition="'$(TeamProject)' == ''">ExpertSuite</TeamProject>

    <!-- Default to the production TFS server -->
    <TeamFoundationServerUrl Condition="'$(TeamFoundationServerUrl)' == ''">http://tfs:8080/tfs/aderant</TeamFoundationServerUrl>

    <SymbolPublishFile Condition="'$(SymbolPublishFile)' == ''">$(SolutionDirectoryPath)SymbolsToPublish.txt</SymbolPublishFile>
  </PropertyGroup>

  <Target Name="IndexSourcesAndPublishSymbolsCore" Condition="'$(BUILD_REPOSITORY_PROVIDER)' != 'TfsGit'">
    <Error Condition="'@(CompiledAssemblies)' == ''" Text="There are no outputs from the build" />

    <ItemGroup>
      <!-- Transform all compiled outputs into a matching pdb -->
      <Symbols Include="@(ModuleBuildOutput->'%(RootDir)%(Directory)%(Filename).pdb')"
        Condition="'%(ModuleBuildOutput.OutputType)' == 'Module'" />

      <!-- Check if the pdb exists -->
      <AllSymbolFiles Include="@(Symbols)"
        Condition="Exists(%(Symbols.FullPath))" />
    </ItemGroup>

    <ItemGroup>
      <SymbolFiles Include="@(AllSymbolFiles->Distinct())" />
    </ItemGroup>

    <SourceIndex
      SymbolFiles="@(SymbolFiles)"
      TeamProjectRootDirectory="-"
      TeamProjectName="$(TeamProject)"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      WorkspaceName="$(WorkspaceName)"
      WorkspaceOwner="$(WorkspaceOwner)"
      FailOnNoSourceInformationFound="false"
      KeepTempFileForDebugging="false" />

    <Message Text="Using SymStore: $(SymStorePath)" />
    <Error Condition="!Exists('$(SymStorePath)')" Text="Cannot find SymStore.exe at $(SymStorePath)" />

    <WriteLinesToFile File="$(SymbolPublishFile)"
      Lines="@(SymbolFiles)"
      Overwrite="true" />

    <CallTarget Targets="PublishSymbols" />
  </Target>


  <Target Name="PublishSymbols" Condition="false">
    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(BranchName)</ProductName>
      <BuildToAssociateWith Condition="'$(BuildAll)' != 'true'">$(BuildUri)</BuildToAssociateWith>
      <BuildToAssociateWith Condition="'$(BuildAll)' == 'true'">$(PublishedBuildUri)</BuildToAssociateWith>
      <ProductName>$(ProductName)[$(BuildToAssociateWith)]</ProductName>
    </PropertyGroup>

    <Error Condition="'$(BuildToAssociateWith)' == ''" Text="The build system is unsure what build to associate the symbols with" />

    <!-- @ before the variable as we want @Symbols.txt so it is treated as a response file -->
    <PublishSymbols
      Condition="Exists('$(SymbolPublishFile)')"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildToAssociateWith)"
      Product="$(ProductName)"
      Version="$(FileVersion)"
      LockFile="$(SymbolStoreLock)"
      WindowsSdkPath="$(SymStorePath)"
      Command="add"
      Files="@$(SymbolPublishFile)"
      Store="$(SymbolStore)"
      LogStandardErrorAsError="false"
      YieldDuringToolExecution="true" />
  </Target>

  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->
  <Target Name="MarkBuildStepAsFailed"
    Condition="'$(IsDesktopBuild)' != 'true' And '$(IsCustomBuild)' != 'true'">
    <Message Text="Marking build as failed" />

    <CallTarget Targets="FinalizeBuild" />

  </Target>

</Project>