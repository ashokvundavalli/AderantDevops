<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="14.0"
  DefaultTargets="PrepareBuildEnvironment"
  TreatAsLocalProperty="BuildScriptsDirectory;BuildNumber">

  <PropertyGroup Label="TeamBuild">
    <SkipWorkItemCreation>true</SkipWorkItemCreation>
    <!-- We need a custom task for this as this will associate all work items to a build even if the build doesn't relate to the work item -->
    <UpdateAssociatedWorkItems>false</UpdateAssociatedWorkItems>
    <StopOnFirstFailure>true</StopOnFirstFailure>
    <StopOnTestFailure>true</StopOnTestFailure>
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
  </PropertyGroup>

  <PropertyGroup>
    <IsDesktopBuild Condition="'$(IsDesktopBuild)' == ''">true</IsDesktopBuild>
    
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' == ''">$(MSBuildThisFileDirectory)\</BuildScriptsDirectory>
    <BuildScriptsDirectory Condition="'$(BuildScriptsDirectory)' != ''">$([System.IO.Path]::GetFullPath('$(BuildScriptsDirectory)'))</BuildScriptsDirectory>
    
    <!-- Inject per CSharp project overrides. This target is imported once for each CSharp project and allows us access to project level variables -->
    <CustomAfterMicrosoftCSharpTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.CSharp.targets</CustomAfterMicrosoftCSharpTargets>
    <CustomAfterMicrosoftCommonTargets Condition="'$(IsCustomBuild)' != 'true'">$(BuildScriptsDirectory)Aderant.CustomAfterMicrosoftCommon.targets</CustomAfterMicrosoftCommonTargets>
    
    <BuildScriptsDirectory Condition="!HasTrailingSlash('$(BuildScriptsDirectory)')">$(BuildScriptsDirectory)\</BuildScriptsDirectory>
    <BuildToolsDirectory Condition="'$(BuildToolsDirectory)' == ''">$(BuildScriptsDirectory)..\Build.Tools\</BuildToolsDirectory>
    <BuildSourcesDirectory Condition="'$(BuildSourcesDirectory)' == ''">$(BuildScriptsDirectory)..\Sources\</BuildSourcesDirectory>

    <ProductManifestPath Condition="'$(ProductManifestPath)' == ''">$(BuildScriptsDirectory)..\Package\ExpertManifest.xml</ProductManifestPath>

    <BuildAssembly>$(BuildToolsDirectory)\Aderant.Build.dll</BuildAssembly>
    <PrepareBuildEnvironmentTargetImported>true</PrepareBuildEnvironmentTargetImported>
    <AderantCommonTargetsImported>true</AderantCommonTargetsImported>
  </PropertyGroup>

  <!-- Gets the platform of an assembly (e.g. x86, x64 or AnyCPU) -->
  <UsingTask TaskName="GetAssemblyPlatform"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Gets the dependencies for a given module -->
  <UsingTask TaskName="GetDependencies"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="MakeSymlink"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="DependencyChecker"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="BuildConfigurationCheck"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="FilterModules"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="AsyncExec"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="ExtractWebModule"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="GetCopyLocalItemsToRemove"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="ParallelBuildProjectFactory"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Adds SCC information into the pdb files for the symbol server -->
  <UsingTask TaskName="SourceIndex"
             AssemblyFile="$(BuildToolsDirectory)\Aderant.Build.Tasks.dll"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Publishes pdb files to the symbol server -->
  <UsingTask TaskName="PublishSymbols"
             AssemblyFile="$(BuildToolsDirectory)\Aderant.Build.Tasks.dll"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Creates "fakes" builds in TFS -->
  <UsingTask TaskName="PublishBuild"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Closes and finalizes a build -->
  <UsingTask TaskName="FinalizeBuild"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <!-- Adds solution build details into TFS so the build can track warnings etc -->
  <UsingTask TaskName="AddBuildProjectNode"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <UsingTask TaskName="CheckCertificate"
             AssemblyFile="$(BuildAssembly)"
             Condition="'$(IsCustomBuild)' != 'true'" />

  <PropertyGroup>
    <!-- Visual Studio Environment-->
    <VsCommonTools Condition="'$(VS100COMNTOOLS)' != ''">$(VS100COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS110COMNTOOLS)' != ''">$(VS110COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS120COMNTOOLS)' != ''">$(VS120COMNTOOLS)</VsCommonTools>
    <VsCommonTools Condition="'$(VS140COMNTOOLS)' != ''">$(VS140COMNTOOLS)</VsCommonTools>

    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '12.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(VisualStudioVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>

    <MSBuildCommunityTasksPath Condition="'$(MSBuildCommunityTasksPath)' == ''">$(MSBuildThisFileDirectory)\Tasks\MSBuild.Community.Tasks\</MSBuildCommunityTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />

  <!--
    ==========================================================================================
      Prepare Build Environment
      Builds the Build.Infrastructure assemblies and tools required by the build process
    ==========================================================================================
  -->
  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' == 'true'">
    <!-- This is just a stub -->
  </Target>

  <Target Name="PrepareBuildEnvironment" Condition="'$(IsCustomBuild)' != 'true'">
    <Error Condition="'$(BuildScriptsDirectory)' == ''" Text="No value specified for BuildScriptsDirectory" />

    <Message Text="Setting up build environment from: $(BuildScriptsDirectory) in project $(MSBuildThisFileFullPath)" />

    <ItemGroup>
      <Projects Include="$(BuildSourcesDirectory)FxCopCmd\FxCopCmd.csproj"></Projects>
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build\Aderant.Build.csproj"></Projects>
      <Projects Include="$(BuildSourcesDirectory)Aderant.Build.Tasks\Aderant.Build.Tasks.csproj"
                Condition="'$(IsDesktopBuild)' == 'false' And '$(TestRunType)' == ''" />
    </ItemGroup>

    <MSBuild
      Projects="@(Projects)"
      BuildInParallel="true"
      UnloadProjectsOnCompletion="true" />

    <!-- Setup environment for JavaScript tests -->
    <Exec Command="reg import $(BuildScriptsDirectory)Registry\FEATURE_LOCALMACHINE_LOCKDOWN.reg" 
          YieldDuringToolExecution="true" />

  </Target>

  <!--
    ==========================================================================================
        Version Numbers
    ==========================================================================================
  -->
  <Target Name="SetBuildNumbers"
          Condition="('$(IsDesktopBuild)' != 'true' Or '$(IsCustomBuild)' == 'true') And (('$(FileVersion)' == '' And '$(AssemblyVersion)' == '') Or '$(ForceVersion)' == 'true')">

    <PropertyGroup>
      <VersionMajor Condition="'$(VersionMajor)' == ''">1</VersionMajor>
      <VersionMinor Condition="'$(VersionMinor)' == ''">8</VersionMinor>
      <VersionBuild Condition="'$(VersionBuild)' == ''">0</VersionBuild>
      <VersionRevision Condition="'$(VersionRevision)' == ''">0</VersionRevision>
    </PropertyGroup>

    <Version BuildType="Automatic"
             RevisionType="Automatic"
             Major="$(VersionMajor)"
             Minor="$(VersionMinor)" >
      <Output TaskParameter="Major"
              PropertyName="Major" />
      <Output TaskParameter="Minor"
              PropertyName="Minor" />
      <Output TaskParameter="Build"
              PropertyName="Build" />
      <Output TaskParameter="Revision"
              PropertyName="Revision" />
    </Version>

    <PropertyGroup>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
      <AssemblyVersion>$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)</AssemblyVersion>
    </PropertyGroup>

    <Message Text="AssemblyVersion = $(AssemblyVersion)" />
    <Message Text="FileVersion = $(FileVersion)" />
  </Target>

  <!-- 
    ===========================================================
    Source Indexing properites 
    ===========================================================
  -->
  <PropertyGroup>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' == 'true'">C:\Temp\SymbolStore</SymbolStore>
    <SymbolStore Condition="'$(SymbolStore)' == '' And '$(IsDesktopBuild)' != 'true'">\\SVFP312\ExpertSuite\Symbols\</SymbolStore>

    <SymbolStoreLock Condition="'$(SymbolStoreLock)' == ''">$(SymbolStore)symstore.lock</SymbolStoreLock>

    <SymStorePath Condition="'$(WindowsSdkDir)' != '' And Exists('$(WindowsSdkDir)')">$(WindowsSdkDir)</SymStorePath>
    <SymStorePath Condition="'$(WindowsSDK80Path)' != '' And Exists('$(WindowsSDK80Path)')">$(WindowsSDK80Path)</SymStorePath>
    <SymStorePath Condition="'$(SymStorePath)' != ''">$(SymStorePath)Debuggers\x64\</SymStorePath>

    <TeamProject Condition="'$(TeamProject)' == ''">ExpertSuite</TeamProject>

    <!-- Default to the production TFS server -->
    <TeamFoundationServerUrl Condition="'$(TeamFoundationServerUrl)' == ''">http://tfs:8080/tfs/aderant</TeamFoundationServerUrl>

    <SymbolPublishFile Condition="'$(SymbolPublishFile)' == ''">$(SolutionDirectoryPath)SymbolsToPublish.txt</SymbolPublishFile>
  </PropertyGroup>

  <Target Name="IndexSourcesAndPublishSymbolsCore">
    <BuildStep
     Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
     Message="$(BuildStepModuleName) Indexing sources and publish symbols"
     TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
     BuildUri="$(BuildUri)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <Error Condition="'@(CompiledAssemblies)' == ''" Text="There are no outputs from the build" />

    <ItemGroup>
      <!-- Tranform all compiled outputs into a matching pdb -->
      <Symbols Include="@(ModuleBuildOutput->'%(RootDir)%(Directory)%(Filename).pdb')"
               Condition="'%(ModuleBuildOutput.OutputType)' == 'Module'" />

      <!-- Check if the pdb exists -->
      <AllSymbolFiles Include="@(Symbols)"
                      Condition="Exists(%(Symbols.FullPath))" />
    </ItemGroup>

    <ItemGroup>
      <SymbolFiles Include="@(AllSymbolFiles->Distinct())" />
    </ItemGroup>

    <SourceIndex
      SymbolFiles="@(SymbolFiles)"
      TeamProjectRootDirectory="-"
      TeamProjectName="$(TeamProject)"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      WorkspaceName="$(WorkspaceName)"
      WorkspaceOwner="$(WorkspaceOwner)"
      FailOnNoSourceInformationFound="false"
      KeepTempFileForDebugging="false" />

    <Message Text="Using SymStore: $(SymStorePath)" />
    <Error Condition="!Exists('$(SymStorePath)')" Text="Cannot find SymStore.exe at $(SymStorePath)" />
    
    <WriteLinesToFile File="$(SymbolPublishFile)"
                      Lines="@(SymbolFiles)"
                      Overwrite="true" />

    <CallTarget Targets="PublishSymbols" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
  </Target>

  
  <Target Name="PublishSymbols" Condition="false">
    <BuildStep
       Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
       Message="$(BuildStepModuleName) Publish symbols"
       TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
       BuildUri="$(BuildUri)">
      <Output
        TaskParameter="id"
        PropertyName="BuildStepId" />
    </BuildStep>

    <PropertyGroup>
      <ProductName Condition="'$(ProductName)' == ''">$(BranchName)</ProductName>
      <BuildToAssociateWith Condition="'$(BuildAll)' != 'true'">$(BuildUri)</BuildToAssociateWith>
      <BuildToAssociateWith Condition="'$(BuildAll)' == 'true'">$(PublishedBuildUri)</BuildToAssociateWith>
      <ProductName>$(ProductName)[$(BuildToAssociateWith)]</ProductName>
    </PropertyGroup>
    
    <Error Condition="'$(BuildToAssociateWith)' == ''" Text="The build system is unsure what build to associate the symbols with" />
    
    <!-- @ before the variable as we want @Symbols.txt so it is treated as a response file -->
    <PublishSymbols
      Condition="Exists('$(SymbolPublishFile)')"
      TeamProjectCollectionUri="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildToAssociateWith)"
      Product="$(ProductName)"
      Version="$(FileVersion)"
      LockFile="$(SymbolStoreLock)"
      WindowsSdkPath="$(SymStorePath)"
      Command="add"
      Files="@$(SymbolPublishFile)"
      Store="$(SymbolStore)" 
      LogStandardErrorAsError="false"
      YieldDuringToolExecution="true" />

    <BuildStep
      Condition="('$(IsDesktopBuild)'!='true') And ('$(IsCustomBuild)'!='true')"
      TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
      BuildUri="$(BuildUri)"
      Id="$(BuildStepId)"
      Status="Succeeded" />
  </Target>


</Project>