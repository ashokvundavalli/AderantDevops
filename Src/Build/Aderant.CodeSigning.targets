<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" 
         ToolsVersion="14.0"
         DefaultTargets="SignApplications">

  <PropertyGroup>
    <CodeSigningEnabled Condition="'$(CodeSigningEnabled)' == ''">true</CodeSigningEnabled>
    <CertificateHash>9AB8870EE441103F76009BE6141265D0D9B6197C</CertificateHash>
    <TimestampUrl>http://timestamp.digicert.com</TimestampUrl>
    
    <!-- Search 32-bit registry first on 32-bit Windows to ensure we get the 32-bit key if present -->
    <!-- Nothing like consistency eh? -->
    <!-- Sign Tool -->
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>

    <!-- Mage -->
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>

    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>
    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>

    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(WindowsKits_81)' != ''">
      <PropertyGroup>
        <WindowsKitRoot>$(WindowsKits_81)</WindowsKitRoot>
      </PropertyGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(WindowsSdkDir_81A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81A)</WindowsSdkDir>
        <FxToolsDir>NETFX 4.5.1 Tools</FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_81)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_71A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_71A)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup>
    <SignToolPath>$(WindowsKitRoot)bin\x64\signtool.exe</SignToolPath>
    <MageToolPath>$(WindowsSdkDir)bin\$(FxToolsDir)\mage.exe</MageToolPath>
  </PropertyGroup>
  
  <UsingTask
    TaskName="GetAssembliesToSign"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Assemblies ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>      
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
        ArrayList arrayList = new ArrayList();

        foreach (var file in Files) {
          string fullPath = file.GetMetadata("FullPath");
        
          Log.LogMessage("ItemSpec: " + file.ItemSpec);
          Log.LogMessage("Scanning: " + fullPath);
          FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(fullPath);
          

          bool isAderantAssembly = false;
          if (versionInfo.CompanyName != null) {
            Log.LogMessage("Reading CompanyName out of file " + fullPath);
            isAderantAssembly = versionInfo.CompanyName.IndexOf("Aderant", StringComparison.OrdinalIgnoreCase) >= 0;
            Log.LogMessage("CompanyName: " + versionInfo.CompanyName);
          } else {
            Log.LogMessage("CompanyName was not set on file " + fullPath + " (" + versionInfo.FileVersion + ")");
          }

          if (isAderantAssembly) {
            Log.LogMessage("Detected Aderant asset");
            try {
              var assemblyName = AssemblyName.GetAssemblyName(fullPath);
              arrayList.Add(file);
              Log.LogMessage("File '" + fullPath + "' was detected as an Aderant asset.");
            } catch (BadImageFormatException ex) {
              Log.LogMessage("Whoops, something went wrong: ", ex.ToString());
            }
          }
        }
        this.Assemblies = (ITaskItem[])arrayList.ToArray(typeof(ITaskItem));
      </Code>
    </Task>
  </UsingTask>
  

  <Target Name="ValidateSigningEnvironment">
    <Error Condition="'$(WindowsKitRoot)' == ''" Text="WindowsKitRoot is undefined" />
    <Error Condition="'$(WindowsSdkDir)' == ''" Text="WindowsSdkDir is undefined" />
    <Error Condition="'$(FxToolsDir)' == ''" Text="FxToolsDir is undefined" />

    <Error Condition="!Exists($(SignToolPath))" Text="SignTool.exe not found at path $(SignToolPath)" />
    <Error Condition="!Exists($(MageToolPath))" Text="mage.exe not found at path $(MageToolPath)" />
  </Target>
  

  <Target Name="CheckCodeSigningCertitifcate" 
          AfterTargets="PrepareBuildEnvironment" 
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(ValidSigningEnvironment)' == ''">
    
    <CheckCertificate ThumbPrint="$(CertificateHash)" />
    
    <PropertyGroup>
      <ValidSigningEnvironment>true</ValidSigningEnvironment>
    </PropertyGroup>
  </Target>
  
  
  <Target Name="SignApplications" AfterTargets="CoreCompile" DependsOnTargets="ValidateSigningEnvironment" Condition="'$(CodeSigningEnabled)' == 'true'">
    <Message Text="Signing applications in $(IntermediateOutputPath) for $(MSBuildProjectFile)" />
    
    <ItemGroup>
      <Applications Include="$(IntermediateOutputPath)**\*.exe;"
                    Exclude="$(IntermediateOutputPath)**\*CO.exe;
                             $(IntermediateOutputPath)**\Aderant.Development*.exe;
                             $(IntermediateOutputPath)**\Aderant.MatterCenterIntegration*;
                             $(IntermediateOutputPath)**\ExpertService*;
                             $(IntermediateOutputPath)**\*Update*; 
                             $(IntermediateOutputPath)**\*Performance*" />
    </ItemGroup>
    
    <GetAssembliesToSign Files="@(Applications)">
      <Output TaskParameter="Assemblies" 
              ItemName="Assemblies" />
    </GetAssembliesToSign>    

    <Message Text="Signing application: %(Assemblies.Filename)%(Assemblies.Extension) with version .NET $(TargetFrameworkVersion)" Condition="'@(Assemblies)' != ''" />

    <Microsoft.Build.Tasks.SignFile 
      Condition="'@(Assemblies)' != ''"
      CertificateThumbprint="$(CertificateHash)" 
      TimestampUrl="$(TimestampUrl)"
      TargetFrameworkVersion="$(TargetFrameworkVersion)" 
      SigningTarget="@(Assemblies)" />
    
  </Target>
          

  <Target Name="SignInstallers" Condition="'$(CodeSigningEnabled)' == 'true'">
    <Message Text="Signing installers in $(BinModuleDirectory)" />

    <ItemGroup>
      <Installers Include="$(BinModuleDirectory)**\*expert*.msi;
                           $(BinModuleDirectory)**\deploymentmanager.msi;
                           $(BinModuleDirectory)**\*wizard*.msi;" />
    </ItemGroup>

    <Message Text="Signing installer: %(Installers.Filename)%(Installers.Extension)" Condition="'@(Installers)' != ''" />

    <Exec
      Condition="'@(Installers)' != '' And '$(SignToolPath)' != ''"
      ContinueOnError="false"
      IgnoreExitCode="false"
      Command='"$(SignToolPath)" sign /t $(TimestampUrl) /fd SHA256 /sha1 $(CertificateHash) /s "My" "%(Installers.FullPath)"'
      YieldDuringToolExecution="true" />
  </Target>
  
  
  <Target Name="SignClickOnceFiles" AfterTargets="SignInstallers" Condition="'$(CodeSigningEnabled)' == 'true'">
    <Message Text="Signing ClickOnce manifests in $(BinModuleDirectory)"/>
    <PropertyGroup>
      <MinVersion Condition="'$(MinVersion)' == ''">8.0.2.0</MinVersion>
    </PropertyGroup>
    
    <ItemGroup>
      <!-- Grab all CO content -->
      <ClickOnceSignFiles Include="$(BinModuleDirectory)**\*CO*exe" Exclude="$(BinModuleDirectory)**\app.publish\**" />
    </ItemGroup>

    <ItemGroup>
      <ClickOnceSignFiles Include="@(ClickOnceSignFiles)">
        <!-- Include the manifest and application files by convention -->
        <Manifest>$(BinModuleDirectory)%(RecursiveDir)%(FileName)%(Extension).manifest</Manifest>
        <Application>$(BinModuleDirectory)%(RecursiveDir)%(FileName).application</Application>
      </ClickOnceSignFiles>
    </ItemGroup>
    
    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest))"
          ContinueOnError="false" 
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -sign %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash)" 
          YieldDuringToolExecution="true" />

    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest)) And Exists(%(ClickOnceSignFiles.Application))"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -update %(ClickOnceSignFiles.Application) -UseManifestForTrust true -IncludeProviderURL false -AppManifest %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash) -MinVersion &quot;$(MinVersion)&quot;" 
          YieldDuringToolExecution="true" />

  </Target>

</Project>


