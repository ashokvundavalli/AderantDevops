<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="14.0">

  <PropertyGroup>
    <CodeSigningEnabled Condition="'$(CodeSigningEnabled)' == ''">true</CodeSigningEnabled>
    <CertificateHash>1c2a3e8f5e969fd0a526f917100f6231faacb460</CertificateHash>


    <!-- Search 32-bit registry first on 32-bit Windows to ensure we get the 32-bit key if present -->
    <!-- Nothing like consistency eh? -->
    <!-- Sign Tool -->
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>

    <!-- Mage -->
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>

    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>
    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>

    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
  </PropertyGroup>

  <ItemGroup>
    <TimestampUrls Include="http://timestamp.digicert.com" />
    <TimestampUrls Include="http://timestamp.comodoca.com" />
  </ItemGroup>

  <Choose>
    <When Condition="'$(WindowsKits_81)' != ''">
      <PropertyGroup>
        <WindowsKitRoot>$(WindowsKits_81)</WindowsKitRoot>
      </PropertyGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(WindowsSdkDir_81A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81A)</WindowsSdkDir>
        <FxToolsDir>NETFX 4.5.1 Tools</FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_81)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_71A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_71A)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup>
    <SignToolPath>$(WindowsKitRoot)bin\x64\signtool.exe</SignToolPath>
    <MageToolPath>$(WindowsSdkDir)bin\$(FxToolsDir)\mage.exe</MageToolPath>
  </PropertyGroup>


  <Target Name="ValidateSigningEnvironment">
    <Error Condition="'$(WindowsKitRoot)' == ''" Text="WindowsKitRoot is undefined" />
    <Error Condition="'$(WindowsSdkDir)' == ''" Text="WindowsSdkDir is undefined" />
    <Error Condition="'$(FxToolsDir)' == ''" Text="FxToolsDir is undefined" />

    <Error Condition="!Exists($(SignToolPath))" Text="SignTool.exe not found at path $(SignToolPath)" />
    <Error Condition="!Exists($(MageToolPath))" Text="mage.exe not found at path $(MageToolPath)" />
  </Target>


  <Target Name="CheckCodeSigningCertificate"
          AfterTargets="PrepareBuildEnvironment"
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(ValidSigningEnvironment)' == ''">

    <CheckCertificate ThumbPrint="$(CertificateHash)" />

    <PropertyGroup>
      <ValidSigningEnvironment>true</ValidSigningEnvironment>
    </PropertyGroup>
  </Target>

  <Target Name="SignApplications"
          AfterTargets="CoreCompile"
          DependsOnTargets="ValidateSigningEnvironment;SignFile"
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(TargetFileName)' != '' And '$(IsDesktopBuild)' != 'true'">
  </Target>


  <Target Name="CollectAssembliesToSign">
    <!-- for performance we probably don't want to sign on the desktop as we need to make an HTTP call to the timestamp server -->

    <Message Text="Signing applications in $(IntermediateOutputPath) for $(MSBuildProjectFile)" />

    <ItemGroup>
      <Applications Include="$(IntermediateOutputPath)**\*.exe;
                             $(IntermediateOutputPath)**\*CO.exe;"
                    Exclude="$(IntermediateOutputPath)**\Aderant.Development*.exe;
                             $(IntermediateOutputPath)**\Aderant.MatterCenterIntegration*;
                             $(IntermediateOutputPath)**\*Update*;
                             $(IntermediateOutputPath)**\*Performance*" />
    </ItemGroup>

    <GetAssembliesWithTraits
      CompanyName="Aderant"
      Files="@(Applications)">
      <Output TaskParameter="Assemblies" ItemName="FilesToSign" />
    </GetAssembliesWithTraits>

    <PropertyGroup>
      <AlreadySignedKey>$([System.Guid]::NewGuid())</AlreadySignedKey>
      <AlreadySignedKey>$(AlreadySignedKey);@(FilesToSign)</AlreadySignedKey>
    </PropertyGroup>
  </Target>


  <!-- MSBuild does not allow updates to properties until a target is completed so we cannot conditionally
       exit the batching loop if the signing succeeded. However we can cheat and use String.Intern as a place to stash data
       and so not be beholden to the build engine rules -->
  <Target Name="TrySignFile"
          Outputs="%(TimestampUrls.Identity)">

    <PropertyGroup>
      <SignServer>%(TimestampUrls.Identity)</SignServer>
    </PropertyGroup>

    <Exec Condition="'@(FilesToSign)' != '' And '$([System.String]::IsInterned($(AlreadySignedKey)))' == ''"
          ContinueOnError="true"
          IgnoreStandardErrorWarningFormat="true"
          YieldDuringToolExecution="true"
          Command='"$(SignToolPath)" sign /t $(SignServer) /fd sha256 /sha1 $(CertificateHash) /d "%(FilesToSign.ProductName)" "%(FilesToSign.FullPath)"' />

    <PropertyGroup>
      <SignFileResult Condition="'$(SignFileResult)' == '' And '$(MSBuildLastTaskResult)' == 'true'">$([System.String]::Intern($(AlreadySignedKey)))</SignFileResult>
    </PropertyGroup>

    <Warning Condition="'$(SignFileResult)' == ''" Text="Failed to sign a file. Trying another timestamp server..." />
  </Target>


  <Target Name="SignFile" DependsOnTargets="CollectAssembliesToSign;TrySignFile">
    <Error Condition="'$(SignFileResult)' == ''" Text="Failed to sign @(FilesToSign)" />
  </Target>


  <Target Name="FindInstallersToSign">
    <ItemGroup>
      <Installers Include="$(BinModuleDirectory)**\*expert*.msi;
                           $(BinModuleDirectory)**\deploymentmanager.msi;
                           $(BinModuleDirectory)**\*wizard*.msi;" />
    </ItemGroup>
  </Target>


  <Target Name="SignInstallers"
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(SignApplications)' == 'true' And '$(IsCustomBuild)' != 'true'"
          DependsOnTargets="FindInstallersToSign">
    <CallTarget Targets="SignInstallersCore" Condition="'@(Installers)' != ''" />
  </Target>


  <Target Name="SignInstallersCore" DependsOnTargets="AssignInstallerVersionInfo;TrySignInstallers">
    <Error Condition="'$(InstallerSignedResult)' == ''" Text="Failed to sign @(Installers)" />
  </Target>


  <Target Name="AssignInstallerVersionInfo">
    <Message Text="Signing installer: %(Installers.Filename)%(Installers.Extension)" Condition="'@(Installers)' != ''" />

    <Aderant.Build.Tasks.GetFileVersionInfo
      Files="@(Installers)">
      <Output TaskParameter="FilesWithInfo" ItemName="InstallerFilesWithInfo" />
    </Aderant.Build.Tasks.GetFileVersionInfo>

    <Error Condition="'%(InstallerFilesWithInfo.ProductName)' == ''" Text="An installer title must be provided for %(InstallerFilesWithInfo.Filename)%(InstallerFilesWithInfo.Extension)" />

    <PropertyGroup>
      <InstallerSignedKey>$([System.Guid]::NewGuid())</InstallerSignedKey>
      <InstallerSignedKey>$(InstallerSignedKey);@(Installers)</InstallerSignedKey>
    </PropertyGroup>
  </Target>


  <Target Name="TrySignInstallers" Outputs="%(TimestampUrls.Identity)">
    <PropertyGroup>
      <SignServer>%(TimestampUrls.Identity)</SignServer>
    </PropertyGroup>

    <Exec
      Condition="'@(Installers)' != '' And '$([System.String]::IsInterned($(InstallerSignedKey)))' == ''"
      ContinueOnError="true"
      IgnoreStandardErrorWarningFormat="true"
      YieldDuringToolExecution="true"
      Command='"$(SignToolPath)" sign /t $(SignServer) /fd SHA256 /sha1 $(CertificateHash) /s "My" /d "%(InstallerFilesWithInfo.ProductName)" "%(InstallerFilesWithInfo.FullPath)"'/>

    <PropertyGroup>
      <InstallerSignedResult Condition="'$(InstallerSignedResult)' == '' And '$(MSBuildLastTaskResult)' == 'true'">$([System.String]::Intern($(InstallerSignedKey)))</InstallerSignedResult>
    </PropertyGroup>

    <Warning Condition="'$(InstallerSignedResult)' == ''" Text="Failed to sign a file. Trying another timestamp server..." />
  </Target>


  <Target Name="SignClickOnceFiles" AfterTargets="SignInstallers" Condition="'$(CodeSigningEnabled)' == 'true'">
    <Message Text="Signing ClickOnce manifests in $(BinModuleDirectory)"/>
    <PropertyGroup>
      <MinVersion Condition="'$(MinVersion)' == ''">8.0.2.0</MinVersion>
    </PropertyGroup>

    <ItemGroup>
      <!-- Grab all CO content -->
      <ClickOnceSignFiles Include="$(BinModuleDirectory)**\*CO*exe" Exclude="$(BinModuleDirectory)**\app.publish\**" />
    </ItemGroup>

    <ItemGroup>
      <ClickOnceSignFiles Include="@(ClickOnceSignFiles)">
        <!-- Include the manifest and application files by convention -->
        <Manifest>$(BinModuleDirectory)%(RecursiveDir)%(FileName)%(Extension).manifest</Manifest>
        <Application>$(BinModuleDirectory)%(RecursiveDir)%(FileName).application</Application>
      </ClickOnceSignFiles>
    </ItemGroup>

    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest))"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -sign %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash)"
          YieldDuringToolExecution="true" />

    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest)) And Exists(%(ClickOnceSignFiles.Application))"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -update %(ClickOnceSignFiles.Application) -UseManifestForTrust true -IncludeProviderURL false -AppManifest %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash) -MinVersion &quot;$(MinVersion)&quot;"
          YieldDuringToolExecution="true" />

  </Target>

</Project>


