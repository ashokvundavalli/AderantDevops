<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="14.0"
         DefaultTargets="SignApplications">

  <PropertyGroup>
    <CodeSigningEnabled Condition="'$(CodeSigningEnabled)' == ''">true</CodeSigningEnabled>
    <CertificateHash>1c2a3e8f5e969fd0a526f917100f6231faacb460</CertificateHash>
    <TimestampUrl>http://timestamp.digicert.com</TimestampUrl>

    <!-- Search 32-bit registry first on 32-bit Windows to ensure we get the 32-bit key if present -->
    <!-- Nothing like consistency eh? -->
    <!-- Sign Tool -->
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>
    <WindowsKits_81 Condition="'$(WindowsKits_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots@KitsRoot81)</WindowsKits_81>

    <!-- Mage -->
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>
    <WindowsSdkDir_71A Condition="'$(WindowsSdkDir_71A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v7.1A@InstallationFolder)</WindowsSdkDir_71A>

    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>
    <WindowsSdkDir_81 Condition="'$(WindowsSdkDir_81)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1@InstallationFolder)</WindowsSdkDir_81>

    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
    <WindowsSdkDir_81A Condition="'$(WindowsSdkDir_81A)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v8.1A@InstallationFolder)</WindowsSdkDir_81A>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(WindowsKits_81)' != ''">
      <PropertyGroup>
        <WindowsKitRoot>$(WindowsKits_81)</WindowsKitRoot>
      </PropertyGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(WindowsSdkDir_81A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81A)</WindowsSdkDir>
        <FxToolsDir>NETFX 4.5.1 Tools</FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_81)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_81)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
    <When Condition="'$(WindowsSdkDir_71A)' != ''">
      <PropertyGroup>
        <WindowsSdkDir>$(WindowsSdkDir_71A)</WindowsSdkDir>
        <FxToolsDir></FxToolsDir>
      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup>
    <SignToolPath>$(WindowsKitRoot)bin\x64\signtool.exe</SignToolPath>
    <MageToolPath>$(WindowsSdkDir)bin\$(FxToolsDir)\mage.exe</MageToolPath>
  </PropertyGroup>


  <Target Name="ValidateSigningEnvironment">
    <Error Condition="'$(WindowsKitRoot)' == ''" Text="WindowsKitRoot is undefined" />
    <Error Condition="'$(WindowsSdkDir)' == ''" Text="WindowsSdkDir is undefined" />
    <Error Condition="'$(FxToolsDir)' == ''" Text="FxToolsDir is undefined" />

    <Error Condition="!Exists($(SignToolPath))" Text="SignTool.exe not found at path $(SignToolPath)" />
    <Error Condition="!Exists($(MageToolPath))" Text="mage.exe not found at path $(MageToolPath)" />
  </Target>


  <Target Name="CheckCodeSigningCertitifcate"
          AfterTargets="PrepareBuildEnvironment"
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(ValidSigningEnvironment)' == ''">

    <CheckCertificate ThumbPrint="$(CertificateHash)" />

    <PropertyGroup>
      <ValidSigningEnvironment>true</ValidSigningEnvironment>
    </PropertyGroup>
  </Target>

  <Target Name="SignApplications" 
          AfterTargets="CoreCompile" 
          DependsOnTargets="ValidateSigningEnvironment" 
          Condition="'$(CodeSigningEnabled)' == 'true' And '$(TargetFileName)' != '' And '$(IsDesktopBuild)' != 'true'"> <!-- for performance we probably don't want to sign on the desktop as we need to make an HTTP call to the timestamp server -->

    <Message Text="Signing applications in $(IntermediateOutputPath) for $(MSBuildProjectFile)" />

    <ItemGroup>
      <Applications Include="$(IntermediateOutputPath)**\*.exe;"
                    Exclude="$(IntermediateOutputPath)**\*CO.exe;
                             $(IntermediateOutputPath)**\Aderant.Development*.exe;
                             $(IntermediateOutputPath)**\Aderant.MatterCenterIntegration*;
                             $(IntermediateOutputPath)**\ExpertService*;
                             $(IntermediateOutputPath)**\*Update*; 
                             $(IntermediateOutputPath)**\*Performance*" />
    </ItemGroup>

    <GetAssembliesWithTraits
        CompanyName="Aderant"
        Files="@(Applications)">
      <Output TaskParameter="Assemblies"
              ItemName="Assemblies" />
    </GetAssembliesWithTraits>

    <Exec Condition="'@(Assemblies)' != ''"
          Command='"$(SignToolPath)" sign /t $(TimestampUrl) /fd sha256 /sha1 $(CertificateHash) /d "%(Assemblies.ProductName)" "%(Assemblies.FullPath)"' />

  </Target>


  <Target Name="GetInstallersToSign" BeforeTargets="SignInstallers">
    <ItemGroup>
      <Installers Include="$(BinModuleDirectory)**\*expert*.msi;
                           $(BinModuleDirectory)**\deploymentmanager.msi;
                           $(BinModuleDirectory)**\*wizard*.msi;" />
    </ItemGroup>
  </Target>


  <Target Name="SignInstallers" Condition="'$(CodeSigningEnabled)' == 'true' And '@(Installers)' != ''">
    <Message Text="Signing installers in $(BinModuleDirectory)" />

    <Message Text="Signing installer: %(Installers.Filename)%(Installers.Extension)" Condition="'@(Installers)' != ''" />

    <Aderant.Build.Tasks.GetFileVersionInfo
      Files="@(Installers)">
      <Output TaskParameter="FilesWithInfo" ItemName="InstallerFilesWithInfo" />
    </Aderant.Build.Tasks.GetFileVersionInfo>
    
    <Error Condition="'%(InstallerFilesWithInfo.ProductName)' == ''" Text="An installer title must be provided for %(InstallerFilesWithInfo.Filename)%(InstallerFilesWithInfo.Extension)" />

    <Exec
      Condition="'@(Installers)' != '' And '$(SignToolPath)' != ''"
      ContinueOnError="false"
      IgnoreExitCode="false"
      Command='"$(SignToolPath)" sign /t $(TimestampUrl) /fd SHA256 /sha1 $(CertificateHash) /s "My" /d "%(InstallerFilesWithInfo.ProductName)" "%(InstallerFilesWithInfo.FullPath)"'
      YieldDuringToolExecution="true" />
  </Target>


  <Target Name="SignClickOnceFiles" AfterTargets="SignInstallers" Condition="'$(CodeSigningEnabled)' == 'true'">
    <Message Text="Signing ClickOnce manifests in $(BinModuleDirectory)"/>
    <PropertyGroup>
      <MinVersion Condition="'$(MinVersion)' == ''">8.0.2.0</MinVersion>
    </PropertyGroup>

    <ItemGroup>
      <!-- Grab all CO content -->
      <ClickOnceSignFiles Include="$(BinModuleDirectory)**\*CO*exe" Exclude="$(BinModuleDirectory)**\app.publish\**" />
    </ItemGroup>

    <ItemGroup>
      <ClickOnceSignFiles Include="@(ClickOnceSignFiles)">
        <!-- Include the manifest and application files by convention -->
        <Manifest>$(BinModuleDirectory)%(RecursiveDir)%(FileName)%(Extension).manifest</Manifest>
        <Application>$(BinModuleDirectory)%(RecursiveDir)%(FileName).application</Application>
      </ClickOnceSignFiles>
    </ItemGroup>

    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest))"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -sign %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash)"
          YieldDuringToolExecution="true" />

    <Exec Condition="Exists(%(ClickOnceSignFiles.Manifest)) And Exists(%(ClickOnceSignFiles.Application))"
          ContinueOnError="false"
          IgnoreExitCode="false"
          Command="&quot;$(MageToolPath)&quot; -update %(ClickOnceSignFiles.Application) -UseManifestForTrust true -IncludeProviderURL false -AppManifest %(ClickOnceSignFiles.Manifest) -CertHash $(CertificateHash) -MinVersion &quot;$(MinVersion)&quot;"
          YieldDuringToolExecution="true" />

  </Target>

</Project>


