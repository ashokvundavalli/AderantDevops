<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="BeforeModuleBuild"
         ToolsVersion="14.0">

  <Import Project="$(DirectoryBuildFile)" />
  <Import Project="Aderant.Build.Common.targets" />
  <Import Project="RM.TransformTemplates.Targets" />
  <Import Project="Aderant.TextTransform.targets" />


  <!-- 
    ==========================================================================================
        Build Configurations
    ==========================================================================================
  -->
  <!--<ItemGroup>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)' == 'Release'"
      Include="Release|AnyCPU">
      <FlavorToBuild>Release</FlavorToBuild>
      <PlatformToBuild>AnyCPU</PlatformToBuild>
    </ConfigurationToBuild>
    <ConfigurationToBuild
      Condition="'$(BuildFlavor)' == '' Or '$(BuildFlavor)' == 'Debug'"
      Include="Debug|AnyCPU">
      <FlavorToBuild>Debug</FlavorToBuild>
      <PlatformToBuild>AnyCPU</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>-->

  <Target Name="BeforeModuleBuild">
    <!-- <Message Text="MSBuildNodeCount: $(MSBuildNodeCount)"/>
         
         
         -->
    <!-- <Message Text="MSBuildExtensionsPath32: $(MSBuildExtensionsPath32)"/> -->
    <!-- <Message Text="MSBuildProjectDirectoryNoRoot: $(MSBuildProjectDirectoryNoRoot)"/> -->
    <!-- <Message Text="MSBuildToolsPath: $(MSBuildToolsPath)"/> -->
    <!-- <Message Text="MSBuildToolsVersion: $(MSBuildToolsVersion)"/> -->
    <!-- <Message Text="MSBuildBinPath: $(MSBuildBinPath)"/> -->
    <!-- <Message Text="MSBuildExtensionsPath: $(MSBuildExtensionsPath)"/> -->
    <!-- <Message Text="MSBuildProjectDefaultTargets: $(MSBuildProjectDefaultTargets)"/> -->
    <!-- <Message Text="MSBuildProjectDirectory: $(MSBuildProjectDirectory)"/>  -->
    <!-- <Message Text="MSBuildProjectExtension: $(MSBuildProjectExtension)"/> -->
    <!-- <Message Text="MSBuildProjectFile: $(MSBuildProjectFile)"/> -->
    <!-- <Message Text="MSBuildProjectFullPath: $(MSBuildProjectFullPath)"/> -->
    <!-- <Message Text="MSBuildProjectName: $(MSBuildProjectName)"/> -->
    <!-- <Message Text="MSBuildStartupDirectory: $(MSBuildStartupDirectory)"/> -->

    <Message Text="DirectoryBuildFile: $(DirectoryBuildFile)"/>

    <ItemGroup>
      <BuildGroup Include="@(Build->WithMetadataValue('BuildGroup', '$(BuildGroup)'))" />
    </ItemGroup>


    <Error Condition="'$(CustomAfterMicrosoftCSharpTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom CSharp targets file set" />
    <Error Condition="'$(CustomAfterMicrosoftCommonTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom Microsoft common targets file set" />

    <PropertyGroup>
      <IsWebModule>false</IsWebModule>
      <IsWebModule Condition="$(ModuleName.Contains('Web.')) Or '$(PackageWeb)' == 'true'">true</IsWebModule>
      <ExternalConstants Condition="'$(IsCustomBuild)' == 'true'">IS_CUSTOM_BUILD</ExternalConstants>
    </PropertyGroup>

    <PropertyGroup>
      <AssemblyDebugOptions>
        DebugSymbols=true;
        DebugType=full;
        Optimize=true
      </AssemblyDebugOptions>
    </PropertyGroup>

    <PropertyGroup>
      <BuildProperties>
        BuildToolsDirectory=$(BuildToolsDirectory);
        BuildScriptsDirectory=$(BuildScriptsDirectory);
        CustomAfterMicrosoftCSharpTargets=$(CustomAfterMicrosoftCSharpTargets);
        CustomAfterMicrosoftCommonTargets=$(CustomAfterMicrosoftCommonTargets);
        AlternativeOutputDirectory=$(SharedDependencyDirectory);
        RunCodeAnalysis=false;
        ShouldUnsetParentConfigurationAndPlatform=true;
        BuildProjectReferences=false<!--;
        $(AssemblyDebugOptions)-->
      </BuildProperties>
    </PropertyGroup>

    <!--
        ShouldUnsetParentConfigurationAndPlatform
        Ensures that x86 projects with a P2P reference to an AnyCPU project don't push the x86 configuration/platform into the P2P reference and trigger
        a missing configuration/platform error.
    -->

    <Message Text="
╔═════════════════════════════════════════════════════════════════════╗
║                     Group Start  $(BuildGroup.PadRight(4)) / $(TotalNumberOfBuildGroups.PadRight(27)) ║
╚═════════════════════════════════════════════════════════════════════╝
" Importance="high"></Message>



    <ItemGroup>
      <ProjectsToBuild Include="@(BuildGroup)" Condition="%(BuildGroup.IsWebProject) == 'true'">
        <Properties>$(BuildProperties);PackageWeb=true</Properties>
      </ProjectsToBuild>

      <ProjectsToBuild Include="@(BuildGroup)" Condition="%(BuildGroup.IsWebProject) != 'true'">
        <Properties>$(BuildProperties)</Properties>
      </ProjectsToBuild>
    </ItemGroup>

    <Message Text="BuildGroup=@(BuildGroup)"/>
    <Message Text="BuildProperties=@(BuildProperties)"/>

    <MSBuild Projects="@(ProjectsToBuild)" Targets="Build" BuildInParallel="true" Properties="%(ProjectsToBuild.Properties)" />

  </Target>


  <PropertyGroup>
    <PrepareModuleForBuildDependsOn>
      ModuleEnter;
      rmTransformTemplates;
    </PrepareModuleForBuildDependsOn>
  </PropertyGroup>


  <PropertyGroup>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <ModuleSourceDirectory>$(SolutionDirectoryPath)Src\</ModuleSourceDirectory>
    <ModuleTestDirectory>$(SolutionDirectoryPath)Test\</ModuleTestDirectory>
    <ModuleBuildDirectory>$(SolutionDirectoryPath)Build\</ModuleBuildDirectory>
    <DependenciesDirectory>$(SolutionDirectoryPath)Dependencies</DependenciesDirectory>
    <ModuleBuildTempDirectory Condition="'$(ModuleBuildTempDirectory)' == ''">$(SolutionDirectoryPath)BuildTemp\</ModuleBuildTempDirectory>
    <rmBCItemTransformTemplatesEnabled>$(T4TransformEnabled)</rmBCItemTransformTemplatesEnabled>
    <TfvcDropLocation>\\dfs.aderant.com\expertsuite\dev\vnext</TfvcDropLocation>
    <CleanBin Condition="'$(CleanBin)' == ''">true</CleanBin>
  </PropertyGroup>

  <Target Name="InitializeModuleBuild" BeforeTargets="ModuleEnter">
    <CallTarget Targets="CleanBin" />
    <CallTarget Targets="PrepareZipCustomSource" />
    <CallTarget Targets="ZipCustomSource" />
    <CallTarget Targets="SetBuildNumbers" />
    <CallTarget Targets="UpdateModuleFileVersion"/>
    <CallTarget Targets="SeedPackagePacking" Condition="'$(IsCustomBuild)' != 'true'" />
  </Target>

  <Target Name="ModuleEnter">
    <Message Text="
╔═════════════════════════════════════════════════════════════════════╗
║                     $(ModuleName.PadRight(26))                      ║
╚═════════════════════════════════════════════════════════════════════╝
" Importance="high"></Message>

    <GetDependencies Condition="'$(UseSharedDependencyDirectory)' != 'true'"
      ProductManifest="$(ProductManifestPath)"
      ModulesRootPath="$(SolutionDirectoryPath)"
      ModuleName="$(ModuleName)"
      BuildType="ContinuousIntegration"
      DependenciesDirectory="$(DependenciesDirectory)"
      DropPath="$(TfvcDropLocation)" />

  </Target>

  <Target Name="Build" DependsOnTargets="$(PrepareModuleForBuildDependsOn)">
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)" />
    <Message Text="T4TransformEnabled:    $(T4TransformEnabled)" />
    <Message Text="ZipCustomSource:       $(ZipCustomSource)" />
    <Message Text="VersionMajor:          $(VersionMajor)" />
    <Message Text="VersionMinor:          $(VersionMinor)" />
    <Message Text="VersionBuild:          $(VersionBuild)" />
    <Message Text="VersionRevision:       $(VersionRevision)" />

    <ItemGroup>
      <DirProject Include="$(MSBuildThisFileDirectory)\dir.proj;$(MSBuildThisFileDirectory)\Aderant.wpp.content.proj;$(MSBuildThisFileDirectory)\Aderant.wpp.content.v2.proj" />
    </ItemGroup>

    <Copy SourceFiles="@(DirProject)"
      DestinationFolder="$(SolutionRoot)"
      UseHardlinksIfPossible="true"
      OverwriteReadOnlyFiles="true"
      SkipUnchangedFiles="true" />

  </Target>

  <Target Name="Clean"/>

  <!--
    ==========================================================================================
        Clean
    ==========================================================================================
  -->
  <Target Name="CleanBin">

    <!-- Always remove these files and folders as Visual Studio likes to produce these folders in abundance -->
    <Delete Files="$(SolutionDirectoryPath)TestResults\**\*"
      ContinueOnError="true" />
    <Delete Files="$(ModuleBuildDirectory)TestResults\**\*"
      ContinueOnError="true" />
    <RemoveDir Directories="$(SolutionDirectoryPath)TestResults"
      ContinueOnError="true" />
    <RemoveDir Directories="$(ModuleBuildDirectory)TestResults"
      ContinueOnError="true" />

    <RemoveDir Condition="'$(CleanBin)' == 'true'"
      Directories="$(SolutionDirectoryPath)Bin\Module"
      ContinueOnError="true" />
    <RemoveDir Condition="'$(CleanBin)' == 'true'"
      Directories="$(SolutionDirectoryPath)Src\$(ModuleName)\bin"
      ContinueOnError="true" />

    <!-- These can be symlinks so delete them directly -->
    <RemoveDir Directories="$(BinTestDirectory)Dependencies"
      ContinueOnError="true" />
    <RemoveDir Directories="$(BinTestDirectory)ModuleBin"
      ContinueOnError="true" />

    <ItemGroup>
      <Folders Include="$(SolutionDirectoryPath)Bin\" />
      <Folders Include="$(SolutionDirectoryPath)BuildTemp\" />
      <Folders Include="$(SolutionDirectoryPath)Src\" />
      <Folders Include="$(SolutionDirectoryPath)BuildTemp\" />
      <Folders Include="$(SolutionDirectoryPath)CommonBuild\" />
      <Folders Include="$(SolutionDirectoryPath)TestResults\" />
    </ItemGroup>

    <Error Condition="!HasTrailingSlash('%(Folders.FullPath)')"
      Text="All paths in the Folders item group must end with a trailing slash" />

    <ItemGroup>
      <!-- (?i) means case insensitive -->
      <Files Include="%(Folders.RootDir)%(Folders.Directory)\**\obj\**" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Folders.FullPath)', `(?i)Src`))" />
      <Files Include="%(Folders.RootDir)%(Folders.Directory)\**\**" Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Folders.FullPath)', `(?i)Src`))" />
    </ItemGroup>

    <ItemGroup>
      <FilesToDelete Condition="$(CleanBin)" Include="@(Files)" />
      <FoldersToDelete Condition="$(CleanBin)" Include="%(Files.RelativeDir)" />
    </ItemGroup>

    <Message Condition="$(CleanBin) And @(FilesToDelete) != ''" Text="Files to clean: %(FilesToDelete.FullPath)" />
    <Message Condition="$(CleanBin) And @(FoldersToDelete) != ''" Text="Folders to clean: %(FoldersToDelete.FullPath)" />

    <MSBuild.Community.Tasks.Attrib
      Condition="$(CleanBin)"
      ReadOnly="false"
      Files="@(FilesToDelete)" />

    <Delete Condition="$(CleanBin)"
      Files="@(FilesToDelete)"
      ContinueOnError="true" />

    <RemoveDir Condition="$(CleanBin)"
      Directories="@(FoldersToDelete)"
      ContinueOnError="true" />

    <MakeDir Directories="$(BinModuleDirectory)" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <!--
    ==========================================================================================
        MarkBuildStepAsFailed
    ==========================================================================================
  -->
  <Target Name="MarkBuildStepAsFailed"
      Condition="'$(IsDesktopBuild)' != 'true' And '$(IsCustomBuild)' != 'true'">
    <Message Text="Marking build as failed" />

    <CallTarget Targets="FinalizeBuild" />

  </Target>

  <!--
    ==========================================================================================
        Zip Source 
    ==========================================================================================
  -->

  <Target
    Name="PrepareZipCustomSource"
    Condition="'$(ZipSource)' != 'false' And '$(IsCustomBuild)' != 'true'">

    <ItemGroup>
      <CustomSolutionFiles
        Include="$(SolutionDirectoryPath)\*.Custom.sln" />
    </ItemGroup>
  </Target>

  <Target
    Name="ZipCustomSource"
    Condition="'$(ZipSource)' != 'false' And '$(IsCustomBuild)' != 'true'"
    Outputs="$(BinModuleDirectory)Customization\%(CustomSolutionFiles.Filename).zip"
    Inputs="@(CustomSolutionFiles)">

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Customization\</ZipFileDirectory>
    </PropertyGroup>

    <ItemGroup>
      <ZipFile Remove="@(ZipFile)" />
      <ZipFile Include="$(ZipFileDirectory)%(CustomSolutionFiles.Filename).zip" />
    </ItemGroup>

    <ItemGroup>
      <SourceFilesToCopyForTransform
        Include="$(SolutionDirectoryPath)Src\**\*"
        Exclude="$(SolutionDirectoryPath)*ABT\**;
                   $(SolutionDirectoryPath)Build\TestResults\**\*
                   $(SolutionDirectoryPath)BuildTemp\**\*;
                   $(SolutionDirectoryPath)**\obj\**;
                   $(SolutionDirectoryPath)**\_Resharper*\**; 
                   $(SolutionDirectoryPath)**\*.g*.cs;
                   $(SolutionDirectoryPath)**\*.pfx;
                   $(SolutionDirectoryPath)**\*.vssscc;
                   $(SolutionDirectoryPath)**\*.vspscc;
                   $(SolutionDirectoryPath)**\*.DotSettings;">
        <DestinationSubDirectory>Src\</DestinationSubDirectory>
      </SourceFilesToCopyForTransform>

      <SourceFilesToCopyForTransform
        Include="$(SolutionDirectoryPath)Build\**\*"
        Exclude="$(SolutionDirectoryPath)Build\Build.Infrastructure\**\*">
        <DestinationSubDirectory>Build\</DestinationSubDirectory>
      </SourceFilesToCopyForTransform>

      <SourceFilesToCopyForTransform Include="%(CustomSolutionFiles.FullPath)">
        <DestinationSubDirectory></DestinationSubDirectory>
      </SourceFilesToCopyForTransform>
    </ItemGroup>

    <PropertyGroup>
      <TempSolutionDirectory>$(SolutionDirectoryPath)TempTransform\</TempSolutionDirectory>
      <TempModuleSourceDirectory>$(SolutionDirectoryPath)TempTransform\Src\</TempModuleSourceDirectory>
      <TempModuleBuildDirectory>$(SolutionDirectoryPath)TempTransform\Build\</TempModuleBuildDirectory>
      <CustomBuildFilesDirectory>$(SolutionDirectoryPath)TempTransform\BuildScripts\</CustomBuildFilesDirectory>
    </PropertyGroup>

    <Delete
      Files="%(ZipFile.FullPath)"
      Condition="Exists('%(ZipFile.FullPath)')" />

    <RemoveDir
      Condition="Exists('$(TempSolutionDirectory)')"
      Directories="$(TempSolutionDirectory)"/>

    <!-- Make a copy of the source files for the custom solution transformation and zip -->
    <MakeDir
      Directories="$(TempSolutionDirectory)"/>

    <Copy
      SourceFiles="@(SourceFilesToCopyForTransform)"
      DestinationFiles="@(SourceFilesToCopyForTransform->'$(TempSolutionDirectory)%(DestinationSubDirectory)%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true">
    </Copy>


    <!-- Read solution file so we can get the project source-->
    <ReadLinesFromFile File="$(TempSolutionDirectory)%(CustomSolutionFiles.Filename)%(CustomSolutionFiles.Extension)">
      <Output TaskParameter="Lines"
        ItemName="LinesFromSlnFile"/>
    </ReadLinesFromFile>


    <!--  Extract the Project lines from the custom solution file.
          This will give lines in this format:
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexMatch Input="@(LinesFromSlnFile)"
      Expression="Project\(&quot;.+&quot;\) = &quot;(.+)&quot;, &quot;.+\.csproj">
      <Output ItemName="ProjectLines"
        TaskParameter="Output"/>
    </RegexMatch>
    <Message Text="&#xA;Project lines in custom solution:&#xA;@(ProjectLines, '&#xA;')"/>


    <!--  Remove text before custom project name
          This will leave us with:
          Aderant.BusinessEntity", "Src\Aderant.BusinessEntity\Aderant.BusinessEntity.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexReplace Input="@(ProjectLines)"
      Expression="Project\(&quot;.+&quot;\) = &quot;"
      Replacement=""
      Count="1">
      <Output ItemName="SlnProjects"
        TaskParameter="Output" />
    </RegexReplace>


    <!-- Remove text after custom project name
          This will leave us with the project name:
          Aderant.BusinessEntity
    -->
    <RegexReplace Input="@(SlnProjects)"
      Expression="&quot;, &quot;.+\.csproj&quot;, &quot;.+&quot;"
      Replacement=""
      Count="1">
      <Output ItemName ="CustomProjects"
        TaskParameter="Output" />
    </RegexReplace>
    <Message Text="&#xA;Projects in custom solution:&#xA;@(CustomProjects, '&#xA;')"/>


    <!-- Create property that lists the project folders as an MSBuild include string-->
    <PropertyGroup>
      <ProjectFoldersIncludeString>$(TempModuleSourceDirectory)@(CustomProjects,'\**\*;$(TempModuleSourceDirectory)')\**\*;</ProjectFoldersIncludeString>
    </PropertyGroup>
    <Message Text="&#xA;ProjectFoldersIncludeString = $(ProjectFoldersIncludeString)&#xA;"/>

    <!-- Update the source with the specified transformations file -->
    <SourceTransformationTask
      Condition="($(CustomSolutionTransformsFile) != '')"
      SourcePath="$(TempSolutionDirectory)"
      TransformsDefinitionFile="$(SolutionDirectoryPath)Build\$(CustomSolutionTransformsFile)" />

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <ZipSourceFiles
        Remove="@(ZipSourceFiles)" />

      <ZipSourceFiles
        Include="$(TempSolutionDirectory)**\*.Custom.sln;"/>

      <ZipSourceFiles
        Include="$(ProjectFoldersIncludeString)"
        Exclude="$(TempModuleSourceDirectory)**\*.sln;
                 $(TempModuleSourceDirectory)**\*.vssscc;
                 $(TempModuleSourceDirectory)**\*.vspscc;
                 $(TempModuleSourceDirectory)**\*.sln.cache;
                 $(TempModuleSourceDirectory)**\*.vsmdi;
                 $(TempModuleSourceDirectory)**\*.testrunconfig;
                 $(TempModuleSourceDirectory)**\*.suo;
                 $(TempModuleSourceDirectory)**\*.sln.Debug.vsprops;
                 $(TempModuleSourceDirectory)**\bin\**;
                 $(TempModuleSourceDirectory)**\obj\**;
                 $(TempModuleSourceDirectory)**\UnitTest*\**;
                 $(TempModuleSourceDirectory)**\IntegrationTest*\**;
                 $(TempModuleSourceDirectory)**\TestResults\**;
                 $(TempModuleSourceDirectory)**\Release.txt;
                 $(TempModuleSourceDirectory)**\Debug.txt;
                 $(TempModuleSourceDirectory)**\_Resharper*\**;
                 $(TempModuleSourceDirectory)**\*resharper.user;
                 $(TempModuleSourceDirectory)**\*.DotSettings;" />
      <ZipSourceFiles
        Include="$(TempModuleBuildDirectory)*.*;" />
      <ZipSourceFiles
        Include="$(CustomBuildFilesDirectory)*.*;"
        Exclude="$(CustomBuildFilesDirectory)**\*.pfx; $(CustomBuildFilesDirectory)**\Aderant.CodeSigning*; "/>
    </ItemGroup>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(ZipSourceFiles)"
      ZipFileName="%(ZipFile.FullPath)"
      WorkingDirectory="$(TempSolutionDirectory)"
      ParallelCompression="false" />

    <RemoveDir
      Directories="$(TempSolutionDirectory)"/>

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Versioning 
    ==========================================================================================
  -->
  <Target Name="UpdateModuleFileVersion"
      Condition="'$(BUILD_BUILDURI)' != ''">

    <PropertyGroup>
      <AssemblyInfoFile>$(ModuleBuildDirectory)CommonAssemblyInfo.cs</AssemblyInfoFile>
    </PropertyGroup>

    <FileUpdate Files="$(AssemblyInfoFile)"
        IgnoreCase="true"
        Multiline="true"
        Singleline="false"
        Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
        ReplacementText="${section1}$(FileVersion)${section2}" />

  </Target>

  <!--
    ==========================================================================================
        Zip seed package(s)
        This module will zip all seed package definition files grouped by folder name into zip packages and drop into .\Bin\Packages folder.
        Note: To temporary bypass the validation process, set /p:SkipPackageValidation=true in TFSBuild.rsp in the solution to be built.
    ==========================================================================================
  -->
  <Target Name="SeedPackagePacking">

    <Message Condition="'$(SkipPackageValidation)' == 'true'" Text="SeedPackage validation skipped because of the SkipPackageValidation flag." Importance="High"></Message>
    <SeedPackagePacking
        SkipPackageValidation="$(SkipPackageValidation)"
        BuildFrom="$(SolutionDirectoryPath)"
        SeedPackageSrc = "$(SolutionDirectoryPath)Src\SeedPackages"
        SeedPackageDrop = "$(SolutionDirectoryPath)Bin\Module\Packages" />

    <SeedPackagePacking
        SkipPackageValidation="$(SkipPackageValidation)"
        BuildFrom="$(SolutionDirectoryPath)"
        SeedPackageSrc = "$(SolutionDirectoryPath)Test\TestPackages"
        SeedPackageDrop = "$(SolutionDirectoryPath)Bin\Test\TestPackages" />

  </Target>

</Project>
