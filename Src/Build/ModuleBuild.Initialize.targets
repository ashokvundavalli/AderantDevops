<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         DefaultTargets="BeforeModuleBuild"
         ToolsVersion="14.0">

  <!-- the DirectoryBuildFile parameter is derived from DynamicProject.cs -->
  <Import Project="$(DirectoryBuildFile)" />
  <Import Project="Aderant.Build.Common.targets" />
  <Import Project="RM.TransformTemplates.Targets" />
  <Import Project="Aderant.TextTransform.targets" />
  <Import Project="Aderant.Build.Zip.targets" />


  <Target Name="BeforeModuleBuild">
    <Message Text="MSBuildNodeCount: $(MSBuildNodeCount)"/>
    <Message Text="MSBuildExtensionsPath32: $(MSBuildExtensionsPath32)"/>
    <Message Text="MSBuildProjectDirectoryNoRoot: $(MSBuildProjectDirectoryNoRoot)"/>
    <Message Text="MSBuildToolsPath: $(MSBuildToolsPath)"/>
    <Message Text="MSBuildToolsVersion: $(MSBuildToolsVersion)"/>
    <Message Text="MSBuildBinPath: $(MSBuildBinPath)"/>
    <Message Text="MSBuildExtensionsPath: $(MSBuildExtensionsPath)"/>
    <Message Text="MSBuildProjectDefaultTargets: $(MSBuildProjectDefaultTargets)"/>
    <Message Text="MSBuildProjectDirectory: $(MSBuildProjectDirectory)"/>
    <Message Text="MSBuildProjectExtension: $(MSBuildProjectExtension)"/>
    <Message Text="MSBuildProjectFile: $(MSBuildProjectFile)"/>
    <Message Text="MSBuildProjectFullPath: $(MSBuildProjectFullPath)"/>
    <Message Text="MSBuildProjectName: $(MSBuildProjectName)"/>
    <Message Text="MSBuildStartupDirectory: $(MSBuildStartupDirectory)"/>
    <Message Text="DirectoryBuildFile: $(DirectoryBuildFile)"/>

    <ItemGroup>
      <BuildGroup Include="@(Build->WithMetadataValue('BuildGroup', '$(BuildGroup)'))" />
    </ItemGroup>

    <Error Condition="'$(CustomAfterMicrosoftCSharpTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom CSharp targets file set" />
    <Error Condition="'$(CustomAfterMicrosoftCommonTargets)' == '' And '$(IsCustomBuild)' != 'true'" Text="No custom Microsoft common targets file set" />

    <PropertyGroup>
      <IsWebModule>false</IsWebModule>
      <IsWebModule Condition="$(ModuleName.Contains('Web.')) Or '$(PackageWeb)' == 'true'">true</IsWebModule>
      <ExternalConstants Condition="'$(IsCustomBuild)' == 'true'">IS_CUSTOM_BUILD</ExternalConstants>
    </PropertyGroup>

    <PropertyGroup>
      <AssemblyDebugOptions>
        DebugSymbols=true;
        DebugType=full;
        Optimize=true
      </AssemblyDebugOptions>
    </PropertyGroup>

    <PropertyGroup>
      <BuildProperties>
        BuildToolsDirectory=$(BuildToolsDirectory);
        BuildScriptsDirectory=$(BuildScriptsDirectory);
        CustomAfterMicrosoftCSharpTargets=$(CustomAfterMicrosoftCSharpTargets);
        CustomAfterMicrosoftCommonTargets=$(CustomAfterMicrosoftCommonTargets);
        AlternativeOutputDirectory=$(SharedDependencyDirectory);
        ShouldUnsetParentConfigurationAndPlatform=true;
        BuildProjectReferences=false;
        <!--$(AssemblyDebugOptions)-->
      </BuildProperties>
    </PropertyGroup>

    <!--
        ShouldUnsetParentConfigurationAndPlatform
        Ensures that x86 projects with a P2P reference to an AnyCPU project don't push the x86 configuration/platform into the P2P reference and trigger
        a missing configuration/platform error.
    -->

    <Message Text="
╔═════════════════════════════════════════════════════════════════════╗
║                     Group Start  $(BuildGroup.PadRight(4)) / $(TotalNumberOfBuildGroups.PadRight(27)) ║
╚═════════════════════════════════════════════════════════════════════╝
" Importance="high"></Message>



    <ItemGroup>
      <ProjectsToBuild Include="@(BuildGroup)" Condition="%(BuildGroup.IsWebProject) == 'true'">
        <Properties>$(BuildProperties);PackageWeb=true</Properties>
      </ProjectsToBuild>

      <ProjectsToBuild Include="@(BuildGroup)" Condition="%(BuildGroup.IsWebProject) != 'true'">
        <Properties>$(BuildProperties)</Properties>
      </ProjectsToBuild>
    </ItemGroup>

    <Message Text="BuildGroup=@(BuildGroup)"/>
    <Message Text="BuildProperties=@(BuildProperties)"/>

    <MSBuild Projects="@(ProjectsToBuild)"
      Targets="Build"
      BuildInParallel="true"
      Properties="%(ProjectsToBuild.Properties)">

      <!--The compiled assemblies from projects-->
      <Output ItemName="CompiledAssemblies"
        TaskParameter="TargetOutputs" />
    </MSBuild>

  </Target>


  <PropertyGroup>
    <PrepareModuleForBuildDependsOn>
      ModuleEnter;
      rmTransformTemplates;
    </PrepareModuleForBuildDependsOn>
  </PropertyGroup>


  <PropertyGroup>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <ModuleSourceDirectory>$(SolutionDirectoryPath)Src\</ModuleSourceDirectory>
    <ModuleTestDirectory>$(SolutionDirectoryPath)Test\</ModuleTestDirectory>
    <ModuleBuildDirectory>$(SolutionDirectoryPath)Build\</ModuleBuildDirectory>
    <DependenciesDirectory>$(SolutionDirectoryPath)Dependencies</DependenciesDirectory>
    <ModuleBuildTempDirectory Condition="'$(ModuleBuildTempDirectory)' == ''">$(SolutionDirectoryPath)BuildTemp\</ModuleBuildTempDirectory>
    <rmBCItemTransformTemplatesEnabled>$(T4TransformEnabled)</rmBCItemTransformTemplatesEnabled>
    <TfvcDropLocation>\\dfs.aderant.com\expertsuite\dev\vnext</TfvcDropLocation>
    <CleanBin Condition="'$(CleanBin)' == ''">true</CleanBin>
  </PropertyGroup>

  <Target Name="InitializeModuleBuild" BeforeTargets="ModuleEnter">
    <CallTarget Targets="CleanBin" />
    <CallTarget Targets="PrepareZipCustomSource" />
    <CallTarget Targets="ZipCustomSource" />
    <CallTarget Targets="SetBuildNumbers" />
    <CallTarget Targets="UpdateModuleFileVersion"/>
    <CallTarget Targets="SeedPackagePacking" Condition="'$(IsCustomBuild)' != 'true'" />
    <CallTarget Targets="ZipWorkflowTemplateSource" />
  </Target>

  <Target Name="ModuleEnter">
    <Message Text="
╔═════════════════════════════════════════════════════════════════════╗
║                     $(ModuleName.PadRight(26))                      ║
╚═════════════════════════════════════════════════════════════════════╝
" Importance="high"></Message>

    <GetDependencies Condition="'$(UseSharedDependencyDirectory)' != 'true'"
      ProductManifest="$(ProductManifestPath)"
      ModulesRootPath="$(SolutionDirectoryPath)"
      ModuleName="$(ModuleName)"
      BuildType="ContinuousIntegration"
      DependenciesDirectory="$(DependenciesDirectory)"
      DropPath="$(TfvcDropLocation)" />

  </Target>

  <Target Name="Build" DependsOnTargets="$(PrepareModuleForBuildDependsOn)">
    <Message Text="SolutionDirectoryPath: $(SolutionDirectoryPath)" />
    <Message Text="T4TransformEnabled:    $(T4TransformEnabled)" />
    <Message Text="ZipCustomSource:       $(ZipCustomSource)" />
    <Message Text="VersionMajor:          $(VersionMajor)" />
    <Message Text="VersionMinor:          $(VersionMinor)" />
    <Message Text="VersionBuild:          $(VersionBuild)" />
    <Message Text="VersionRevision:       $(VersionRevision)" />

    <ItemGroup>
      <DirProject Include="$(MSBuildThisFileDirectory)\dir.proj;$(MSBuildThisFileDirectory)\Aderant.wpp.content.proj;$(MSBuildThisFileDirectory)\Aderant.wpp.content.v2.proj" />
    </ItemGroup>

    <Copy SourceFiles="@(DirProject)"
      DestinationFolder="$(SolutionRoot)"
      UseHardlinksIfPossible="true"
      OverwriteReadOnlyFiles="true"
      SkipUnchangedFiles="true" />

  </Target>

  <Target Name="Clean"/>

  <!--
    ==========================================================================================
        Clean
    ==========================================================================================
  -->
  <Target Name="CleanBin">

    <!-- Always remove these files and folders as Visual Studio likes to produce these folders in abundance -->
    <Delete Files="$(SolutionDirectoryPath)TestResults\**\*"
      ContinueOnError="true" />
    <Delete Files="$(ModuleBuildDirectory)TestResults\**\*"
      ContinueOnError="true" />
    <RemoveDir Directories="$(SolutionDirectoryPath)TestResults"
      ContinueOnError="true" />
    <RemoveDir Directories="$(ModuleBuildDirectory)TestResults"
      ContinueOnError="true" />

    <RemoveDir Condition="'$(CleanBin)' == 'true'"
      Directories="$(SolutionDirectoryPath)Bin\Module"
      ContinueOnError="true" />
    <RemoveDir Condition="'$(CleanBin)' == 'true'"
      Directories="$(SolutionDirectoryPath)Src\$(ModuleName)\bin"
      ContinueOnError="true" />

    <!-- These can be symlinks so delete them directly -->
    <RemoveDir Directories="$(BinTestDirectory)Dependencies"
      ContinueOnError="true" />
    <RemoveDir Directories="$(BinTestDirectory)ModuleBin"
      ContinueOnError="true" />

    <ItemGroup>
      <Folders Include="$(SolutionDirectoryPath)Bin\" />
      <Folders Include="$(SolutionDirectoryPath)BuildTemp\" />
      <Folders Include="$(SolutionDirectoryPath)Src\" />
      <Folders Include="$(SolutionDirectoryPath)BuildTemp\" />
      <Folders Include="$(SolutionDirectoryPath)CommonBuild\" />
      <Folders Include="$(SolutionDirectoryPath)TestResults\" />
    </ItemGroup>

    <Error Condition="!HasTrailingSlash('%(Folders.FullPath)')"
      Text="All paths in the Folders item group must end with a trailing slash" />

    <ItemGroup>
      <!-- (?i) means case insensitive -->
      <Files Include="%(Folders.RootDir)%(Folders.Directory)\**\obj\**" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Folders.FullPath)', `(?i)Src`))" />
      <Files Include="%(Folders.RootDir)%(Folders.Directory)\**\**" Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Folders.FullPath)', `(?i)Src`))" />
    </ItemGroup>

    <ItemGroup>
      <FilesToDelete Condition="$(CleanBin)" Include="@(Files)" />
      <FoldersToDelete Condition="$(CleanBin)" Include="%(Files.RelativeDir)" />
    </ItemGroup>

    <Message Condition="$(CleanBin) And @(FilesToDelete) != ''" Text="Files to clean: %(FilesToDelete.FullPath)" />
    <Message Condition="$(CleanBin) And @(FoldersToDelete) != ''" Text="Folders to clean: %(FoldersToDelete.FullPath)" />

    <MSBuild.Community.Tasks.Attrib
      Condition="$(CleanBin)"
      ReadOnly="false"
      Files="@(FilesToDelete)" />

    <Delete Condition="$(CleanBin)"
      Files="@(FilesToDelete)"
      ContinueOnError="true" />

    <RemoveDir Condition="$(CleanBin)"
      Directories="@(FoldersToDelete)"
      ContinueOnError="true" />

    <MakeDir Directories="$(BinModuleDirectory)" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>

  <!--
    ==========================================================================================
        Versioning 
    ==========================================================================================
  -->
  <Target Name="UpdateModuleFileVersion"
      Condition="'$(BUILD_BUILDURI)' != ''">

    <PropertyGroup>
      <AssemblyInfoFile>$(ModuleBuildDirectory)CommonAssemblyInfo.cs</AssemblyInfoFile>
    </PropertyGroup>

    <FileUpdate Files="$(AssemblyInfoFile)"
        IgnoreCase="true"
        Multiline="true"
        Singleline="false"
        Regex="(?&lt;section1&gt;AssemblyFileVersion\(\&quot;)(?&lt;version&gt;[0-9]*.[0-9]*.[0-9]*.[0-9]*)(?&lt;section2&gt;\&quot;\))"
        ReplacementText="${section1}$(FileVersion)${section2}" />

  </Target>

</Project>
