<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  DefaultTargets="AfterModuleBuild"
  ToolsVersion="14.0">

  <Import Project="Aderant.Build.Common.targets" />
  <Import Project="Aderant.Build.Testing.targets" />
  <Import Project="Aderant.Build.IntegrationTesting.targets" />

  <PropertyGroup>
    <BinModuleDirectory>$(SolutionDirectoryPath)Bin\Module\</BinModuleDirectory>
    <BinTestDirectory>$(SolutionDirectoryPath)Bin\Test\</BinTestDirectory>
  </PropertyGroup>

  <UsingTask TaskName="Aderant.Build.Tasks.GetAssemblyPlatform"
    AssemblyFile="$(BuildAssembly)"
    Condition="'$(IsCustomBuild)' != 'true'" />

<!--
    ==========================================================================================
        Test Configuration
    ==========================================================================================
  -->
  <PropertyGroup>
    <RunTestsDependsOn>
      $(RunTestsDependsOn);
      BeforeRunTests;
    </RunTestsDependsOn>
  </PropertyGroup>

  <!--
    ==========================================================================================
        Zip Sample Workflow Solutions
    ==========================================================================================
  -->
  <ItemGroup>
    <TemplateSolutionFiles
      Include="$(SolutionDirectoryPath)\*.Template.sln"
      Condition="('$(IsCustomBuild)'!='true')" />
  </ItemGroup>

  <Target
    Name="ZipWorkflowTemplateSource"
    Condition="('$(IsCustomBuild)'!='true')"
    Outputs="$(BinModuleDirectory)Workflow\Templates\%(TemplateSolutionFiles.Filename).zip"
    Inputs="@(TemplateSolutionFiles)"
    BeforeTargets="BeforeRunTests">
    
    <Message Text="$(BinModuleDirectory)Workflow\Templates\%(TemplateSolutionFiles.Filename).zip" />

    <PropertyGroup>
      <ZipFileDirectory>$(BinModuleDirectory)Workflow\Templates</ZipFileDirectory>
    </PropertyGroup>

    <ItemGroup>
      <ZipFile Remove="@(ZipFile)" />
      <ZipFile Include="$(ZipFileDirectory)\%(TemplateSolutionFiles.Filename).zip" />
    </ItemGroup>

    <ItemGroup>
      <SourceFilesToCopyForTemplateTransform
        Include="$(SolutionDirectoryPath)Src\**\*"
        Exclude="$(SolutionDirectoryPath)*ABT\**;
                    $(SolutionDirectoryPath)Build\TestResults\**\*
                    $(SolutionDirectoryPath)BuildTemp\**\*;
                    $(SolutionDirectoryPath)**\obj\**;
                    $(SolutionDirectoryPath)**\_Resharper*\**; 
                    $(SolutionDirectoryPath)**\*.g*.cs;
                    $(SolutionDirectoryPath)**\*.pfx;
                    $(SolutionDirectoryPath)**\*.vssscc;
                    $(SolutionDirectoryPath)**\*.vspscc; 
                    $(SolutionDirectoryPath)**\*.sln.cache;
                    $(SolutionDirectoryPath)**\*.vsmdi;      
                    $(SolutionDirectoryPath)**\*.testrunconfig;
                    $(SolutionDirectoryPath)**\*.suo;
                    $(SolutionDirectoryPath)**\*.sln.Debug.vsprops;
                    $(SolutionDirectoryPath)**\TestResults\**;
                    $(SolutionDirectoryPath)**\Release.txt;
                    $(SolutionDirectoryPath)**\_Resharper*\**;
                    $(SolutionDirectoryPath)**\*resharper.user;
                    $(SolutionDirectoryPath)**\*.DotSettings;
                    $(SolutionDirectoryPath)**\Bin;      
                    $(SolutionDirectoryPath)**\obj\**;
                    $(SolutionDirectoryPath)CommonBuild\**;
                    $(SolutionDirectoryPath)ThirdPartyBuild.txt;
                    $(SolutionDirectoryPath)**\*.csproj.user;  
                    $(SolutionDirectoryPath)**\SharedBin\**;
					          $(SolutionDirectoryPath)Src\**\Web.*\**;">
        <DestinationSubDirectory>Src\</DestinationSubDirectory>
      </SourceFilesToCopyForTemplateTransform>

      <SourceFilesToCopyForTemplateTransform Include="%(TemplateSolutionFiles.FullPath)">
        <DestinationSubDirectory></DestinationSubDirectory>
      </SourceFilesToCopyForTemplateTransform>
    </ItemGroup>

    <PropertyGroup>
      <TempTemplateSolutionDirectory>$(SolutionDirectoryPath)TempTemplateTransform\</TempTemplateSolutionDirectory>
      <TempTemplateModuleSourceDirectory>$(SolutionDirectoryPath)TempTemplateTransform\Src\</TempTemplateModuleSourceDirectory>
    </PropertyGroup>

    <Delete
      Files="%(ZipFile.FullPath)"
      Condition="Exists('%(ZipFile.FullPath)')" />

    <RemoveDir
      Condition="Exists('$(TempTemplateSolutionDirectory)')"
      Directories="$(TempTemplateSolutionDirectory)"/>

    <!-- Make a copy of the source files for the template solution transformation and zip -->
    <MakeDir
      Directories="$(TempTemplateSolutionDirectory)"/>

    <Copy
      SourceFiles="@(SourceFilesToCopyForTemplateTransform)"
      DestinationFiles="@(SourceFilesToCopyForTemplateTransform->'$(TempTemplateSolutionDirectory)%(DestinationSubDirectory)%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true"
      UseHardlinksIfPossible="false">
    </Copy>

    <!-- Read solution file so we can get the project source-->
    <ReadLinesFromFile File="$(TempTemplateSolutionDirectory)%(TemplateSolutionFiles.Filename)%(TemplateSolutionFiles.Extension)">
      <Output TaskParameter="Lines"
        ItemName="LinesFromTemplateSlnFile"/>
    </ReadLinesFromFile>


    <!--  Extract the Project lines from the template solution file.
          This will give lines in this format:
          Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Workflow.FileOpening.Template", "Src\Workflow.FileOpening.Template\Workflow.FileOpening.Template.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexMatch Input="@(LinesFromTemplateSlnFile)"
      Expression="Project\(&quot;.+&quot;\) = &quot;(.+)&quot;, &quot;.+\.csproj">
      <Output ItemName="TemplateProjectLines"
        TaskParameter="Output"/>
    </RegexMatch>
    <Message Text="&#xA;Project lines in template solution:&#xA;@(TemplateProjectLines, '&#xA;')"/>


    <!--  Remove text before template project name
          This will leave us with:
          Workflow.FileOpening.Template", "Src\Workflow.FileOpening.Template\Workflow.FileOpening.Template.csproj", "{E3D98E07-D681-488E-8932-0C96EFEA490E}"
    -->
    <RegexReplace Input="@(TemplateProjectLines)"
      Expression="Project\(&quot;.+&quot;\) = &quot;"
      Replacement=""
      Count="1">
      <Output ItemName="TemplateSlnProjects"
        TaskParameter="Output" />
    </RegexReplace>


    <!-- Remove text after template project name
          This will leave us with the project name:
          Workflow.FileOpening.Template
    -->
    <RegexReplace Input="@(TemplateSlnProjects)"
      Expression="&quot;, &quot;.+\.csproj&quot;, &quot;.+&quot;"
      Replacement=""
      Count="1">
      <Output ItemName ="TemplateProjects"
        TaskParameter="Output" />
    </RegexReplace>
    <Message Text="&#xA;Projects in template solution:&#xA;@(TemplateProjects, '&#xA;')"/>


    <!-- Create property that lists the project folders as an MSBuild include string-->
    <PropertyGroup>
      <TemplateProjectFoldersIncludeString>$(TempTemplateModuleSourceDirectory)@(TemplateProjects,'\**\*;$(TempTemplateModuleSourceDirectory)')\**\*;</TemplateProjectFoldersIncludeString>
      <TemplateProjectIncludeString>$(TempTemplateModuleSourceDirectory)@(TemplateProjects,'\**\*.csproj;$(TempTemplateModuleSourceDirectory)')\**\*.csproj;</TemplateProjectIncludeString>
    </PropertyGroup>
    <Message Text="&#xA;TemplateProjectFoldersIncludeString = $(TemplateProjectFoldersIncludeString)&#xA;"/>
    <Message Text="&#xA;TemplateProjectIncludeString (to replace ProjectReferences) = $(TemplateProjectIncludeString)&#xA;"/>

    <!-- Create ItemGroup used in Zip task.-->
    <ItemGroup>
      <TemplateZipSourceFiles
        Remove="@(TemplateZipSourceFiles)" />

      <TemplateZipSourceFiles
        Include="$(TempTemplateSolutionDirectory)**\*.Template.sln;"/>

      <TemplateZipSourceFiles
        Include="$(TemplateProjectFoldersIncludeString)"
        Exclude="$(TempTemplateModuleSourceDirectory)**\*.sln;
                  $(TempTemplateModuleSourceDirectory)**\*.vssscc;
                  $(TempTemplateModuleSourceDirectory)**\*.vspscc;
                  $(TempTemplateModuleSourceDirectory)**\*.sln.cache;
                  $(TempTemplateModuleSourceDirectory)**\*.vsmdi;
                  $(TempTemplateModuleSourceDirectory)**\*.testrunconfig;
                  $(TempTemplateModuleSourceDirectory)**\*.suo;
                  $(TempTemplateModuleSourceDirectory)**\*.sln.Debug.vsprops;
                  $(TempTemplateModuleSourceDirectory)**\bin\**;
                  $(TempTemplateModuleSourceDirectory)**\obj\**;
                  $(TempTemplateModuleSourceDirectory)**\UnitTest*\**;
                  $(TempTemplateModuleSourceDirectory)**\IntegrationTest*\**;
                  $(TempTemplateModuleSourceDirectory)**\TestResults\**;
                  $(TempTemplateModuleSourceDirectory)**\Release.txt;
                  $(TempTemplateModuleSourceDirectory)**\Debug.txt;
                  $(TempTemplateModuleSourceDirectory)**\_Resharper*\**;
                  $(TempTemplateModuleSourceDirectory)**\*resharper.user;
                  $(TempTemplateModuleSourceDirectory)**\*.DotSettings;
                  $(ModuleSourceDirectory)**\*.csproj.user;" />

      <TemplateZipProjectFiles
        Include="$(TemplateProjectIncludeString)"/>
    </ItemGroup>

    <ReplaceProjectReferences
      ProjectFileNames="@(TemplateZipProjectFiles)"/>

    <MakeDir
      Directories="$(ZipFileDirectory)"/>

    <MSBuild.Community.Tasks.Zip
      Files="@(TemplateZipSourceFiles)"
      ZipFileName="%(ZipFile.FullPath)"
      WorkingDirectory="$(TempTemplateSolutionDirectory)"
      ParallelCompression="false" />

    <RemoveDir
      Directories="$(TempTemplateSolutionDirectory)"/>

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />
  </Target>


  <Target Name="BeforeRunTests">

    <ItemGroup>
      <TestAssemblies Include="$(BinTestDirectory)*UnitTest*.dll;
          $(BinTestDirectory)*.Tests.ps1;"
        Exclude="$(BinTestDirectory)*Helpers*.dll;
          $(BinTestDirectory)Microsoft.*" />
      <IntegrationTestAssemblies Include="$(BinTestDirectory)*IntegrationTest*.dll" />
    </ItemGroup>

    <ItemGroup>
      <AssembliesToAnalyze Include="@(ModuleBuildOutput)" Condition="'%(ModuleBuildOutput.OutputType)' == 'Module'" />
      <AssembliesToAnalyze Include="@(BuildOutput)" />
    </ItemGroup>

    <!-- Determine if we can run the tests using the 64-bit test runner -->
    <GetAssemblyPlatform
      Condition="'$(Use32BitTestRunner)' == ''"
      Assemblies="@(AssembliesToAnalyze)">
      <Output ItemName="AssemblyList" TaskParameter="Assemblies" />
      <Output PropertyName="Use32BitTestRunner" TaskParameter="MustRun32Bit" />
    </GetAssemblyPlatform>

    <Message Text="Assembly: %(AssemblyList.FileName) [Platform: %(AssemblyList.Platform)]" Condition="'@(AssemblyList)' != ''" />

    <!-- 
      This section creates a .dll.config for each unit test assembly. The dll.config contains a probing path override 
      which includes two additional folders "ModuleBin" and "Dependencies". This is so unit tests can find dependencies
      without relying on copy local having deployed assemblies to the test directory.
    -->
    <PropertyGroup>
      <UnitTestAppConfigText>$([System.IO.File]::ReadAllText('$(BuildScriptsDirectory)UnitTestAppConfig.txt'))</UnitTestAppConfigText>
    </PropertyGroup>

    <ItemGroup>
      <TestAssemblyConfigFiles Include="@(TestAssemblies->'$(BinTestDirectory)%(RecursiveDir)%(Filename)%(Extension).config')" />
    </ItemGroup>

    <Touch Condition="!Exists(%(TestAssemblyConfigFiles.FullPath))"
      Files="%(TestAssemblyConfigFiles.FullPath)"
      AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="TouchedFiles" />
    </Touch>

    <ItemGroup>
      <XmlLinesToWrite Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
      <XmlLinesToWrite Include="&lt;configuration /&gt;" />
    </ItemGroup>

    <WriteLinesToFile Condition="'@(TouchedFiles)' != ''"
      File="%(TouchedFiles.FullPath)"
      Lines="@(XmlLinesToWrite)"
      Encoding="UTF-8" />

    <Error Condition="'$(UnitTestAppConfigText)' == ''" Text="No unit test app.config text defined!" />

    <XDocumentPoke Condition="Exists(%(TestAssemblyConfigFiles.FullPath))"
      File="%(TestAssemblyConfigFiles.FullPath)"
      Query="configuration/runtime"
      Value="$(UnitTestAppConfigText)" />

    <MakeSymlink Condition="'@(TestAssemblies)' != '' And Exists('$(DependenciesDirectory)')"
      Link="$(BinTestDirectory)Dependencies"
      Target="$(DependenciesDirectory)" />

    <MakeSymlink Condition="'@(TestAssemblies)' != '' And '$(IsWebModule)' != 'true'"
      Link="$(BinTestDirectory)ModuleBin"
      Target="$(BinModuleDirectory)" />
  </Target>


  <Target Name="AfterModuleBuild">
      <MSBuild Projects="@(ProjectsToBuild)"
        Targets="Build"
        BuildInParallel="true"
        Properties="%(ProjectsToBuild.Properties)" />

  </Target>


  <Target Name="Build" DependsOnTargets="$(RunTestsDependsOn)">
      <Message Text="
╔═════════════════════════════════════════════════════════════════════╗
║                 Unit Testing:    $(ModuleName.PadRight(26))         ║
╚═════════════════════════════════════════════════════════════════════╝
" Importance="high" />

    <CallTarget Targets="RunTests" />
  </Target>

</Project>
