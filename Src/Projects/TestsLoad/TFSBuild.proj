<?xml version="1.0" encoding="utf-8"?>
<Project
    DefaultTargets="DesktopBuild"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
    ToolsVersion="3.5">

  <!-- 
    =========================================================================================================
        Team Build Script - Workflow Prototype                                                 
        
        Maintained by Global DBA And Release Management.  DBARM monitors and approves all modifications.  
        Guidelines:
            * All Imports, Calls to external commands/tasks/$(BuildNumber)/utilities must be approved by DBARM  
            * Retain structure and formatting for easier merge between Team Build project scripts 
            * Tabs converted to 4 spaces for easier reading outside of VS.
    =========================================================================================================
    -->

  <ProjectExtensions>
    <ProjectFileVersion>2</ProjectFileVersion>
  </ProjectExtensions>

  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\TeamBuild\Microsoft.TeamFoundation.Build.targets" />
  <Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>

    <!-- Targets file has to be on the drop, as MSBuild pares this file bofore getting the workspace.-->
    <Import Project="\\na.aderant.com\expertsuite\Main\Build.Infrastructure\Src\Package\PackageTargets.proj"/>
  <!--
    ==========================================================================================
        Begin
    ==========================================================================================
  -->

  <PropertyGroup>
    <OnBuildBreakDependsOn>
      BeforeOnBuildBreak;
      GetChangeSetsOnBuildBreak;
      DropBuild;
      AfterOnBuildBreak;
    </OnBuildBreakDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <RunTest>true</RunTest>
    <RunCodeAnalysis>Never</RunCodeAnalysis>
    <SolutionDirectoryPath>$(SolutionRoot)</SolutionDirectoryPath>
    <TreatTestFailureAsBuildFailure>true</TreatTestFailureAsBuildFailure>
    <FrameworkHomeEnvVariable>FrameworkHome</FrameworkHomeEnvVariable>     
  </PropertyGroup>

  <!-- 
    ==========================================================================================
        Build Configurations
    ==========================================================================================
    -->
  <ItemGroup>
    <ConfigurationToBuild
        Condition="'$(BuildFlavor)'=='Release'"
		    Include="Release|Any CPU">
      <FlavorToBuild>Release</FlavorToBuild>
      <PlatformToBuild>Any CPU</PlatformToBuild>
    </ConfigurationToBuild>
  </ItemGroup>

  <Target
      Name="OnBuildBreak"
      Condition="('$(IsDesktopBuild)'!='true')"
      DependsOnTargets="$(OnBuildBreakDependsOn)"
        >
  </Target>

  <Target Name="AfterCompile">
    <CallTarget Targets="ProductPackage" />
  </Target>

  <!--
    ==========================================================================================
        Package The Load Tests
    ==========================================================================================
  -->

  <Target Name="PackageLoadTests"
          DependsOnTargets="CommonPackagingProperties" >

    <BuildStep
        Condition="('$(IsDesktopBuild)'!='true')"
        Message="Package Load Tests"
        TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
        BuildUri="$(BuildURI)"
            >
      <Output
          TaskParameter="id"
          PropertyName="BuildStepId"
                />
    </BuildStep>


    <!-- Clear test directory. -->
    <RemoveDir Directories="$(ExpertTestsDirectory)" Condition="Exists('$(ExpertTestsDirectory)')"/>
    <MakeDir Directories="$(ExpertTestsDirectory)" Condition="!Exists('$(ExpertTestsDirectory)')" />


    <!--Copy test binaries to folder for execution.-->
    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" "$(BuildScriptsDirectory)\GetProductTests.ps1" -productManifestPath $(LoadTestManifestPath) -dropRoot $(ExpertModulesDirectory) -binariesDirectory $(ExpertTestsDirectory) -buildLibrariesPath $(CommonBuildScriptsDirectory)'
          WorkingDirectory="$(BuildScriptsDirectory)" />

    <!--Copy to drop location for reference-->
    <MakeDir Directories="$(DropExpertTestsDirectory)" Condition="!Exists('$(DropExpertTestsDirectory)')" />
    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" Copy-Item -Path $(ExpertTestsDirectory)\* -Destination $(DropExpertTestsDirectory) -Recurse' />

    <BuildStep
        Condition="('$(IsDesktopBuild)'!='true')"
        TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
        BuildUri="$(BuildUri)"
        Id="$(BuildStepId)"
        Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>


  <!--
    ==========================================================================================
        Load Tests
    ==========================================================================================
  -->
  <Target Name="LoadTests"
        DependsOnTargets="CommonPackagingProperties"
        Condition="('$(RunTests)'=='true')" >

    <PropertyGroup>
      <IntergrationAssemblies>@(AderantTestAssembliesInclude->'%(TestContainerPrefix)%(Filename)',' ')</IntergrationAssemblies>
      <PublishBuildSwitch>/publishbuild:$(BuildNumber)</PublishBuildSwitch>
      <ConfigurationSwitch>/flavor:%(ConfigurationToBuild.FlavorToBuild)</ConfigurationSwitch>
      <PlatformSwitch>/platform:%(ConfigurationToBuild.PlatformToBuild)</PlatformSwitch>
      <PublishSwitch>/publish:$(TeamFoundationServerUrl)</PublishSwitch>
      <TeamProjectSwitch>/teamproject:$(TeamProject)</TeamProjectSwitch>
      <TestSettingsSwitch>/testsettings:$(TestSettingsFile)</TestSettingsSwitch>
      <ResultsFileSwitch>/resultsfile:$(ExpertProductDropDirectory)\LoadTestResults.trx</ResultsFileSwitch>

      <!--VS2010 paths as we are using 2008 TFS-->
      <VS2010TestHostDirectory>'$(VS100COMNTOOLS)..\IDE\'</VS2010TestHostDirectory>
      <PathToVS2010MSTest>$(VS100COMNTOOLS)..\IDE\MSTest.exe</PathToVS2010MSTest>
      <AderantBinLinkDirectory>'$(VS100COMNTOOLS)..\IDE\AderantBin\'</AderantBinLinkDirectory>

      <!--Remote machine-->
      <RemoteMachine>lrctl301.lr.aderant.com</RemoteMachine>
      <RemoteTestBinariesFolder>\\$(RemoteMachine)\TESTBINARIES</RemoteTestBinariesFolder>
    </PropertyGroup>

    <BuildStep
        Condition="('$(IsDesktopBuild)'!='true')"
        Message="Running Load Tests"
        TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
        BuildUri="$(BuildURI)"
            >
      <Output
          TaskParameter="id"
          PropertyName="BuildStepId"
                />
    </BuildStep>

    <!-- Copy the test settings file to the drop -->
    <Exec ContinueOnError="false"
          IgnoreExitCode="false"
          Command='"Powershell" Copy-Item -Path $(TestSettingsDirectory)\$(TestSettingsFile) -Destination $(DropExpertTestsDirectory) -Recurse' />

    <!--Run remote powershell on controller to execute load test -->
    <Exec
        ContinueOnError="false"
        IgnoreExitCode="false"
        Command='"Powershell" "$(BuildScriptsDirectory)\RunRemoteLoadTest.ps1" $(RemoteMachine) $(DropExpertTestsDirectory) $(RemoteTestBinariesFolder) $(TestSettingsFile) $(LoadTestContainerFile)' />


    <BuildStep
        Condition="('$(IsDesktopBuild)'!='true')"
        TeamFoundationServerUrl="$(TeamFoundationServerUrl)"
        BuildUri="$(BuildUri)"
        Id="$(BuildStepId)"
        Status="Succeeded" />

    <OnError ExecuteTargets="MarkBuildStepAsFailed" />

  </Target>

  <!--
    ==========================================================================================
        Packaging Tasks
    ==========================================================================================
  -->

  <Target Name="ProductPackage">
    <CallTarget Targets="PackageLoadTests"
                Condition="('$(PackageLoadTests)'=='true')"  />
    <CallTarget Targets="LoadTests" 
                Condition="('$(RunTests)'=='true')" />
  </Target>  


</Project>
